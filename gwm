/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2015 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <math.h>
#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

// void __usercall __noreturn start(__int64 a1);
int sub_10000197C();
void __cdecl -[LinkTextField resetCursorRects](struct LinkTextField *self, SEL);
id __cdecl -[GMAppController init](struct GMAppController *self, SEL);
void __cdecl -[GMAppController dealloc](struct GMAppController *self, SEL);
void __cdecl -[GMAppController awakeFromNib](struct GMAppController *self, SEL);
void __cdecl -[GMAppController setDataDict:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController setConnectStatus:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController setLoginStatus](struct GMAppController *self, SEL);
int __cdecl -[GMAppController browserSelectionType](struct GMAppController *self, SEL);
void __cdecl -[GMAppController addRequest:](struct GMAppController *self, SEL, int);
void __cdecl -[GMAppController removeFirstRequest](struct GMAppController *self, SEL);
id __cdecl -[GMAppController currentLog](struct GMAppController *self, SEL);
void __cdecl -[GMAppController setCurrentLog:](struct GMAppController *self, SEL, id);
char __cdecl -[GMAppController connectToGatewayController](struct GMAppController *self, SEL);
void __cdecl -[GMAppController serverMonitorThread:](struct GMAppController *self, SEL, id);
int __cdecl -[GMAppController getGatewayDataForType:sendingData:](struct GMAppController *self, SEL, int, id);
void __cdecl -[GMAppController gatewayLogin](struct GMAppController *self, SEL);
void __cdecl -[GMAppController getGatewayServers](struct GMAppController *self, SEL);
void __cdecl -[GMAppController getGatewayStatus](struct GMAppController *self, SEL);
void __cdecl -[GMAppController setGatewayStatus](struct GMAppController *self, SEL);
void __cdecl -[GMAppController getServerStatus](struct GMAppController *self, SEL);
void __cdecl -[GMAppController setServerOnline:](struct GMAppController *self, SEL, char);
void __cdecl -[GMAppController setServerDelete](struct GMAppController *self, SEL);
void __cdecl -[GMAppController setServerInterface](struct GMAppController *self, SEL);
void __cdecl -[GMAppController getGatewayLog](struct GMAppController *self, SEL);
void __cdecl -[GMAppController getServerLog](struct GMAppController *self, SEL);
void __cdecl -[GMAppController getMachineSearchList](struct GMAppController *self, SEL);
void __cdecl -[GMAppController getMachineLogList](struct GMAppController *self, SEL);
void __cdecl -[GMAppController getMachineLog](struct GMAppController *self, SEL);
id __cdecl -[GMAppController getLogAtPath:fromIndex:forServer:](struct GMAppController *self, SEL, id, uint64_t, id);
void __cdecl -[GMAppController removeServerAtIndex:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController updateMachineListForServer:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController saveLogAs:](struct GMAppController *self, SEL, id);
void *__fastcall sub_100005156(__int64 a1, unsigned int a2);
void __fastcall sub_100005180(__int64 a1, __int64 a2);
void __fastcall sub_1000051C0(__int64 a1);
void __cdecl -[GMAppController saveLogPanelDidEnd:returnCode:contextInfo:](struct GMAppController *self, SEL, id, int, void *);
void __cdecl -[GMAppController pageSetup:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController pageSetupDidEnd:returnCode:contextInfo:](struct GMAppController *self, SEL, id, int, void *);
void __cdecl -[GMAppController printLog:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController searchForUut:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController verifyGatewaySettings:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController saveGatewaySettings](struct GMAppController *self, SEL);
void __cdecl -[GMAppController revertGatewaySettings:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController removeServer:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController disconnectServer:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController changeServerInterface:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController showServerLog:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController changeMachineLogView:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController searchFieldChanged:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController showInvalidPasswordAlert](struct GMAppController *self, SEL);
void __cdecl -[GMAppController showReAuthenticationAlert](struct GMAppController *self, SEL);
void __cdecl -[GMAppController passwordAlertDidEnd:returnCode:contextInfo:](struct GMAppController *self, SEL, id, int, void *);
void __cdecl -[GMAppController showSaveVerifyAlert:message:](struct GMAppController *self, SEL, id, id);
void __cdecl -[GMAppController showSaveChangesAlert:](struct GMAppController *self, SEL, void *);
void __cdecl -[GMAppController saveChangesAlertDidEnd:returnCode:contextInfo:](struct GMAppController *self, SEL, id, int, void *);
void __cdecl -[GMAppController showSaveInterfaceAlert:](struct GMAppController *self, SEL, void *);
void __cdecl -[GMAppController saveInterfaceAlertDidEnd:returnCode:contextInfo:](struct GMAppController *self, SEL, id, int, void *);
void __cdecl -[GMAppController showInvalidInterfaceAlert:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController showNoLogsFoundAlert:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController showTooManyLogsFoundAlert:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController showNoConnectionView](struct GMAppController *self, SEL);
void __cdecl -[GMAppController showSplitView](struct GMAppController *self, SEL);
void __cdecl -[GMAppController updateAdrAwolTime](struct GMAppController *self, SEL);
void __cdecl -[GMAppController adjustTabView](struct GMAppController *self, SEL);
void __cdecl -[GMAppController switchToSubView:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController showSelectedTabView:](struct GMAppController *self, SEL, int);
void __cdecl -[GMAppController enableSaveRevertState:](struct GMAppController *self, SEL, char);
void __cdecl -[GMAppController showOverview](struct GMAppController *self, SEL);
void __cdecl -[GMAppController showLogs](struct GMAppController *self, SEL);
void __cdecl -[GMAppController showReports](struct GMAppController *self, SEL);
void __cdecl -[GMAppController showUUTs](struct GMAppController *self, SEL);
void __cdecl -[GMAppController showSettings](struct GMAppController *self, SEL);
void __cdecl -[GMAppController updateGatewayOverview](struct GMAppController *self, SEL);
void __cdecl -[GMAppController updateGatewaySettings](struct GMAppController *self, SEL);
void __cdecl -[GMAppController updateAuthenticationStatus:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController updateServerOverview:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController fillNetworkInterfacesPopUp:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController resetNetworkInterfacesPopUp:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController updateMachineOverview:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController updateSearchResultsView](struct GMAppController *self, SEL);
void __cdecl -[GMAppController updateMachineLogsView:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController clearTextView:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController fillGatewayTextViewWithString:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController fillServerTextViewWithString:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController fillMachineTextViewWithString:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController fillTextView:withString:](struct GMAppController *self, SEL, id, id);
void __cdecl -[GMAppController showLoginSheet](struct GMAppController *self, SEL);
void __cdecl -[GMAppController endLoginSheet:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController loginSheetDidEnd:returnCode:contextInfo:](struct GMAppController *self, SEL, id, int, void *);
void __cdecl -[GMAppController setupBigTextView](struct GMAppController *self, SEL);
void __cdecl -[GMAppController showOverlayWindow:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController showBigHonkingText:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController applicationDidFinishLaunching:](struct GMAppController *self, SEL, id);
uint64_t __cdecl -[GMAppController applicationShouldTerminate:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController applicationWillTerminate:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController controlTextDidChange:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController observeValueForKeyPath:ofObject:change:context:](struct GMAppController *self, SEL, id, id, id, void *);
void __cdecl -[GMAppController outlineViewSelectionDidChange:](struct GMAppController *self, SEL, id);
void __cdecl -[GMAppController tableViewSelectionDidChange:](struct GMAppController *self, SEL, id);
char __cdecl -[GMAppController validateMenuItem:](struct GMAppController *self, SEL, id);
int __cdecl -[GMAppController numberOfRowsInTableView:](struct GMAppController *self, SEL, id);
id __cdecl -[GMAppController tableView:objectValueForTableColumn:row:](struct GMAppController *self, SEL, id, id, int);
void __cdecl -[GMAppController tableView:willDisplayCell:forTableColumn:row:](struct GMAppController *self, SEL, id, id, id, int64_t);
void __cdecl -[GMAppController splitView:resizeSubviewsWithOldSize:](struct GMAppController *self, SEL, id, struct CGSize);
double __cdecl -[GMAppController splitView:constrainMinCoordinate:ofSubviewAt:](struct GMAppController *self, SEL, id, double, int64_t);
double __cdecl -[GMAppController splitView:constrainMaxCoordinate:ofSubviewAt:](struct GMAppController *self, SEL, id, double, int64_t);
id __cdecl -[GMAppController outlineView:child:ofItem:](struct GMAppController *self, SEL, id, int64_t, id);
char __cdecl -[GMAppController outlineView:isItemExpandable:](struct GMAppController *self, SEL, id, id);
int64_t __cdecl -[GMAppController outlineView:numberOfChildrenOfItem:](struct GMAppController *self, SEL, id, id);
id __cdecl -[GMAppController outlineView:objectValueForTableColumn:byItem:](struct GMAppController *self, SEL, id, id, id);
void __cdecl -[GMAppController outlineView:willDisplayCell:forTableColumn:item:](struct GMAppController *self, SEL, id, id, id, id);
char __cdecl -[GMAppController outlineView:shouldSelectItem:](struct GMAppController *self, SEL, id, id);
id __cdecl -[GMAppController outlineView:toolTipForCell:rect:tableColumn:item:mouseLocation:](struct GMAppController *self, SEL, id, id, struct CGRect *, id, id, struct CGPoint);
id __cdecl -[GMSplitView init](struct GMSplitView *self, SEL);
id __cdecl -[GMSplitView initWithCoder:](struct GMSplitView *self, SEL, id);
id __cdecl -[GMSplitView initWithFrame:](struct GMSplitView *self, SEL, struct CGRect);
void __cdecl -[GMSplitView commonInit](struct GMSplitView *self, SEL);
struct CGPoint __cdecl -[GMSplitView dividerOrigin](struct GMSplitView *self, SEL);
double __cdecl -[GMSplitView dividerThickness](struct GMSplitView *self, SEL);
void __cdecl -[GMSplitView placeDragHandleInSubview:](struct GMSplitView *self, SEL, id);
void __cdecl -[GMSplitView drawDividerInRect:](struct GMSplitView *self, SEL, struct CGRect);
void __cdecl -[GMSplitView dealloc](struct GMSplitView *self, SEL);
id __cdecl -[GMSplitViewHandleImageView initWithFrame:](struct GMSplitViewHandleImageView *self, SEL, struct CGRect);
void __cdecl -[GMSplitViewHandleImageView resetCursorRects](struct GMSplitViewHandleImageView *self, SEL);
void __cdecl -[GMSplitViewHandleImageView setSplitView:](struct GMSplitViewHandleImageView *self, SEL, id);
void __cdecl -[GMSplitViewHandleImageView mouseDown:](struct GMSplitViewHandleImageView *self, SEL, id);
void __cdecl -[GMSplitViewHandleImageView mouseDragged:](struct GMSplitViewHandleImageView *self, SEL, id);
void __cdecl -[GMSplitViewHandleImageView mouseUp:](struct GMSplitViewHandleImageView *self, SEL, id);
id __cdecl -[GMNavigationTab initWithType:](struct GMNavigationTab *self, SEL, int);
void __cdecl -[GMNavigationTab dealloc](struct GMNavigationTab *self, SEL);
char __cdecl -[GMNavigationTab isSelected](struct GMNavigationTab *self, SEL);
void __cdecl -[GMNavigationTab setIsSelected:](struct GMNavigationTab *self, SEL, char);
int __cdecl -[GMNavigationTab type](struct GMNavigationTab *self, SEL);
void __cdecl -[GMNavigationTab setType:](struct GMNavigationTab *self, SEL, int);
id __cdecl -[GMNavigationTab icon](struct GMNavigationTab *self, SEL);
void __cdecl -[GMNavigationTab setIcon:](struct GMNavigationTab *self, SEL, id);
id __cdecl -[GMNavigationTab label](struct GMNavigationTab *self, SEL);
void __cdecl -[GMNavigationTab setLabel:](struct GMNavigationTab *self, SEL, id);
id __cdecl -[GMNavigationTab description](struct GMNavigationTab *self, SEL);
id __cdecl -[IconViewBox hitTest:](struct IconViewBox *self, SEL, struct CGPoint);
void __cdecl -[GMNavTabViewController awakeFromNib](struct GMNavTabViewController *self, SEL);
void __cdecl -[GMNavTabViewController dealloc](struct GMNavTabViewController *self, SEL);
id __cdecl -[GMNavTabViewController collectionView](struct GMNavTabViewController *self, SEL);
id __cdecl -[GMNavTabViewController arrayController](struct GMNavTabViewController *self, SEL);
id __cdecl -[GMNavTabViewController tabs](struct GMNavTabViewController *self, SEL);
void __cdecl -[GMNavTabViewController setTabs:](struct GMNavTabViewController *self, SEL, id);
void __cdecl -[GMNavTabViewController resetSelected](struct GMNavTabViewController *self, SEL);
id __cdecl -[GMGatewayInfo init](struct GMGatewayInfo *self, SEL);
void __cdecl -[GMGatewayInfo dealloc](struct GMGatewayInfo *self, SEL);
char __cdecl -[GMGatewayInfo updateFromGatewayStatusDict:](struct GMGatewayInfo *self, SEL, id);
char __cdecl -[GMGatewayInfo controllerConnected](struct GMGatewayInfo *self, SEL);
void __cdecl -[GMGatewayInfo setControllerConnected:](struct GMGatewayInfo *self, SEL, char);
id __cdecl -[GMGatewayInfo name](struct GMGatewayInfo *self, SEL);
void __cdecl -[GMGatewayInfo setName:](struct GMGatewayInfo *self, SEL, id);
id __cdecl -[GMGatewayInfo version](struct GMGatewayInfo *self, SEL);
void __cdecl -[GMGatewayInfo setVersion:](struct GMGatewayInfo *self, SEL, id);
id __cdecl -[GMGatewayInfo controllerIP](struct GMGatewayInfo *self, SEL);
void __cdecl -[GMGatewayInfo setControllerIP:](struct GMGatewayInfo *self, SEL, id);
id __cdecl -[GMGatewayInfo controllerName](struct GMGatewayInfo *self, SEL);
void __cdecl -[GMGatewayInfo setControllerName:](struct GMGatewayInfo *self, SEL, id);
id __cdecl -[GMGatewayInfo logPath](struct GMGatewayInfo *self, SEL);
void __cdecl -[GMGatewayInfo setLogPath:](struct GMGatewayInfo *self, SEL, id);
id __cdecl -[GMGatewayInfo adminPass](struct GMGatewayInfo *self, SEL);
void __cdecl -[GMGatewayInfo setAdminPass:](struct GMGatewayInfo *self, SEL, id);
id __cdecl -[GMGatewayInfo userPass](struct GMGatewayInfo *self, SEL);
void __cdecl -[GMGatewayInfo setUserPass:](struct GMGatewayInfo *self, SEL, id);
id __cdecl -[GMGatewayInfo appleIP](struct GMGatewayInfo *self, SEL);
void __cdecl -[GMGatewayInfo setAppleIP:](struct GMGatewayInfo *self, SEL, id);
id __cdecl -[GMGatewayInfo siteID](struct GMGatewayInfo *self, SEL);
void __cdecl -[GMGatewayInfo setSiteID:](struct GMGatewayInfo *self, SEL, id);
id __cdecl -[GMGatewayInfo shipTo](struct GMGatewayInfo *self, SEL);
void __cdecl -[GMGatewayInfo setShipTo:](struct GMGatewayInfo *self, SEL, id);
id __cdecl -[GMGatewayInfo appleConnectName](struct GMGatewayInfo *self, SEL);
void __cdecl -[GMGatewayInfo setAppleConnectName:](struct GMGatewayInfo *self, SEL, id);
id __cdecl -[GMGatewayInfo appleConnectPass](struct GMGatewayInfo *self, SEL);
void __cdecl -[GMGatewayInfo setAppleConnectPass:](struct GMGatewayInfo *self, SEL, id);
id __cdecl -[GMGatewayInfo logContents](struct GMGatewayInfo *self, SEL);
void __cdecl -[GMGatewayInfo setLogContents:](struct GMGatewayInfo *self, SEL, id);
void __cdecl -[GMGatewayInfo appendLogContents:](struct GMGatewayInfo *self, SEL, id);
id __cdecl -[GMGatewayInfo serverList](struct GMGatewayInfo *self, SEL);
id __cdecl -[GMGatewayInfo settingsDict](struct GMGatewayInfo *self, SEL);
uint64_t __cdecl -[GMGatewayInfo logIndex](struct GMGatewayInfo *self, SEL);
int __cdecl -[GMGatewayInfo authenticationStatus](struct GMGatewayInfo *self, SEL);
int64_t __cdecl -[GMGatewayInfo numberOfServers](struct GMGatewayInfo *self, SEL);
id __cdecl -[GMGatewayInfo serverAtIndex:](struct GMGatewayInfo *self, SEL, int64_t);
void __cdecl -[GMGatewayInfo addServer:](struct GMGatewayInfo *self, SEL, id);
void __cdecl -[GMGatewayInfo removeServerAtIndex:](struct GMGatewayInfo *self, SEL, int64_t);
void __cdecl -[GMGatewayInfo removeAllServers](struct GMGatewayInfo *self, SEL);
int64_t __cdecl -[GMGatewayInfo indexOfServerWithIP:](struct GMGatewayInfo *self, SEL, id);
id __cdecl -[GMGatewayInfo serverWithHostName:](struct GMGatewayInfo *self, SEL, id);
id __cdecl -[GMGatewayInfo uutWithSerialNumber:](struct GMGatewayInfo *self, SEL, id);
id __cdecl -[GMServerInfo init](struct GMServerInfo *self, SEL);
id __cdecl -[GMServerInfo initWithServerDict:](struct GMServerInfo *self, SEL, id);
char __cdecl -[GMServerInfo updateFromGatewayServerDict:](struct GMServerInfo *self, SEL, id);
char __cdecl -[GMServerInfo updateFromServerStatusDict:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo createLogProxy:usingPort:](struct GMServerInfo *self, SEL, id, id);
void __cdecl -[GMServerInfo dealloc](struct GMServerInfo *self, SEL);
char __cdecl -[GMServerInfo isConnected](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setIsConnected:](struct GMServerInfo *self, SEL, char);
char __cdecl -[GMServerInfo upToDate](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setUpToDate:](struct GMServerInfo *self, SEL, char);
char __cdecl -[GMServerInfo haveApplist](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setHaveApplist:](struct GMServerInfo *self, SEL, char);
int __cdecl -[GMServerInfo status](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setStatus:](struct GMServerInfo *self, SEL, int);
int __cdecl -[GMServerInfo uutCount](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setUutCount:](struct GMServerInfo *self, SEL, int);
id __cdecl -[GMServerInfo ipAddress](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setIpAddress:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo hostName](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setHostName:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo serviceIdentifier](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setServiceIdentifier:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo serviceName](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setServiceName:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo serviceVersion](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setServiceVersion:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo lastAuthError](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setLastAuthError:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo lastAuthErrorString](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setLastAuthErrorString:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo activityLogPath](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setActivityLogPath:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo activityLogContents](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setActivityLogContents:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo transactionLogPath](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setTransactionLogPath:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo transactionLogContents](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setTransactionLogContents:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo lastTransmission](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setLastTransmission:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo networkInterface](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setNetworkInterface:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo pendingInterface](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setPendingInterface:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo networkInterfaceList](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setNetworkInterfaceList:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo port](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setPort:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo logProxy](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setLogProxy:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo diagAppList](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo setAppList:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo uutList](struct GMServerInfo *self, SEL);
id __cdecl -[GMServerInfo statusString](struct GMServerInfo *self, SEL);
uint64_t __cdecl -[GMServerInfo activityLogIndex](struct GMServerInfo *self, SEL);
uint64_t __cdecl -[GMServerInfo transactionLogIndex](struct GMServerInfo *self, SEL);
int64_t __cdecl -[GMServerInfo numberOfApps](struct GMServerInfo *self, SEL);
int64_t __cdecl -[GMServerInfo numberOfInterfaces](struct GMServerInfo *self, SEL);
int64_t __cdecl -[GMServerInfo numberOfUUTs](struct GMServerInfo *self, SEL);
id __cdecl -[GMServerInfo uutAtIndex:](struct GMServerInfo *self, SEL, int64_t);
void __cdecl -[GMServerInfo addUUT:](struct GMServerInfo *self, SEL, id);
id __cdecl -[GMServerInfo interfaceLabelList](struct GMServerInfo *self, SEL);
id __cdecl -[GMServerInfo descriptionForInterfaceWithName:](struct GMServerInfo *self, SEL, id);
int64_t __cdecl -[GMServerInfo indexOfUutWithSerialNumber:](struct GMServerInfo *self, SEL, id);
int64_t __cdecl -[GMServerInfo statusOfDiagAtIndex:](struct GMServerInfo *self, SEL, int64_t);
void __cdecl -[GMServerInfo resetMachineIsConnectedFlag](struct GMServerInfo *self, SEL);
void __cdecl -[GMServerInfo updateMachineStatus](struct GMServerInfo *self, SEL);
id __cdecl -[NSOutlineView(MyExtensions) selectedItem](struct NSOutlineView *self, SEL);
id __cdecl -[NSOutlineView(MyExtensions) allSelectedItems](struct NSOutlineView *self, SEL);
void __cdecl -[NSOutlineView(MyExtensions) selectItems:byExtendingSelection:](struct NSOutlineView *self, SEL, id, char);
char __cdecl -[NSOutlineView(MyExtensions) isSelected:](struct NSOutlineView *self, SEL, uint64_t);
void __cdecl -[ImageAndTextCell dealloc](struct ImageAndTextCell *self, SEL);
id __cdecl -[ImageAndTextCell copyWithZone:](struct ImageAndTextCell *self, SEL, struct _NSZone *);
void __cdecl -[ImageAndTextCell setImage:](struct ImageAndTextCell *self, SEL, id);
id __cdecl -[ImageAndTextCell image](struct ImageAndTextCell *self, SEL);
struct CGRect *__cdecl -[ImageAndTextCell imageFrameForCellFrame:](struct CGRect *__return_ptr __struct_ptr retstr, struct ImageAndTextCell *self, SEL, struct CGRect);
void __cdecl -[ImageAndTextCell editWithFrame:inView:editor:delegate:event:](struct ImageAndTextCell *self, SEL, struct CGRect, id, id, id, id);
void __cdecl -[ImageAndTextCell selectWithFrame:inView:editor:delegate:start:length:](struct ImageAndTextCell *self, SEL, struct CGRect, id, id, id, int64_t, int64_t);
void __cdecl -[ImageAndTextCell drawWithFrame:inView:](struct ImageAndTextCell *self, SEL, struct CGRect, id);
struct CGSize __cdecl -[ImageAndTextCell cellSize](struct ImageAndTextCell *self, SEL);
id __cdecl -[GMMachineInfo init](struct GMMachineInfo *self, SEL);
id __cdecl -[GMMachineInfo initWithMachineDict:](struct GMMachineInfo *self, SEL, id);
char __cdecl -[GMMachineInfo updateFromMachineStatusDict:](struct GMMachineInfo *self, SEL, id);
char __cdecl -[GMMachineInfo updateLogListFromLogsDict:](struct GMMachineInfo *self, SEL, id);
void __cdecl -[GMMachineInfo dealloc](struct GMMachineInfo *self, SEL);
char __cdecl -[GMMachineInfo isConnected](struct GMMachineInfo *self, SEL);
void __cdecl -[GMMachineInfo setIsConnected:](struct GMMachineInfo *self, SEL, char);
int __cdecl -[GMMachineInfo status](struct GMMachineInfo *self, SEL);
void __cdecl -[GMMachineInfo setStatus:](struct GMMachineInfo *self, SEL, int);
id __cdecl -[GMMachineInfo serialNumber](struct GMMachineInfo *self, SEL);
void __cdecl -[GMMachineInfo setSerialNumber:](struct GMMachineInfo *self, SEL, id);
id __cdecl -[GMMachineInfo productModel](struct GMMachineInfo *self, SEL);
void __cdecl -[GMMachineInfo setProductModel:](struct GMMachineInfo *self, SEL, id);
id __cdecl -[GMMachineInfo appleCareName](struct GMMachineInfo *self, SEL);
void __cdecl -[GMMachineInfo setAppleCareName:](struct GMMachineInfo *self, SEL, id);
id __cdecl -[GMMachineInfo currentDiag](struct GMMachineInfo *self, SEL);
void __cdecl -[GMMachineInfo setCurrentDiag:](struct GMMachineInfo *self, SEL, id);
id __cdecl -[GMMachineInfo diagVersion](struct GMMachineInfo *self, SEL);
void __cdecl -[GMMachineInfo setDiagVersion:](struct GMMachineInfo *self, SEL, id);
id __cdecl -[GMMachineInfo currentLogPath](struct GMMachineInfo *self, SEL);
void __cdecl -[GMMachineInfo setCurrentLogPath:](struct GMMachineInfo *self, SEL, id);
id __cdecl -[GMMachineInfo currentLog](struct GMMachineInfo *self, SEL);
void __cdecl -[GMMachineInfo setCurrentLog:](struct GMMachineInfo *self, SEL, id);
id __cdecl -[GMMachineInfo logList](struct GMMachineInfo *self, SEL);
int64_t __cdecl -[GMMachineInfo numberOfLogs](struct GMMachineInfo *self, SEL);
id __cdecl -[GMMachineInfo statusString](struct GMMachineInfo *self, SEL);
char __cdecl -[GMMachineInfo hasLogEntryWithPath:](struct GMMachineInfo *self, SEL, id);
__int64 __fastcall sub_100011C92(__int64 a1, __int64 a2, unsigned int a3, __int16 a4);
signed __int64 __fastcall sub_100011E7D(__int64 a1, _DWORD *a2, _WORD *a3, void *a4, unsigned int a5);
__int64 __fastcall sub_100011F1A(unsigned int a1, __int16 a2, __int16 a3);
__int64 __fastcall sub_1000120C7(void *a1, int a2);
__int64 __fastcall sub_10001210F(__int64 a1, __int64 a2, unsigned int a3);
__int64 __fastcall sub_100012242(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, unsigned int *a5);
signed __int64 __fastcall sub_10001239F(__int64 a1, int a2);
signed __int64 __fastcall sub_1000123B7(__int64 a1, int a2);
__int64 __fastcall sub_1000123CF(char *a1, char *a2, _DWORD *a3);
__int64 __fastcall sub_100012526(unsigned int a1, char *a2, size_t a3);
__int64 __fastcall sub_1000128F2(_WORD *a1);
__int64 __fastcall sub_100012902(unsigned int *a1);
__int64 __fastcall sub_10001290C(unsigned int a1, __int16 a2, _QWORD *a3);
void __fastcall sub_100012AAF(void *a1);
__int64 __fastcall sub_100012ADA(__int64 a1, unsigned int a2, __int16 a3, const void *a4, size_t a5);
ssize_t __fastcall sub_100012B36(__int64 a1, _DWORD *a2, _WORD *a3, void *a4, _WORD *a5, __int64 a6);
int __fastcall sub_100012D31(__int64 a1, int a2, char a3);
int __fastcall sub_100012D99(__int64 a1, unsigned int a2);
int __fastcall sub_100012DCC(__int64 a1);
int __fastcall sub_100012DE5(__int64 a1);
__int64 __fastcall sub_100012DFE(__int64 a1);
__int64 __fastcall sub_100012E06(__int64 a1);
void *__fastcall sub_100012E10(void *a1);
void *__fastcall sub_100012F74(void *a1, void *a2);
void *__fastcall sub_1000130C5(void *a1);
id __cdecl -[GMLogEntry init](struct GMLogEntry *self, SEL);
id __cdecl -[GMLogEntry initWithLogDict:](struct GMLogEntry *self, SEL, id);
void __cdecl -[GMLogEntry dealloc](struct GMLogEntry *self, SEL);
id __cdecl -[GMLogEntry serverHostName](struct GMLogEntry *self, SEL);
void __cdecl -[GMLogEntry setServerHostName:](struct GMLogEntry *self, SEL, id);
id __cdecl -[GMLogEntry serverPort](struct GMLogEntry *self, SEL);
void __cdecl -[GMLogEntry setServerPort:](struct GMLogEntry *self, SEL, id);
id __cdecl -[GMLogEntry logPath](struct GMLogEntry *self, SEL);
void __cdecl -[GMLogEntry setLogPath:](struct GMLogEntry *self, SEL, id);
id __cdecl -[GMLogEntry testDate](struct GMLogEntry *self, SEL);
void __cdecl -[GMLogEntry setTestDate:](struct GMLogEntry *self, SEL, id);
id __cdecl -[GMLogEntry toolName](struct GMLogEntry *self, SEL);
void __cdecl -[GMLogEntry setToolName:](struct GMLogEntry *self, SEL, id);
id __cdecl -[GMLogEntry toolVersion](struct GMLogEntry *self, SEL);
void __cdecl -[GMLogEntry setToolVersion:](struct GMLogEntry *self, SEL, id);
id __cdecl -[GMLogEntry opCode](struct GMLogEntry *self, SEL);
void __cdecl -[GMLogEntry setOpCode:](struct GMLogEntry *self, SEL, id);
int64_t __cdecl -[GMLogEntry sortByDateDescending:](struct GMLogEntry *self, SEL, id);
__int64 sub_1000138E3();
__int64 __fastcall sub_100013C3D(char *a1, char *a2, unsigned int a3);
__int64 __fastcall sub_100013DDE(char *, char *); // idb
__int64 sub_100013F4E();
__int64 sub_100013F66();
__int64 __fastcall sub_100013FCD(__int64 a1, void *a2);
void *__fastcall sub_10001411B(void *a1, void *a2);
void *__fastcall sub_100014252(__int64 a1, void *a2);
void __cdecl -[PopUpMenuButton awakeFromNib](struct PopUpMenuButton *self, SEL);
void __cdecl -[PopUpMenuButton dealloc](struct PopUpMenuButton *self, SEL);
void __cdecl -[PopUpMenuButton setUsesMenu:](struct PopUpMenuButton *self, SEL, char);
char __cdecl -[PopUpMenuButton usesMenu](struct PopUpMenuButton *self, SEL);
void __cdecl -[PopUpMenuButton _runPopUp:](struct PopUpMenuButton *self, SEL, id);
void __cdecl -[PopUpMenuButton mouseDown:](struct PopUpMenuButton *self, SEL, id);
id __cdecl -[GMSearchResults init](struct GMSearchResults *self, SEL);
void __cdecl -[GMSearchResults updateFromUutDict:](struct GMSearchResults *self, SEL, id);
void __cdecl -[GMSearchResults removeAllUuts](struct GMSearchResults *self, SEL);
void __cdecl -[GMSearchResults dealloc](struct GMSearchResults *self, SEL);
id __cdecl -[GMSearchResults uutList](struct GMSearchResults *self, SEL);
int64_t __cdecl -[GMSearchResults numberOfUUTs](struct GMSearchResults *self, SEL);
id __cdecl -[GMSearchResults uutAtIndex:](struct GMSearchResults *self, SEL, int64_t);
char __cdecl -[GMSearchResults hasUutWithSerialNumber:](struct GMSearchResults *self, SEL, id);
__int64 __fastcall sub_1000149AB(char *a1, char *a2, const char *a3);
char *__fastcall sub_100014ABF(char *a1);
char *__fastcall sub_100014B29(const char *a1);
char *__fastcall sub_100014B6E(char *a1, char *a2);
__int64 __fastcall sub_100014BD0(char *); // idb
char *__fastcall sub_100014C65(const char *a1);
__int64 __fastcall sub_100014CBA(char *a1, char *a2);
// FILE *__usercall sub_100014D87@<rax>(char *a1@<rdi>, __int64 a2@<rax>, const char *a3@<rsi>);
int __fastcall sub_100014DBF(FILE *a1);
id __cdecl -[GMServerInterface init](struct GMServerInterface *self, SEL);
id __cdecl -[GMServerInterface initWithInterfaceDict:](struct GMServerInterface *self, SEL, id);
void __cdecl -[GMServerInterface dealloc](struct GMServerInterface *self, SEL);
id __cdecl -[GMServerInterface networkName](struct GMServerInterface *self, SEL);
void __cdecl -[GMServerInterface setNetworkName:](struct GMServerInterface *self, SEL, id);
id __cdecl -[GMServerInterface ipAddress](struct GMServerInterface *self, SEL);
void __cdecl -[GMServerInterface setIpAddress:](struct GMServerInterface *self, SEL, id);
id __cdecl -[GMServerInterface macAddress](struct GMServerInterface *self, SEL);
void __cdecl -[GMServerInterface setMacAddress:](struct GMServerInterface *self, SEL, id);
id __cdecl -[GMServerInterface description](struct GMServerInterface *self, SEL);
void __cdecl -[NSWindow_ClickWin mouseDown:](struct NSWindow_ClickWin *self, SEL, id);
void __cdecl -[NSWindow_ClickWin setEatMouseClicks:](struct NSWindow_ClickWin *self, SEL, char);
void __cdecl -[NSWindow_ClickWin setBigTextWindow:](struct NSWindow_ClickWin *self, SEL, id);
id __cdecl -[BigTextView initWithFrame:](struct BigTextView *self, SEL, struct CGRect);
void __cdecl -[BigTextView drawRect:](struct BigTextView *self, SEL, struct CGRect);
void __cdecl -[BigTextView mouseDown:](struct BigTextView *self, SEL, id);
void __cdecl -[BigTextView setClicktWindow:](struct BigTextView *self, SEL, id);
void __cdecl -[BigTextView dealloc](struct BigTextView *self, SEL);
char __cdecl -[BigTextView isOpaque](struct BigTextView *self, SEL);
id __cdecl -[BigTextView string](struct BigTextView *self, SEL);
void __cdecl -[BigTextView setString:](struct BigTextView *self, SEL, id);
id __cdecl -[BigTextView foregroundColor](struct BigTextView *self, SEL);
void __cdecl -[BigTextView setForegroundColor:](struct BigTextView *self, SEL, id);
id __cdecl -[BigTextView backgroundColor](struct BigTextView *self, SEL);
void __cdecl -[BigTextView setBackgroundColor:](struct BigTextView *self, SEL, id);
id __cdecl -[BigTextView shadowColor](struct BigTextView *self, SEL);
void __cdecl -[BigTextView setShadowColor:](struct BigTextView *self, SEL, id);
float __cdecl -[BigTextView alpha](struct BigTextView *self, SEL);
void __cdecl -[BigTextView setAlpha:](struct BigTextView *self, SEL, float);
// int __fastcall SecAccessCreate(_QWORD, _QWORD, _QWORD); weak
// int __fastcall SecKeychainCreate(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// int __fastcall SecKeychainFindGenericPassword(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// int __fastcall SecKeychainItemCreateFromContent(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// int __fastcall SecKeychainItemFreeContent(_QWORD); weak
// int __fastcall SecKeychainItemModifyAttributesAndData(_QWORD, _QWORD, _QWORD, _QWORD); weak
// int __fastcall SecKeychainLock(_QWORD, _QWORD); weak
// int __fastcall SecKeychainOpen(_QWORD, _QWORD); weak
// int __fastcall SecKeychainUnlock(_QWORD, _QWORD, _QWORD, _QWORD); weak
// int __fastcall SecTrustedApplicationCreateFromPath(_QWORD, _QWORD); weak
// int CCCryptorCreate();
// int __fastcall CCCryptorRelease(_QWORD); weak
// int __fastcall CCCryptorUpdate(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// int __fastcall CC_MD5(_QWORD, _QWORD, _QWORD); weak
// int __fastcall CC_MD5_Final(_QWORD, _QWORD); weak
// int __fastcall CC_MD5_Init(_QWORD); weak
// int __fastcall CC_MD5_Update(_QWORD, _QWORD, _QWORD); weak
// void __cdecl _Block_object_assign(void *, const void *, const int);
// void __cdecl _Block_object_dispose(const void *, const int);
// void __cdecl __assert_rtn(const char *, const char *, int, const char *);
// int __fastcall __bzero(_QWORD, _QWORD); weak
// int __fastcall __memcpy_chk(_QWORD, _QWORD, _QWORD, _QWORD); weak
// int __fastcall __memset_chk(_QWORD, _QWORD, _QWORD, _QWORD); weak
// int __sprintf_chk(char *, int, size_t, const char *, ...);
// int __fastcall __strcat_chk(_QWORD, _QWORD, _QWORD); weak
// int __fastcall __strcpy_chk(_QWORD, _QWORD, _QWORD); weak
// int __cdecl bind(int, const struct sockaddr *, socklen_t);
// void *__cdecl calloc(size_t, size_t);
// double __cdecl ceil(double);
// int __cdecl close(int);
// void __cdecl exit(int);
// int __cdecl fclose(FILE *);
// int fcntl(int, int, ...);
// int __cdecl feof(FILE *);
// int __cdecl fflush(FILE *);
// char *__cdecl fgets(char *, int, FILE *);
// FILE *__cdecl fopen(const char *, const char *);
// int __cdecl fputs(const char *, FILE *);
// size_t __cdecl fread(void *, size_t, size_t, FILE *);
// void __cdecl free(void *);
// int __cdecl getsockname(int, struct sockaddr *, socklen_t *);
// void *__cdecl malloc(size_t);
// void *__cdecl memcpy(void *, const void *, size_t);
// int __cdecl pclose(FILE *);
// void __cdecl perror(const char *);
// FILE *__cdecl popen(const char *, const char *);
// int printf(const char *, ...);
// int __cdecl pthread_mutex_destroy(pthread_mutex_t *);
// int __cdecl pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *);
// int __cdecl pthread_mutex_lock(pthread_mutex_t *);
// int __cdecl pthread_mutex_unlock(pthread_mutex_t *);
// int __cdecl puts(const char *);
// ssize_t __cdecl recvfrom(int, void *, size_t, int, struct sockaddr *, socklen_t *);
// int __fastcall select_1050(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// ssize_t __cdecl sendto(int, const void *, size_t, int, const struct sockaddr *, socklen_t);
// int __cdecl setsockopt(int, int, int, const void *, socklen_t);
// unsigned int __cdecl sleep(unsigned int);
// int __cdecl socket(int, int, int);
// int sscanf(const char *, const char *, ...);
// char *__cdecl strchr(const char *, int);
// int __cdecl strcmp(const char *, const char *);
// char *__cdecl strcpy(char *, const char *);
// size_t __cdecl strlen(const char *);
// char *__cdecl strncpy(char *, const char *, size_t);
// char *__cdecl strstr(const char *, const char *);
// void syslog(int, const char *, ...);
// int __cdecl usleep(useconds_t);
// int NSApplicationMain(void); weak
// int __fastcall NSBeginAlertSheet(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// int __cdecl NSRectFill(_QWORD, _QWORD, _QWORD, _QWORD); weak
// int __fastcall CGWindowLevelForKey(_QWORD, _QWORD); weak
// int __fastcall NSDivideRect(_QWORD, _QWORD, _QWORD); weak
// int __fastcall NSLog(_QWORD, _QWORD); weak
// int __fastcall objc_enumerationMutation(_QWORD); weak
// void *objc_msgSendSuper2(void *, const char *, ...); idb
// void *objc_msgSend_stret(void *, const char *, ...); idb
// int __cdecl CFRelease(_QWORD); weak
void *objc_msgSend_ptr(void *, const char *, ...); // idb
// int _CCCryptorCreate(void); weak
// void *objc_msgSend(void *, const char *, ...); idb

//-------------------------------------------------------------------------
// Data declarations

void *NSApp_ptr = &NSApp; // weak
void *NSFontAttributeName_ptr = &NSFontAttributeName; // weak
void *NSForegroundColorAttributeName_ptr = &NSForegroundColorAttributeName; // weak
void *NSParagraphStyleAttributeName_ptr = &NSParagraphStyleAttributeName; // weak
void *NSShadowAttributeName_ptr = &NSShadowAttributeName; // weak
void *NSZeroPoint_ptr = &NSZeroPoint; // weak
void *NSZeroRect_ptr = &NSZeroRect; // weak
void *_NSConcreteStackBlock_ptr = &_NSConcreteStackBlock; // weak
void *__stack_chk_guard_ptr = &__stack_chk_guard; // weak
char *selRef_resetCursorRects = "resetCursorRects"; // weak
char *selRef_bounds = "bounds"; // weak
char *selRef_IBeamCursor = "IBeamCursor"; // weak
char *selRef_removeCursorRect_cursor_ = "removeCursorRect:cursor:"; // weak
char *selRef_pointingHandCursor = "pointingHandCursor"; // weak
char *selRef_addCursorRect_cursor_ = "addCursorRect:cursor:"; // weak
char *selRef_init = "init"; // weak
char *selRef_arrayWithCapacity_ = "arrayWithCapacity:"; // weak
char *selRef_initWithType_ = "initWithType:"; // weak
char *selRef_addObject_ = "addObject:"; // weak
char *selRef_dealloc = "dealloc"; // weak
char *selRef_initWithNibName_bundle_ = "initWithNibName:bundle:"; // weak
char *selRef_view = "view"; // weak
char *selRef_setFrame_ = "setFrame:"; // weak
char *selRef_addSubview_ = "addSubview:"; // weak
char *selRef_textContainer = "textContainer"; // weak
char *selRef_setContainerSize_ = "setContainerSize:"; // weak
char *selRef_setWidthTracksTextView_ = "setWidthTracksTextView:"; // weak
char *selRef_setHeightTracksTextView_ = "setHeightTracksTextView:"; // weak
char *selRef_enclosingScrollView = "enclosingScrollView"; // weak
char *selRef_setHasVerticalScroller_ = "setHasVerticalScroller:"; // weak
char *selRef_setHasHorizontalScroller_ = "setHasHorizontalScroller:"; // weak
char *selRef_setAutohidesScrollers_ = "setAutohidesScrollers:"; // weak
char *selRef_setAutoresizingMask_ = "setAutoresizingMask:"; // weak
char *selRef_contentView = "contentView"; // weak
char *selRef_setAutoresizesSubviews_ = "setAutoresizesSubviews:"; // weak
char *selRef_setDelegate_ = "setDelegate:"; // weak
char *selRef_standardUserDefaults = "standardUserDefaults"; // weak
char *selRef_integerForKey_ = "integerForKey:"; // weak
char *selRef_setPosition_ofDividerAtIndex_ = "setPosition:ofDividerAtIndex:"; // weak
char *selRef_adjustSubviews = "adjustSubviews"; // weak
char *selRef_mainBundle = "mainBundle"; // weak
char *selRef_localizedStringForKey_value_table_ = "localizedStringForKey:value:table:"; // weak
char *selRef_setStringValue_ = "setStringValue:"; // weak
char *selRef_itemAtIndex_ = "itemAtIndex:"; // weak
char *selRef_setTitle_ = "setTitle:"; // weak
char *selRef_stringWithFormat_ = "stringWithFormat:"; // weak
char *selRef_URLWithString_ = "URLWithString:"; // weak
char *selRef_setURL_ = "setURL:"; // weak
char *selRef_clearTextView_ = "clearTextView:"; // weak
char *selRef_switchToSubView_ = "switchToSubView:"; // weak
char *selRef_setTabs_ = "setTabs:"; // weak
char *selRef_arrayController = "arrayController"; // weak
char *selRef_addObserver_forKeyPath_options_context_ = "addObserver:forKeyPath:options:context:"; // weak
char *selRef_setupBigTextView = "setupBigTextView"; // weak
char *selRef_copy = "copy"; // weak
char *selRef_setHidden_ = "setHidden:"; // weak
char *selRef_startAnimation_ = "startAnimation:"; // weak
char *selRef_setNeedsDisplay_ = "setNeedsDisplay:"; // weak
char *selRef_selectedItem = "selectedItem"; // weak
char *selRef_tag = "tag"; // weak
char *selRef_type = "type"; // weak
char *selRef_removeObjectAtIndex_ = "removeObjectAtIndex:"; // weak
char *selRef_allSelectedItems = "allSelectedItems"; // weak
char *selRef_selectedRow = "selectedRow"; // weak
char *selRef_itemAtRow_ = "itemAtRow:"; // weak
char *selRef_lastObject = "lastObject"; // weak
char *selRef_intValue = "intValue"; // weak
char *selRef_numberWithInt_ = "numberWithInt:"; // weak
char *selRef_getGatewayServers = "getGatewayServers"; // weak
char *selRef_showLoginSheet = "showLoginSheet"; // weak
char *selRef_performSelectorOnMainThread_withObject_waitUntilDone_ = "performSelectorOnMainThread:withObject:waitUntilDone:"; // weak
char *selRef_showNoConnectionView = "showNoConnectionView"; // weak
char *selRef_gatewayLogin = "gatewayLogin"; // weak
char *selRef_getGatewayStatus = "getGatewayStatus"; // weak
char *selRef_setGatewayStatus = "setGatewayStatus"; // weak
char *selRef_getServerStatus = "getServerStatus"; // weak
char *selRef_setServerOnline_ = "setServerOnline:"; // weak
char *selRef_setServerDelete = "setServerDelete"; // weak
char *selRef_setServerInterface = "setServerInterface"; // weak
char *selRef_getGatewayLog = "getGatewayLog"; // weak
char *selRef_getServerLog = "getServerLog"; // weak
char *selRef_getMachineSearchList = "getMachineSearchList"; // weak
char *selRef_getMachineLogList = "getMachineLogList"; // weak
char *selRef_getMachineLog = "getMachineLog"; // weak
char *selRef_removeFirstRequest = "removeFirstRequest"; // weak
char *selRef_browserSelectionType = "browserSelectionType"; // weak
char *selRef_connectToGatewayController = "connectToGatewayController"; // weak
char *selRef_setDataDict_ = "setDataDict:"; // weak
char *selRef_dataFromPropertyList_format_errorDescription_ = "dataFromPropertyList:format:errorDescription:"; // weak
char *selRef_getBytes_length_ = "getBytes:length:"; // weak
char *selRef_dataWithBytes_length_ = "dataWithBytes:length:"; // weak
char *selRef_propertyListFromData_mutabilityOption_format_errorDescription_ = "propertyListFromData:mutabilityOption:format:errorDescription:"; // weak
char *selRef_UTF8String = "UTF8String"; // weak
char *selRef_stringValue = "stringValue"; // weak
char *selRef_dictionaryWithObjectsAndKeys_ = "dictionaryWithObjectsAndKeys:"; // weak
char *selRef_getGatewayDataForType_sendingData_ = "getGatewayDataForType:sendingData:"; // weak
char *selRef_setLoginStatus = "setLoginStatus"; // weak
char *selRef_setConnectStatus_ = "setConnectStatus:"; // weak
char *selRef_serverMonitorThread_ = "serverMonitorThread:"; // weak
char *selRef_detachNewThreadSelector_toTarget_withObject_ = "detachNewThreadSelector:toTarget:withObject:"; // weak
char *selRef_showInvalidPasswordAlert = "showInvalidPasswordAlert"; // weak
char *selRef_dictionaryWithCapacity_ = "dictionaryWithCapacity:"; // weak
char *selRef_countByEnumeratingWithState_objects_count_ = "countByEnumeratingWithState:objects:count:"; // weak
char *selRef_indexOfServerWithIP_ = "indexOfServerWithIP:"; // weak
char *selRef_initWithServerDict_ = "initWithServerDict:"; // weak
char *selRef_addServer_ = "addServer:"; // weak
char *selRef_ipAddress = "ipAddress"; // weak
char *selRef_setObject_forKey_ = "setObject:forKey:"; // weak
char *selRef_serverAtIndex_ = "serverAtIndex:"; // weak
char *selRef_updateFromGatewayServerDict_ = "updateFromGatewayServerDict:"; // weak
char *selRef_serverList = "serverList"; // weak
char *selRef_removeServerAtIndex_ = "removeServerAtIndex:"; // weak
char *selRef_numberWithInteger_ = "numberWithInteger:"; // weak
char *selRef_showSplitView = "showSplitView"; // weak
char *selRef_reloadData = "reloadData"; // weak
char *selRef_updateAuthenticationStatus_ = "updateAuthenticationStatus:"; // weak
char *selRef_updateServerOverview_ = "updateServerOverview:"; // weak
char *selRef_updateFromGatewayStatusDict_ = "updateFromGatewayStatusDict:"; // weak
char *selRef_updateGatewayOverview = "updateGatewayOverview"; // weak
char *selRef_settingsDict = "settingsDict"; // weak
char *selRef_showSettings = "showSettings"; // weak
char *selRef_updateFromServerStatusDict_ = "updateFromServerStatusDict:"; // weak
char *selRef_numberWithBool_ = "numberWithBool:"; // weak
char *selRef_logProxy = "logProxy"; // weak
char *selRef_title = "title"; // weak
char *selRef_componentsSeparatedByString_ = "componentsSeparatedByString:"; // weak
char *selRef_setInterface_ = "setInterface:"; // weak
char *selRef_showInvalidInterfaceAlert_ = "showInvalidInterfaceAlert:"; // weak
char *selRef_resetNetworkInterfacesPopUp_ = "resetNetworkInterfacesPopUp:"; // weak
char *selRef_controllerIP = "controllerIP"; // weak
char *selRef_logPath = "logPath"; // weak
char *selRef_logIndex = "logIndex"; // weak
char *selRef_getLogAtPath_fromIndex_forServer_ = "getLogAtPath:fromIndex:forServer:"; // weak
char *selRef_boolValue = "boolValue"; // weak
char *selRef_setLogContents_ = "setLogContents:"; // weak
char *selRef_logContents = "logContents"; // weak
char *selRef_stringByAppendingString_ = "stringByAppendingString:"; // weak
char *selRef_fillGatewayTextViewWithString_ = "fillGatewayTextViewWithString:"; // weak
char *selRef_activityLogPath = "activityLogPath"; // weak
char *selRef_activityLogIndex = "activityLogIndex"; // weak
char *selRef_transactionLogPath = "transactionLogPath"; // weak
char *selRef_transactionLogIndex = "transactionLogIndex"; // weak
char *selRef_setActivityLogContents_ = "setActivityLogContents:"; // weak
char *selRef_setTransactionLogContents_ = "setTransactionLogContents:"; // weak
char *selRef_activityLogContents = "activityLogContents"; // weak
char *selRef_transactionLogContents = "transactionLogContents"; // weak
char *selRef_fillServerTextViewWithString_ = "fillServerTextViewWithString:"; // weak
char *selRef_showTooManyLogsFoundAlert_ = "showTooManyLogsFoundAlert:"; // weak
char *selRef_removeAllUuts = "removeAllUuts"; // weak
char *selRef_updateSearchResultsView = "updateSearchResultsView"; // weak
char *selRef_showNoLogsFoundAlert_ = "showNoLogsFoundAlert:"; // weak
char *selRef_updateFromUutDict_ = "updateFromUutDict:"; // weak
char *selRef_serialNumber = "serialNumber"; // weak
char *selRef_updateLogListFromLogsDict_ = "updateLogListFromLogsDict:"; // weak
char *selRef_updateMachineLogsView_ = "updateMachineLogsView:"; // weak
char *selRef_logList = "logList"; // weak
char *selRef_arrayWithArray_ = "arrayWithArray:"; // weak
char *selRef_serverHostName = "serverHostName"; // weak
char *selRef_serverWithHostName_ = "serverWithHostName:"; // weak
char *selRef_setCurrentLog_ = "setCurrentLog:"; // weak
char *selRef_fillMachineTextViewWithString_ = "fillMachineTextViewWithString:"; // weak
char *selRef_currentLog = "currentLog"; // weak
char *selRef_getLogAndLengthAtPath_fromIndex_ = "getLogAndLengthAtPath:fromIndex:"; // weak
char *selRef_dictionaryWithDictionary_ = "dictionaryWithDictionary:"; // weak
char *selRef_integerValue = "integerValue"; // weak
char *selRef_updateMachineStatus = "updateMachineStatus"; // weak
char *selRef_arrayWithObjects_ = "arrayWithObjects:"; // weak
char *selRef_name = "name"; // weak
char *selRef_hostName = "hostName"; // weak
char *selRef_lastPathComponent = "lastPathComponent"; // weak
char *selRef_pathExtension = "pathExtension"; // weak
char *selRef_stringByDeletingPathExtension = "stringByDeletingPathExtension"; // weak
char *selRef_savePanel = "savePanel"; // weak
char *selRef_setAllowedFileTypes_ = "setAllowedFileTypes:"; // weak
char *selRef_setCanCreateDirectories_ = "setCanCreateDirectories:"; // weak
char *selRef_setCanSelectHiddenExtension_ = "setCanSelectHiddenExtension:"; // weak
char *selRef_setExtensionHidden_ = "setExtensionHidden:"; // weak
char *selRef_setNameFieldStringValue_ = "setNameFieldStringValue:"; // weak
char *selRef_setNameFieldLabel_ = "setNameFieldLabel:"; // weak
char *selRef_setPrompt_ = "setPrompt:"; // weak
char *selRef_setTreatsFilePackagesAsDirectories_ = "setTreatsFilePackagesAsDirectories:"; // weak
char *selRef_setAccessoryView_ = "setAccessoryView:"; // weak
char *selRef_saveLogPanelDidEnd_returnCode_contextInfo_ = "saveLogPanelDidEnd:returnCode:contextInfo:"; // weak
char *selRef_beginSheetModalForWindow_completionHandler_ = "beginSheetModalForWindow:completionHandler:"; // weak
char *selRef_URL = "URL"; // weak
char *selRef_path = "path"; // weak
char *selRef_writeToFile_atomically_encoding_error_ = "writeToFile:atomically:encoding:error:"; // weak
char *selRef_localizedDescription = "localizedDescription"; // weak
char *selRef_pageLayout = "pageLayout"; // weak
char *selRef_sharedPrintInfo = "sharedPrintInfo"; // weak
char *selRef_pageSetupDidEnd_returnCode_contextInfo_ = "pageSetupDidEnd:returnCode:contextInfo:"; // weak
char *selRef_beginSheetWithPrintInfo_modalForWindow_delegate_didEndSelector_contextInfo_ = "beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:"; // weak
char *selRef_setHorizontalPagination_ = "setHorizontalPagination:"; // weak
char *selRef_setTopMargin_ = "setTopMargin:"; // weak
char *selRef_setBottomMargin_ = "setBottomMargin:"; // weak
char *selRef_setLeftMargin_ = "setLeftMargin:"; // weak
char *selRef_setRightMargin_ = "setRightMargin:"; // weak
char *selRef_setHorizontallyCentered_ = "setHorizontallyCentered:"; // weak
char *selRef_setVerticallyCentered_ = "setVerticallyCentered:"; // weak
char *selRef_printOperationWithView_printInfo_ = "printOperationWithView:printInfo:"; // weak
char *selRef_setShowsPrintPanel_ = "setShowsPrintPanel:"; // weak
char *selRef_runOperationModalForWindow_delegate_didRunSelector_contextInfo_ = "runOperationModalForWindow:delegate:didRunSelector:contextInfo:"; // weak
char *selRef_makeFirstResponder_ = "makeFirstResponder:"; // weak
char *selRef_showSaveVerifyAlert_message_ = "showSaveVerifyAlert:message:"; // weak
char *selRef_saveGatewaySettings = "saveGatewaySettings"; // weak
char *selRef_setName_ = "setName:"; // weak
char *selRef_setAdminPass_ = "setAdminPass:"; // weak
char *selRef_setUserPass_ = "setUserPass:"; // weak
char *selRef_appleIP = "appleIP"; // weak
char *selRef_siteID = "siteID"; // weak
char *selRef_shipTo = "shipTo"; // weak
char *selRef_appleConnectName = "appleConnectName"; // weak
char *selRef_setAppleIP_ = "setAppleIP:"; // weak
char *selRef_setSiteID_ = "setSiteID:"; // weak
char *selRef_setShipTo_ = "setShipTo:"; // weak
char *selRef_setAppleConnectName_ = "setAppleConnectName:"; // weak
char *selRef_setAppleConnectPass_ = "setAppleConnectPass:"; // weak
char *selRef_addRequest_ = "addRequest:"; // weak
char *selRef_enableSaveRevertState_ = "enableSaveRevertState:"; // weak
char *selRef_updateGatewaySettings = "updateGatewaySettings"; // weak
char *selRef_status = "status"; // weak
char *selRef_pendingInterface = "pendingInterface"; // weak
char *selRef_descriptionForInterfaceWithName_ = "descriptionForInterfaceWithName:"; // weak
char *selRef_networkInterface = "networkInterface"; // weak
char *selRef_showSaveInterfaceAlert_ = "showSaveInterfaceAlert:"; // weak
char *selRef_showLogs = "showLogs"; // weak
char *selRef_selectItems_byExtendingSelection_ = "selectItems:byExtendingSelection:"; // weak
char *selRef_numberOfUUTs = "numberOfUUTs"; // weak
char *selRef_uutList = "uutList"; // weak
char *selRef_removeAllObjects = "removeAllObjects"; // weak
char *selRef_terminate_ = "terminate:"; // weak
char *selRef_verifyGatewaySettings_ = "verifyGatewaySettings:"; // weak
char *selRef_showSelectedTabView_ = "showSelectedTabView:"; // weak
char *selRef_arrayWithObject_ = "arrayWithObject:"; // weak
char *selRef_setSelectedObjects_ = "setSelectedObjects:"; // weak
char *selRef_setContentView_ = "setContentView:"; // weak
char *selRef_numberOfServers = "numberOfServers"; // weak
char *selRef_removeAllServers = "removeAllServers"; // weak
char *selRef_invalidate = "invalidate"; // weak
char *selRef_stopAnimation_ = "stopAnimation:"; // weak
char *selRef_updateAdrAwolTime = "updateAdrAwolTime"; // weak
char *selRef_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_ = "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"; // weak
char *selRef_authenticationStatus = "authenticationStatus"; // weak
char *selRef_showBigHonkingText_ = "showBigHonkingText:"; // weak
char *selRef_collectionView = "collectionView"; // weak
char *selRef_itemPrototype = "itemPrototype"; // weak
char *selRef_frame = "frame"; // weak
char *selRef_tabs = "tabs"; // weak
char *selRef_replaceSubview_with_ = "replaceSubview:with:"; // weak
char *selRef_showOverview = "showOverview"; // weak
char *selRef_showReports = "showReports"; // weak
char *selRef_showUUTs = "showUUTs"; // weak
char *selRef_isEnabled = "isEnabled"; // weak
char *selRef_setEnabled_ = "setEnabled:"; // weak
char *selRef_updateMachineOverview_ = "updateMachineOverview:"; // weak
char *selRef_version = "version"; // weak
char *selRef_controllerName = "controllerName"; // weak
char *selRef_imageNamed_ = "imageNamed:"; // weak
char *selRef_isVisible = "isVisible"; // weak
char *selRef_orderOut_ = "orderOut:"; // weak
char *selRef_setScalesWhenResized_ = "setScalesWhenResized:"; // weak
char *selRef_setSize_ = "setSize:"; // weak
char *selRef_setImage_ = "setImage:"; // weak
char *selRef_isConnected = "isConnected"; // weak
char *selRef_serviceVersion = "serviceVersion"; // weak
char *selRef_blackColor = "blackColor"; // weak
char *selRef_setTextColor_ = "setTextColor:"; // weak
char *selRef_upToDate = "upToDate"; // weak
char *selRef_redColor = "redColor"; // weak
char *selRef_statusString = "statusString"; // weak
char *selRef_lastTransmission = "lastTransmission"; // weak
char *selRef_timeIntervalSince1970 = "timeIntervalSince1970"; // weak
char *selRef_descriptionWithCalendarFormat_timeZone_locale_ = "descriptionWithCalendarFormat:timeZone:locale:"; // weak
char *selRef_uutCount = "uutCount"; // weak
char *selRef_numberOfInterfaces = "numberOfInterfaces"; // weak
char *selRef_fillNetworkInterfacesPopUp_ = "fillNetworkInterfacesPopUp:"; // weak
char *selRef_networkInterfaceList = "networkInterfaceList"; // weak
char *selRef_removeAllItems = "removeAllItems"; // weak
char *selRef_description = "description"; // weak
char *selRef_addItemWithTitle_ = "addItemWithTitle:"; // weak
char *selRef_networkName = "networkName"; // weak
char *selRef_selectItemAtIndex_ = "selectItemAtIndex:"; // weak
char *selRef_selectItemWithTitle_ = "selectItemWithTitle:"; // weak
char *selRef_productModel = "productModel"; // weak
char *selRef_appleCareName = "appleCareName"; // weak
char *selRef_currentDiag = "currentDiag"; // weak
char *selRef_currentLogPath = "currentLogPath"; // weak
char *selRef_deselectAll_ = "deselectAll:"; // weak
char *selRef_selectedRowIndexes = "selectedRowIndexes"; // weak
char *selRef_lastIndex = "lastIndex"; // weak
char *selRef_indexSetWithIndex_ = "indexSetWithIndex:"; // weak
char *selRef_selectRowIndexes_byExtendingSelection_ = "selectRowIndexes:byExtendingSelection:"; // weak
char *selRef_numberOfLogs = "numberOfLogs"; // weak
char *selRef_string = "string"; // weak
char *selRef_replaceCharactersInRange_withString_ = "replaceCharactersInRange:withString:"; // weak
char *selRef_scrollRangeToVisible_ = "scrollRangeToVisible:"; // weak
char *selRef_textStorage = "textStorage"; // weak
char *selRef_fillTextView_withString_ = "fillTextView:withString:"; // weak
char *selRef_whitespaceAndNewlineCharacterSet = "whitespaceAndNewlineCharacterSet"; // weak
char *selRef_componentsSeparatedByCharactersInSet_ = "componentsSeparatedByCharactersInSet:"; // weak
char *selRef_componentsJoinedByString_ = "componentsJoinedByString:"; // weak
char *selRef_selectedRange = "selectedRange"; // weak
char *selRef_fontWithName_size_ = "fontWithName:size:"; // weak
char *selRef_dictionaryWithObject_forKey_ = "dictionaryWithObject:forKey:"; // weak
char *selRef_defaultParagraphStyle = "defaultParagraphStyle"; // weak
char *selRef_mutableCopy = "mutableCopy"; // weak
char *selRef_array = "array"; // weak
char *selRef_setTabStops_ = "setTabStops:"; // weak
char *selRef_setDefaultTabInterval_ = "setDefaultTabInterval:"; // weak
char *selRef_stringByTrimmingCharactersInSet_ = "stringByTrimmingCharactersInSet:"; // weak
char *selRef_initWithString_attributes_ = "initWithString:attributes:"; // weak
char *selRef_documentVisibleRect = "documentVisibleRect"; // weak
char *selRef_documentRect = "documentRect"; // weak
char *selRef_lineScroll = "lineScroll"; // weak
char *selRef_replaceCharactersInRange_withAttributedString_ = "replaceCharactersInRange:withAttributedString:"; // weak
char *selRef_initWithString_ = "initWithString:"; // weak
char *selRef_appendAttributedString_ = "appendAttributedString:"; // weak
char *selRef_display = "display"; // weak
char *selRef_setSelectedRange_ = "setSelectedRange:"; // weak
char *selRef_loginSheetDidEnd_returnCode_contextInfo_ = "loginSheetDidEnd:returnCode:contextInfo:"; // weak
char *selRef_beginSheet_modalForWindow_modalDelegate_didEndSelector_contextInfo_ = "beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:"; // weak
char *selRef_makeKeyAndOrderFront_ = "makeKeyAndOrderFront:"; // weak
char *selRef_endSheet_returnCode_ = "endSheet:returnCode:"; // weak
char *selRef_mainScreen = "mainScreen"; // weak
char *selRef_initWithContentRect_styleMask_backing_defer_ = "initWithContentRect:styleMask:backing:defer:"; // weak
char *selRef_setOpaque_ = "setOpaque:"; // weak
char *selRef_setAlphaValue_ = "setAlphaValue:"; // weak
char *selRef_setLevel_ = "setLevel:"; // weak
char *selRef_blueColor = "blueColor"; // weak
char *selRef_setBackgroundColor_ = "setBackgroundColor:"; // weak
char *selRef_setReleasedWhenClosed_ = "setReleasedWhenClosed:"; // weak
char *selRef_floatValue = "floatValue"; // weak
char *selRef_whiteColor = "whiteColor"; // weak
char *selRef_clearColor = "clearColor"; // weak
char *selRef_initWithFrame_ = "initWithFrame:"; // weak
char *selRef_setClicktWindow_ = "setClicktWindow:"; // weak
char *selRef_setBigTextWindow_ = "setBigTextWindow:"; // weak
char *selRef_setForegroundColor_ = "setForegroundColor:"; // weak
char *selRef_setShadowColor_ = "setShadowColor:"; // weak
char *selRef_setAlpha_ = "setAlpha:"; // weak
char *selRef_setFrameOrigin_ = "setFrameOrigin:"; // weak
char *selRef_setString_ = "setString:"; // weak
char *selRef_update = "update"; // weak
char *selRef_orderFront_ = "orderFront:"; // weak
char *selRef_showOverlayWindow_ = "showOverlayWindow:"; // weak
char *selRef_expandItem_ = "expandItem:"; // weak
char *selRef_showSaveChangesAlert_ = "showSaveChangesAlert:"; // weak
char *selRef_defaultCenter = "defaultCenter"; // weak
char *selRef_removeObserver_ = "removeObserver:"; // weak
char *selRef_subviews = "subviews"; // weak
char *selRef_setInteger_forKey_ = "setInteger:forKey:"; // weak
char *selRef_object = "object"; // weak
char *selRef_selectedObjects = "selectedObjects"; // weak
char *selRef_adjustTabView = "adjustTabView"; // weak
char *selRef_action = "action"; // weak
char *selRef_saveLogAs_ = "saveLogAs:"; // weak
char *selRef_printLog_ = "printLog:"; // weak
char *selRef_searchForUut_ = "searchForUut:"; // weak
char *selRef_removeServer_ = "removeServer:"; // weak
char *selRef_disconnectServer_ = "disconnectServer:"; // weak
char *selRef_numberOfApps = "numberOfApps"; // weak
char *selRef_identifier = "identifier"; // weak
char *selRef_diagAppList = "diagAppList"; // weak
char *selRef_statusOfDiagAtIndex_ = "statusOfDiagAtIndex:"; // weak
char *selRef_testDate = "testDate"; // weak
char *selRef_toolName = "toolName"; // weak
char *selRef_toolVersion = "toolVersion"; // weak
char *selRef_opCode = "opCode"; // weak
char *selRef_orangeColor = "orangeColor"; // weak
char *selRef_isRowSelected_ = "isRowSelected:"; // weak
char *selRef_firstResponder = "firstResponder"; // weak
char *selRef_uutAtIndex_ = "uutAtIndex:"; // weak
char *selRef_commonInit = "commonInit"; // weak
char *selRef_initWithCoder_ = "initWithCoder:"; // weak
char *selRef_size = "size"; // weak
char *selRef_setSplitView_ = "setSplitView:"; // weak
char *selRef_visibleRect = "visibleRect"; // weak
char *selRef_saveGraphicsState = "saveGraphicsState"; // weak
char *selRef_currentContext = "currentContext"; // weak
char *selRef_bezierPath = "bezierPath"; // weak
char *selRef_appendBezierPathWithPoints_count_ = "appendBezierPathWithPoints:count:"; // weak
char *selRef_setLineWidth_ = "setLineWidth:"; // weak
char *selRef_lightGrayColor = "lightGrayColor"; // weak
char *selRef_set = "set"; // weak
char *selRef_setShouldAntialias_ = "setShouldAntialias:"; // weak
char *selRef_stroke = "stroke"; // weak
char *selRef_superview = "superview"; // weak
char *selRef_placeDragHandleInSubview_ = "placeDragHandleInSubview:"; // weak
char *selRef_restoreGraphicsState = "restoreGraphicsState"; // weak
char *selRef_resizeLeftRightCursor = "resizeLeftRightCursor"; // weak
char *selRef_locationInWindow = "locationInWindow"; // weak
char *selRef_dividerOrigin = "dividerOrigin"; // weak
char *selRef_modifierFlags = "modifierFlags"; // weak
char *selRef_timestamp = "timestamp"; // weak
char *selRef_windowNumber = "windowNumber"; // weak
char *selRef_context = "context"; // weak
char *selRef_eventNumber = "eventNumber"; // weak
char *selRef_clickCount = "clickCount"; // weak
char *selRef_pressure = "pressure"; // weak
char *selRef_mouseEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_clickCount_pressure_ = "mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:"; // weak
char *selRef_mouseDown_ = "mouseDown:"; // weak
char *selRef_mouseDragged_ = "mouseDragged:"; // weak
char *selRef_mouseUp_ = "mouseUp:"; // weak
char *selRef_setIsSelected_ = "setIsSelected:"; // weak
char *selRef_setVersion_ = "setVersion:"; // weak
char *selRef_setControllerIP_ = "setControllerIP:"; // weak
char *selRef_setControllerName_ = "setControllerName:"; // weak
char *selRef_setLogPath_ = "setLogPath:"; // weak
char *selRef_adminPass = "adminPass"; // weak
char *selRef_userPass = "userPass"; // weak
char *selRef_appleConnectPass = "appleConnectPass"; // weak
char *selRef_lastAuthError = "lastAuthError"; // weak
char *selRef_lastAuthErrorString = "lastAuthErrorString"; // weak
char *selRef_dateWithTimeIntervalSinceNow_ = "dateWithTimeIntervalSinceNow:"; // weak
char *selRef_setActivityLogPath_ = "setActivityLogPath:"; // weak
char *selRef_setIsConnected_ = "setIsConnected:"; // weak
char *selRef_setLastAuthError_ = "setLastAuthError:"; // weak
char *selRef_setLastAuthErrorString_ = "setLastAuthErrorString:"; // weak
char *selRef_setLastTransmission_ = "setLastTransmission:"; // weak
char *selRef_setUpToDate_ = "setUpToDate:"; // weak
char *selRef_setUutCount_ = "setUutCount:"; // weak
char *selRef_setHostName_ = "setHostName:"; // weak
char *selRef_setIpAddress_ = "setIpAddress:"; // weak
char *selRef_setStatus_ = "setStatus:"; // weak
char *selRef_setPort_ = "setPort:"; // weak
char *selRef_setTransactionLogPath_ = "setTransactionLogPath:"; // weak
char *selRef_createLogProxy_usingPort_ = "createLogProxy:usingPort:"; // weak
char *selRef_setLogProxy_ = "setLogProxy:"; // weak
char *selRef_isEqualToDate_ = "isEqualToDate:"; // weak
char *selRef_unsignedShortValue = "unsignedShortValue"; // weak
char *selRef_port = "port"; // weak
char *selRef_setServiceVersion_ = "setServiceVersion:"; // weak
char *selRef_setNetworkInterface_ = "setNetworkInterface:"; // weak
char *selRef_setPendingInterface_ = "setPendingInterface:"; // weak
char *selRef_initWithInterfaceDict_ = "initWithInterfaceDict:"; // weak
char *selRef_setNetworkInterfaceList_ = "setNetworkInterfaceList:"; // weak
char *selRef_setAppList_ = "setAppList:"; // weak
char *selRef_setHaveApplist_ = "setHaveApplist:"; // weak
char *selRef_currentHost = "currentHost"; // weak
char *selRef_initRemoteWithTCPPort_host_ = "initRemoteWithTCPPort:host:"; // weak
char *selRef_connectionWithReceivePort_sendPort_ = "connectionWithReceivePort:sendPort:"; // weak
char *selRef_setReplyTimeout_ = "setReplyTimeout:"; // weak
char *selRef_setRequestTimeout_ = "setRequestTimeout:"; // weak
char *selRef_rootProxy = "rootProxy"; // weak
char *selRef_setProtocolForProxy_ = "setProtocolForProxy:"; // weak
char *selRef_stringWithString_ = "stringWithString:"; // weak
char *selRef_firstIndex = "firstIndex"; // weak
char *selRef_indexGreaterThanIndex_ = "indexGreaterThanIndex:"; // weak
char *selRef_rowForItem_ = "rowForItem:"; // weak
char *selRef_copyWithZone_ = "copyWithZone:"; // weak
char *selRef_editWithFrame_inView_editor_delegate_event_ = "editWithFrame:inView:editor:delegate:event:"; // weak
char *selRef_selectWithFrame_inView_editor_delegate_start_length_ = "selectWithFrame:inView:editor:delegate:start:length:"; // weak
char *selRef_drawsBackground = "drawsBackground"; // weak
char *selRef_backgroundColor = "backgroundColor"; // weak
char *selRef_compositeToPoint_operation_ = "compositeToPoint:operation:"; // weak
char *selRef_drawWithFrame_inView_ = "drawWithFrame:inView:"; // weak
char *selRef_cellSize = "cellSize"; // weak
char *selRef_setAppleCareName_ = "setAppleCareName:"; // weak
char *selRef_setSerialNumber_ = "setSerialNumber:"; // weak
char *selRef_setProductModel_ = "setProductModel:"; // weak
char *selRef_setCurrentDiag_ = "setCurrentDiag:"; // weak
char *selRef_setCurrentLogPath_ = "setCurrentLogPath:"; // weak
char *selRef_objectEnumerator = "objectEnumerator"; // weak
char *selRef_nextObject = "nextObject"; // weak
char *selRef_hasLogEntryWithPath_ = "hasLogEntryWithPath:"; // weak
char *selRef_initWithLogDict_ = "initWithLogDict:"; // weak
char *selRef_sortByDateDescending_ = "sortByDateDescending:"; // weak
char *selRef_sortUsingSelector_ = "sortUsingSelector:"; // weak
char *selRef_cStringUsingEncoding_ = "cStringUsingEncoding:"; // weak
char *selRef_stringWithCapacity_ = "stringWithCapacity:"; // weak
char *selRef_lowercaseString = "lowercaseString"; // weak
char *selRef_rangeOfString_ = "rangeOfString:"; // weak
char *selRef_appendString_ = "appendString:"; // weak
char *selRef_getCString_maxLength_encoding_ = "getCString:maxLength:encoding:"; // weak
char *selRef_stringWithCString_encoding_ = "stringWithCString:encoding:"; // weak
char *selRef_setTestDate_ = "setTestDate:"; // weak
char *selRef_setToolName_ = "setToolName:"; // weak
char *selRef_setToolVersion_ = "setToolVersion:"; // weak
char *selRef_setOpCode_ = "setOpCode:"; // weak
char *selRef_setServerHostName_ = "setServerHostName:"; // weak
char *selRef_setServerPort_ = "setServerPort:"; // weak
char *selRef_compare_ = "compare:"; // weak
char *selRef_getCharacters_range_ = "getCharacters:range:"; // weak
char *selRef_dataWithLength_ = "dataWithLength:"; // weak
char *selRef_bytes = "bytes"; // weak
char *selRef_replaceBytesInRange_withBytes_ = "replaceBytesInRange:withBytes:"; // weak
char *selRef_mutableBytes = "mutableBytes"; // weak
char *selRef_setLength_ = "setLength:"; // weak
char *selRef_menu = "menu"; // weak
char *selRef_setUsesMenu_ = "setUsesMenu:"; // weak
char *selRef_initTextCell_ = "initTextCell:"; // weak
char *selRef_setPullsDown_ = "setPullsDown:"; // weak
char *selRef_setPreferredEdge_ = "setPreferredEdge:"; // weak
char *selRef_setHighlightsBy_ = "setHighlightsBy:"; // weak
char *selRef_setShowsStateBy_ = "setShowsStateBy:"; // weak
char *selRef_insertItemWithTitle_action_keyEquivalent_atIndex_ = "insertItemWithTitle:action:keyEquivalent:atIndex:"; // weak
char *selRef_setMenu_ = "setMenu:"; // weak
char *selRef_cell = "cell"; // weak
char *selRef_setHighlighted_ = "setHighlighted:"; // weak
char *selRef_performClickWithFrame_inView_ = "performClickWithFrame:inView:"; // weak
char *selRef_usesMenu = "usesMenu"; // weak
char *selRef__runPopUp_ = "_runPopUp:"; // weak
char *selRef_hasUutWithSerialNumber_ = "hasUutWithSerialNumber:"; // weak
char *selRef_setNetworkName_ = "setNetworkName:"; // weak
char *selRef_setMacAddress_ = "setMacAddress:"; // weak
char *selRef_close = "close"; // weak
char *selRef_moveToPoint_ = "moveToPoint:"; // weak
char *selRef_appendBezierPathWithOvalInRect_ = "appendBezierPathWithOvalInRect:"; // weak
char *selRef_appendBezierPathWithRect_ = "appendBezierPathWithRect:"; // weak
char *selRef_alpha = "alpha"; // weak
char *selRef_colorWithAlphaComponent_ = "colorWithAlphaComponent:"; // weak
char *selRef_fill = "fill"; // weak
char *selRef_boldSystemFontOfSize_ = "boldSystemFontOfSize:"; // weak
char *selRef_setShadowBlurRadius_ = "setShadowBlurRadius:"; // weak
char *selRef_shadowColor = "shadowColor"; // weak
char *selRef_setShadowOffset_ = "setShadowOffset:"; // weak
char *selRef_foregroundColor = "foregroundColor"; // weak
char *selRef_sizeWithAttributes_ = "sizeWithAttributes:"; // weak
char *selRef_drawAtPoint_withAttributes_ = "drawAtPoint:withAttributes:"; // weak
char *selRef_window = "window"; // weak
int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD) = &objc_msgSend_fixup; // weak
int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD) = &objc_msgSend_fixup; // weak
int (__fastcall *msgRef_autorelease__objc_msgSend_fixup)(_QWORD, _QWORD) = &objc_msgSend_fixup; // weak
int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD) = &objc_msgSend_fixup; // weak
int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD) = &objc_msgSend_fixup; // weak
int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD) = &objc_msgSend_fixup; // weak
int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD) = &objc_msgSend_fixup; // weak
int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD) = &objc_msgSend_fixup; // weak
int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD) = &objc_msgSend_fixup; // weak
int (__fastcall *msgRef_class__objc_msgSend_fixup)(_QWORD, _QWORD) = &objc_msgSend_fixup; // weak
int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD) = &objc_msgSend_fixup; // weak
int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD) = &objc_msgSend_fixup; // weak
int (__fastcall *msgRef_isFlipped__objc_msgSend_fixup)(_QWORD, _QWORD) = &objc_msgSend_fixup; // weak
__objc2_prot *protocolRef_ServerController = &OBJC_PROTOCOL___ServerController; // weak
void *classRef_NSCursor = &OBJC_CLASS___NSCursor; // weak
_QWORD classRef_GMGatewayInfo = 4295129032LL; // idb
_QWORD classRef_GMSearchResults = 4295129592LL; // idb
void *classRef_NSMutableArray = &OBJC_CLASS___NSMutableArray; // weak
_QWORD classRef_GMNavigationTab = 4295128792LL; // idb
_QWORD classRef_GMNavTabViewController = 4295128952LL; // idb
void *classRef_NSUserDefaults = &OBJC_CLASS___NSUserDefaults; // weak
void *classRef_NSBundle = &OBJC_CLASS___NSBundle; // weak
void *classRef_NSURL = &OBJC_CLASS___NSURL; // weak
void *classRef_NSString = &OBJC_CLASS___NSString; // weak
_QWORD classRef_GMServerInfo = 4295129112LL; // idb
_QWORD classRef_GMMachineInfo = 4295129352LL; // idb
void *classRef_NSNumber = &OBJC_CLASS___NSNumber; // weak
_QWORD classRef_NSAutoreleasePool = 4295141944LL; // idb
void *classRef_NSPropertyListSerialization = &OBJC_CLASS___NSPropertyListSerialization; // weak
void *classRef_NSData = &OBJC_CLASS___NSData; // weak
_QWORD classRef_NSDictionary = 4295141808LL; // idb
void *classRef_NSThread = &OBJC_CLASS___NSThread; // weak
void *classRef_NSMutableDictionary = &OBJC_CLASS___NSMutableDictionary; // weak
void *classRef_NSArray = &OBJC_CLASS___NSArray; // weak
void *classRef_NSSavePanel = &OBJC_CLASS___NSSavePanel; // weak
void *classRef_NSPageLayout = &OBJC_CLASS___NSPageLayout; // weak
void *classRef_NSPrintInfo = &OBJC_CLASS___NSPrintInfo; // weak
void *classRef_NSPrintOperation = &OBJC_CLASS___NSPrintOperation; // weak
_QWORD classRef_GMAppController = 4295128552LL; // idb
void *classRef_NSTimer = &OBJC_CLASS___NSTimer; // weak
void *classRef_NSImage = &OBJC_CLASS___NSImage; // weak
void *classRef_NSColor = &OBJC_CLASS___NSColor; // weak
void *classRef_NSIndexSet = &OBJC_CLASS___NSIndexSet; // weak
void *classRef_NSCharacterSet = &OBJC_CLASS___NSCharacterSet; // weak
void *classRef_NSFont = &OBJC_CLASS___NSFont; // weak
void *classRef_NSParagraphStyle = &OBJC_CLASS___NSParagraphStyle; // weak
_QWORD classRef_NSMutableAttributedString = 4295141992LL; // idb
_QWORD classRef_NSAttributedString = 4295141936LL; // idb
void *classRef_NSScreen = &OBJC_CLASS___NSScreen; // weak
_QWORD classRef_NSWindow_ClickWin = 4295129792LL; // idb
_QWORD classRef_NSWindow = 4295142312LL; // idb
_QWORD classRef_BigTextView = 4295129832LL; // idb
void *classRef_NSNotificationCenter = &OBJC_CLASS___NSNotificationCenter; // weak
_QWORD classRef_GMSplitViewHandleImageView = 4295128672LL; // idb
void *classRef_NSGraphicsContext = &OBJC_CLASS___NSGraphicsContext; // weak
void *classRef_NSBezierPath = &OBJC_CLASS___NSBezierPath; // weak
void *classRef_NSEvent = &OBJC_CLASS___NSEvent; // weak
void *classRef_NSDate = &OBJC_CLASS___NSDate; // weak
_QWORD classRef_GMServerInterface = 4295129672LL; // idb
void *classRef_NSHost = &OBJC_CLASS___NSHost; // weak
_QWORD classRef_NSSocketPort = 4295142032LL; // idb
void *classRef_NSConnection = &OBJC_CLASS___NSConnection; // weak
_QWORD classRef_GMLogEntry = 4295129432LL; // idb
void *classRef_NSMutableString = &OBJC_CLASS___NSMutableString; // weak
void *classRef_NSMutableData = &OBJC_CLASS___NSMutableData; // weak
_QWORD classRef_NSPopUpButtonCell = 4295142224LL; // idb
_QWORD classRef_NSShadow = 4295142264LL; // idb
void *classRef_LinkTextField = &OBJC_CLASS___LinkTextField; // weak
void *classRef_GMAppController_0 = &OBJC_CLASS___GMAppController; // weak
void *classRef_GMSplitView = &OBJC_CLASS___GMSplitView; // weak
void *classRef_GMSplitViewHandleImageView_0 = &OBJC_CLASS___GMSplitViewHandleImageView; // weak
void *classRef_GMNavigationTab_0 = &OBJC_CLASS___GMNavigationTab; // weak
void *classRef_GMNavTabViewController_0 = &OBJC_CLASS___GMNavTabViewController; // weak
void *classRef_GMGatewayInfo_0 = &OBJC_CLASS___GMGatewayInfo; // weak
void *classRef_GMServerInfo_0 = &OBJC_CLASS___GMServerInfo; // weak
void *classRef_ImageAndTextCell = &OBJC_CLASS___ImageAndTextCell; // weak
void *classRef_GMMachineInfo_0 = &OBJC_CLASS___GMMachineInfo; // weak
void *classRef_GMLogEntry_0 = &OBJC_CLASS___GMLogEntry; // weak
void *classRef_PopUpMenuButton = &OBJC_CLASS___PopUpMenuButton; // weak
void *classRef_GMSearchResults_0 = &OBJC_CLASS___GMSearchResults; // weak
void *classRef_GMServerInterface_0 = &OBJC_CLASS___GMServerInterface; // weak
void *classRef_BigTextView_0 = &OBJC_CLASS___BigTextView; // weak
_QWORD stru_100028108 = 4295141888LL; // idb
__CFString cfstr_Collection = { &__CFConstantStringClassReference, 1992LL, "Collection", 10LL }; // weak
__CFString cfstr_Browserwidth = { &__CFConstantStringClassReference, 1992LL, "BrowserWidth", 12LL }; // weak
__CFString cfstr_Kgatewaychecki = { &__CFConstantStringClassReference, 1992LL, "kGatewayCheckingAuth", 20LL }; // weak
__CFString cfstr_Ast_controller = { &__CFConstantStringClassReference, 1992LL, "AST_Controller.log", 18LL }; // weak
_QWORD cfstr_Ast_unittest_l = 4295141888LL; // idb
__CFString cfstr_Ast_repository = { &__CFConstantStringClassReference, 1992LL, "AST_Repository.log", 18LL }; // weak
__CFString cfstr___ = { &__CFConstantStringClassReference, 1992LL, "%@%@", 4LL }; // weak
__CFString cfstr_VarLogAdg = { &__CFConstantStringClassReference, 1992LL, "/var/log/adg/", 13LL }; // weak
__CFString cfstr_Selectedobje_1 = { &__CFConstantStringClassReference, 1992LL, "selectedObjects", 15LL }; // weak
__CFString cfstr_Applecare = { &__CFConstantStringClassReference, 1992LL, "aPpLeCaRe", 9LL }; // weak
__CFString cfstr_ConnectionToGa =
{
  &__CFConstantStringClassReference,
  1992LL,
  "Connection to Gateway Controller lost. Attempting to reconnect...",
  65LL
}; // weak
__CFString cfstr_Gatewayclient_ =
{
  &__CFConstantStringClassReference,
  1992LL,
  "GatewayClient_SendDataWithResponse error: 0x%x",
  46LL
}; // weak
__CFString cfstr_InvalidSession = { &__CFConstantStringClassReference, 1992LL, "Invalid session ID", 18LL }; // weak
__CFString cfstr_Adg_admin = { &__CFConstantStringClassReference, 1992LL, "adg_admin", 9LL }; // weak
__CFString cfstr_Adg_tech = { &__CFConstantStringClassReference, 1992LL, "adg_tech", 8LL }; // weak
__CFString cfstr_Loginname = { &__CFConstantStringClassReference, 1992LL, "LogInName", 9LL }; // weak
__CFString cfstr_Knegotiateserv = { &__CFConstantStringClassReference, 1992LL, "kNegotiateServerMessage", 23LL }; // weak
__CFString cfstr_ExpectedAnNsdi =
{
  &__CFConstantStringClassReference,
  1992LL,
  "Expected an NSDictionary but received: %@",
  41LL
}; // weak
_QWORD cfstr_Serverip = 4295141888LL; // idb
__CFString cfstr_Getgatewayda_6 =
{
  &__CFConstantStringClassReference,
  1992LL,
  "getGatewayDataForType:kGetGatewayServers status: 0x%x\n",
  54LL
}; // weak
__CFString cfstr_Getgatewayda_0 =
{
  &__CFConstantStringClassReference,
  1992LL,
  "getGatewayDataForType:kGatewayStatusMsg status: 0x%x\n",
  53LL
}; // weak
__CFString cfstr_GatewaymgrSetg =
{
  &__CFConstantStringClassReference,
  1992LL,
  "GatewayMgr setGatewayStatus...\n",
  31LL
}; // weak
__CFString cfstr_GatewaymgrSe_1 =
{
  &__CFConstantStringClassReference,
  1992LL,
  "GatewayMgr setGatewayStatus: status: 0x%x\n",
  42LL
}; // weak
__CFString cfstr_GatewaymgrData = { &__CFConstantStringClassReference, 1992LL, "GatewayMgr dataDict: %@", 23LL }; // weak
__CFString cfstr_Getgatewayda_1 =
{
  &__CFConstantStringClassReference,
  1992LL,
  "getGatewayDataForType:kGetServerStatus status: 0x%x\n",
  52LL
}; // weak
__CFString cfstr_Online = { &__CFConstantStringClassReference, 1992LL, "OnLine", 6LL }; // weak
__CFString cfstr_Getgatewayda_2 =
{
  &__CFConstantStringClassReference,
  1992LL,
  "getGatewayDataForType:kSetServerStatus status: 0x%x\n",
  52LL
}; // weak
__CFString cfstr_Deleteserver = { &__CFConstantStringClassReference, 1992LL, "DeleteServer", 12LL }; // weak
__CFString stru_1000284E8 = { &__CFConstantStringClassReference, 1992LL, " - ", 3LL }; // weak
_QWORD cfstr_Isfulllog = 4295141888LL; // idb
_QWORD cfstr_Logcontents_1 = 4295141888LL; // idb
_QWORD cfstr_Partialssn = 4295141888LL; // idb
_QWORD cfstr_Searcherror = 4295141888LL; // idb
_QWORD cfstr_Uutsfound = 4295141888LL; // idb
__CFString cfstr_Getgatewayda_3 =
{
  &__CFConstantStringClassReference,
  1992LL,
  "getGatewayDataForType:kGetUnitsMatchingPartialSSN status: 0x%x\n",
  63LL
}; // weak
_QWORD cfstr_Serialnumber_1 = 4295141888LL; // idb
__CFString cfstr_Getgatewayda_4 =
{
  &__CFConstantStringClassReference,
  1992LL,
  "getGatewayDataForType:kGetUUTLogs status: 0x%x\n",
  47LL
}; // weak
__CFString cfstr_Klogfileempty = { &__CFConstantStringClassReference, 1992LL, "kLogFileEmpty", 13LL }; // weak
__CFString cfstr_Log = { &__CFConstantStringClassReference, 1992LL, "log", 3LL }; // weak
__CFString cfstr____2 = { &__CFConstantStringClassReference, 1992LL, "%@ %@", 5LL }; // weak
__CFString cfstr_Gw_log = { &__CFConstantStringClassReference, 1992LL, "gw_log", 6LL }; // weak
_QWORD cfstr_Tmp = 4295141888LL; // idb
__CFString cfstr_Ksavelogastitl = { &__CFConstantStringClassReference, 1992LL, "kSaveLogAsTitle", 15LL }; // weak
__CFString cfstr_Ksavebutton = { &__CFConstantStringClassReference, 1992LL, "kSaveButton", 11LL }; // weak
__CFString cfstr_ErrorWritingTo =
{
  &__CFConstantStringClassReference,
  1992LL,
  "Error writing to file \"%@\": %@",
  30LL
}; // weak
__CFString cfstr_Verifygatewa_1 =
{
  &__CFConstantStringClassReference,
  1992LL,
  "verifyGatewaySettings...\n",
  25LL
}; // weak
__CFString cfstr_Kverifyincompl = { &__CFConstantStringClassReference, 1992LL, "kVerifyIncompleteTitle", 22LL }; // weak
__CFString cfstr_Kverifynoident =
{
  &__CFConstantStringClassReference,
  1992LL,
  "kVerifyNoIdentifierMessage",
  26LL
}; // weak
__CFString cfstr_Kverifypasswor = { &__CFConstantStringClassReference, 1992LL, "kVerifyPasswordTitle", 20LL }; // weak
__CFString cfstr_Kverifyadminpa =
{
  &__CFConstantStringClassReference,
  1992LL,
  "kVerifyAdminPasswordMessage",
  27LL
}; // weak
__CFString cfstr_Kverifyuserpas =
{
  &__CFConstantStringClassReference,
  1992LL,
  "kVerifyUserPasswordMessage",
  26LL
}; // weak
__CFString cfstr_Kverifyacpassw = { &__CFConstantStringClassReference, 1992LL, "kVerifyACPasswordMessage", 24LL }; // weak
__CFString cfstr_GatewaymgrSave =
{
  &__CFConstantStringClassReference,
  1992LL,
  "GatewayMgr: Savesettings: %d\n",
  29LL
}; // weak
__CFString cfstr_Kgatewayauthen = { &__CFConstantStringClassReference, 1992LL, "kGatewayAuthenticating", 22LL }; // weak
__CFString cfstr_GatewaymgrAddr =
{
  &__CFConstantStringClassReference,
  1992LL,
  "GatewayMgr: addRequest:kRequestGatewaySettings\n",
  47LL
}; // weak
__CFString cfstr_Kinvalidpasswo = { &__CFConstantStringClassReference, 1992LL, "kInvalidPasswordTitle", 21LL }; // weak
__CFString cfstr_Kokaybutton = { &__CFConstantStringClassReference, 1992LL, "kOkayButton", 11LL }; // weak
__CFString cfstr_Kquitbutton = { &__CFConstantStringClassReference, 1992LL, "kQuitButton", 11LL }; // weak
__CFString cfstr_Kinvalidpass_1 = { &__CFConstantStringClassReference, 1992LL, "kInvalidPasswordMessage", 23LL }; // weak
__CFString cfstr_Kreauthenticat = { &__CFConstantStringClassReference, 1992LL, "kReAuthenticationTitle", 22LL }; // weak
__CFString cfstr_Kreauthentic_1 = { &__CFConstantStringClassReference, 1992LL, "kReAuthenticationMessage", 24LL }; // weak
__CFString cfstr_Ksavechangesal = { &__CFConstantStringClassReference, 1992LL, "kSaveChangesAlertTitle", 22LL }; // weak
__CFString cfstr_Kdontsavebutto = { &__CFConstantStringClassReference, 1992LL, "kDontSaveButton", 15LL }; // weak
__CFString cfstr_Kcancelbutton = { &__CFConstantStringClassReference, 1992LL, "kCancelButton", 13LL }; // weak
__CFString cfstr_Ksavechanges_1 = { &__CFConstantStringClassReference, 1992LL, "kSaveChangesAlertMessage", 24LL }; // weak
__CFString cfstr_Ksaveinterface = { &__CFConstantStringClassReference, 1992LL, "kSaveInterfaceAlertTitle", 24LL }; // weak
__CFString cfstr_Ksaveinterfa_1 =
{
  &__CFConstantStringClassReference,
  1992LL,
  "kSaveInterfaceAlertMessage",
  26LL
}; // weak
__CFString cfstr_Kinvalidinterf = { &__CFConstantStringClassReference, 1992LL, "kInvalidInterfaceTitle", 22LL }; // weak
__CFString cfstr_Kinvalidinte_1 = { &__CFConstantStringClassReference, 1992LL, "kInvalidInterfaceMessage", 24LL }; // weak
__CFString cfstr_Knologsfoundti = { &__CFConstantStringClassReference, 1992LL, "kNoLogsFoundTitle", 17LL }; // weak
__CFString cfstr_Knologsfoundme = { &__CFConstantStringClassReference, 1992LL, "kNoLogsFoundMessage", 19LL }; // weak
__CFString cfstr_Ktoomanylogsfo = { &__CFConstantStringClassReference, 1992LL, "kTooManyLogsFoundTitle", 22LL }; // weak
__CFString cfstr_Ktoomanylogs_1 = { &__CFConstantStringClassReference, 1992LL, "kTooManyLogsFoundMessage", 24LL }; // weak
__CFString cfstr_Knoconnectionm = { &__CFConstantStringClassReference, 1992LL, "kNoConnectionMessage", 20LL }; // weak
__CFString cfstr_Kadrservernota = { &__CFConstantStringClassReference, 1992LL, "kADRServerNotAvailable", 22LL }; // weak
__CFString cfstr_GatewaymgrAdrS =
{
  &__CFConstantStringClassReference,
  1992LL,
  "GatewayMgr: ADR Server not available\n",
  37LL
}; // weak
__CFString cfstr_Ld = { &__CFConstantStringClassReference, 1992LL, "%ld", 3LL }; // weak
__CFString cfstr_GatewaymgrAuth =
{
  &__CFConstantStringClassReference,
  1992LL,
  "GatewayMgr: authStatus: %d\n",
  27LL
}; // weak
__CFString cfstr_Kgatewayauth_1 = { &__CFConstantStringClassReference, 1992LL, "kGatewayAuthenticated", 21LL }; // weak
__CFString cfstr_Auth_success = { &__CFConstantStringClassReference, 1992LL, "auth_success", 12LL }; // weak
__CFString cfstr_Kgatewaymissin = { &__CFConstantStringClassReference, 1992LL, "kGatewayMissingURL", 18LL }; // weak
__CFString cfstr_Kgatewaymiss_2 = { &__CFConstantStringClassReference, 1992LL, "kGatewayMissingSoldTo", 21LL }; // weak
__CFString cfstr_Kgatewaymiss_0 = { &__CFConstantStringClassReference, 1992LL, "kGatewayMissingAppleID", 22LL }; // weak
__CFString cfstr_Kgatewayinvali = { &__CFConstantStringClassReference, 1992LL, "kGatewayInvalidSoldTo", 21LL }; // weak
__CFString cfstr_Kgatewayinva_4 = { &__CFConstantStringClassReference, 1992LL, "kGatewayInvalidShipTo", 21LL }; // weak
__CFString cfstr_Kgatewayinva_0 = { &__CFConstantStringClassReference, 1992LL, "kGatewayInvalidAppleID", 22LL }; // weak
__CFString cfstr_Kgatewayinva_1 = { &__CFConstantStringClassReference, 1992LL, "kGatewayInvalidPassword", 23LL }; // weak
__CFString cfstr_Kgatewayinva_2 =
{
  &__CFConstantStringClassReference,
  1992LL,
  "kGatewayInvalidUserIdPassword",
  29LL
}; // weak
__CFString cfstr_Kgatewaypasswo = { &__CFConstantStringClassReference, 1992LL, "kGatewayPasswordExpired", 23LL }; // weak
__CFString cfstr_Kgatewaynotaut = { &__CFConstantStringClassReference, 1992LL, "kGatewayNotAuthenticated", 24LL }; // weak
__CFString cfstr_GatewaymgrDSta =
{
  &__CFConstantStringClassReference,
  1992LL,
  "GatewayMgr: %d Status issue; mapping to no server\n",
  50LL
}; // weak
__CFString cfstr_Kgatewaynoauth = { &__CFConstantStringClassReference, 1992LL, "kGatewayNoAuthServer", 20LL }; // weak
__CFString cfstr_Auth_failed = { &__CFConstantStringClassReference, 1992LL, "auth_failed", 11LL }; // weak
__CFString cfstr_GatewaymgrAu_1 =
{
  &__CFConstantStringClassReference,
  1992LL,
  "GatewayMgr: Authorizaton failed: %@.  SiteID: [%@]  ShipTo: [%@]  Name: [%@] ControllerIDP %@ Status: %d\n",
  105LL
}; // weak
__CFString cfstr_Kserverdisconn = { &__CFConstantStringClassReference, 1992LL, "kServerDisconnectButton", 23LL }; // weak
__CFString cfstr_Kserverconnect = { &__CFConstantStringClassReference, 1992LL, "kServerConnectButton", 20LL }; // weak
__CFString cfstr_Kyesstring = { &__CFConstantStringClassReference, 1992LL, "kYesString", 10LL }; // weak
__CFString cfstr_Knostring = { &__CFConstantStringClassReference, 1992LL, "kNoString", 9LL }; // weak
_QWORD cfstr_Searching___ = 4295141888LL; // idb
__CFString cfstr__UpdateAvailab = { &__CFConstantStringClassReference, 1992LL, "%@ (Update available)", 21LL }; // weak
__CFString cfstr_ABEY1iMP = { &__CFConstantStringClassReference, 1992LL, "%A, %B %e, %Y %1I:%M %p", 23LL }; // weak
__CFString cfstr_Knotavailables = { &__CFConstantStringClassReference, 1992LL, "kNotAvailableString", 19LL }; // weak
__CFString cfstr_D = { &__CFConstantStringClassReference, 1992LL, "%d", 2LL }; // weak
__CFString cfstr_Kinterfacechan = { &__CFConstantStringClassReference, 1992LL, "kInterfaceChangeNote", 20LL }; // weak
__CFString cfstr__ = { &__CFConstantStringClassReference, 1992LL, "%@", 2LL }; // weak
__CFString cfstr_Monaco = { &__CFConstantStringClassReference, 1992LL, "Monaco", 6LL }; // weak
__CFString stru_100028FA8 = { &__CFConstantStringClassReference, 1992LL, "\n", 1LL }; // weak
__CFString cfstr_90 = { &__CFConstantStringClassReference, 1992LL, "90%", 3LL }; // weak
__CFString cfstr_20 = { &__CFConstantStringClassReference, 1992LL, "20%", 3LL }; // weak
_QWORD cfstr__application = 4295141888LL; // idb
_QWORD cfstr_Diagnosticname = 4295141888LL; // idb
__CFString cfstr_Kunknownstring = { &__CFConstantStringClassReference, 1992LL, "kUnknownString", 14LL }; // weak
_QWORD cfstr__version = 4295141888LL; // idb
__CFString cfstr_Diagnosticvers = { &__CFConstantStringClassReference, 1992LL, "DiagnosticVersion", 17LL }; // weak
_QWORD cfstr__environment = 4295141888LL; // idb
__CFString cfstr_Diagnosticenvi = { &__CFConstantStringClassReference, 1992LL, "DiagnosticEnvironment", 21LL }; // weak
_QWORD cfstr__status = 4295141888LL; // idb
__CFString cfstr_Current = { &__CFConstantStringClassReference, 1992LL, "Current", 7LL }; // weak
__CFString cfstr_Missing = { &__CFConstantStringClassReference, 1992LL, "Missing", 7LL }; // weak
__CFString cfstr_Optional = { &__CFConstantStringClassReference, 1992LL, "Optional", 8LL }; // weak
__CFString cfstr_Unsupported = { &__CFConstantStringClassReference, 1992LL, "Unsupported", 11LL }; // weak
__CFString cfstr_Duplicate = { &__CFConstantStringClassReference, 1992LL, "Duplicate", 9LL }; // weak
_QWORD cfstr__testdate = 4295141888LL; // idb
_QWORD cfstr__diagnostic = 4295141888LL; // idb
_QWORD cfstr__opcode = 4295141888LL; // idb
_QWORD cfstr__label = 4295141888LL; // idb
__CFString cfstr_DiagnosticGate = { &__CFConstantStringClassReference, 1992LL, "DIAGNOSTIC GATEWAY", 18LL }; // weak
__CFString cfstr_SearchResults = { &__CFConstantStringClassReference, 1992LL, "SEARCH RESULTS", 14LL }; // weak
__CFString cfstr__DUnit = { &__CFConstantStringClassReference, 1992LL, "%@ (%d unit)", 12LL }; // weak
__CFString cfstr__DUnits = { &__CFConstantStringClassReference, 1992LL, "%@ (%d units)", 13LL }; // weak
__CFString cfstr_Server_connect = { &__CFConstantStringClassReference, 1992LL, "server_connected.png", 20LL }; // weak
__CFString cfstr_Server_disconn = { &__CFConstantStringClassReference, 1992LL, "server_disconnected.png", 23LL }; // weak
__CFString cfstr_Server_offline = { &__CFConstantStringClassReference, 1992LL, "server_offline.png", 18LL }; // weak
__CFString cfstr_Server_down_pn = { &__CFConstantStringClassReference, 1992LL, "server_down.png", 15LL }; // weak
__CFString cfstr_Uut_online_png = { &__CFConstantStringClassReference, 1992LL, "uut_online.png", 14LL }; // weak
__CFString cfstr_Uut_running_pn = { &__CFConstantStringClassReference, 1992LL, "uut_running.png", 15LL }; // weak
__CFString cfstr_Uut_offline_pn = { &__CFConstantStringClassReference, 1992LL, "uut_offline.png", 15LL }; // weak
__CFString cfstr_Name_Controlle =
{
  &__CFConstantStringClassReference,
  1992LL,
  "Name: %@\nController: %@\nVersion: %@",
  35LL
}; // weak
__CFString cfstr_Ip_Status_Vers =
{
  &__CFConstantStringClassReference,
  1992LL,
  "IP: %@\nStatus: %@\nVersion: %@",
  29LL
}; // weak
__CFString cfstr_Splitview_hand = { &__CFConstantStringClassReference, 1992LL, "splitview_handle", 16LL }; // weak
_QWORD cfstr_Overview = 4295141888LL; // idb
__CFString cfstr_Toolbar_info_p = { &__CFConstantStringClassReference, 1992LL, "toolbar_info.png", 16LL }; // weak
_QWORD cfstr_Logs = 4295141888LL; // idb
__CFString cfstr_Toolbar_logs_p = { &__CFConstantStringClassReference, 1992LL, "toolbar_logs.png", 16LL }; // weak
_QWORD cfstr_Reports = 4295141888LL; // idb
__CFString cfstr_Toolbar_report = { &__CFConstantStringClassReference, 1992LL, "toolbar_reports.png", 19LL }; // weak
_QWORD cfstr_Uuts = 4295141888LL; // idb
__CFString cfstr_Toolbar_uuts_p = { &__CFConstantStringClassReference, 1992LL, "toolbar_uuts.png", 16LL }; // weak
_QWORD cfstr_Settings = 4295141888LL; // idb
__CFString cfstr_Toolbar_settin = { &__CFConstantStringClassReference, 1992LL, "toolbar_settings.png", 20LL }; // weak
_QWORD cfstr_Gatewayversion = 4295141888LL; // idb
_QWORD cfstr_Gatewayip = 4295141888LL; // idb
_QWORD cfstr_Gatewayhostnam = 4295141888LL; // idb
_QWORD cfstr_Gatewayidentif = 4295141888LL; // idb
_QWORD cfstr_Gatewaylogpa_1 = 4295141888LL; // idb
_QWORD cfstr_Appleip_1 = 4295141888LL; // idb
_QWORD cfstr_Siteid_1 = 4295141888LL; // idb
_QWORD cfstr_Shipto_1 = 4295141888LL; // idb
_QWORD cfstr_Appleconnectid = 4295141888LL; // idb
__CFString cfstr_Setconfigurati = { &__CFConstantStringClassReference, 1992LL, "SetConfiguration", 16LL }; // weak
__CFString cfstr_Adminpassword = { &__CFConstantStringClassReference, 1992LL, "AdminPassword", 13LL }; // weak
__CFString cfstr_Techpassword = { &__CFConstantStringClassReference, 1992LL, "TechPassword", 12LL }; // weak
__CFString cfstr_Appleconnect_1 = { &__CFConstantStringClassReference, 1992LL, "AppleConnectPassword", 20LL }; // weak
__CFString cfstr_GatewaymgrNumS =
{
  &__CFConstantStringClassReference,
  1992LL,
  "GatewayMgr: num servers = %lu\n",
  30LL
}; // weak
__CFString cfstr_GatewaymgrServ =
{
  &__CFConstantStringClassReference,
  1992LL,
  "GatewayMgr: server: \"%s\"\n",
  25LL
}; // weak
__CFString cfstr_GatewaymgrLast =
{
  &__CFConstantStringClassReference,
  1992LL,
  "GatewayMgr: lastError      : %d\n",
  32LL
}; // weak
__CFString cfstr_GatewaymgrLa_1 =
{
  &__CFConstantStringClassReference,
  1992LL,
  "GatewayMgr: lastErrorString: \"%s\"\n",
  34LL
}; // weak
_QWORD cfstr_Authenticating = 4295141888LL; // idb
_QWORD cfstr_0_0_0_0 = 4295141888LL; // idb
_QWORD cfstr_Activitylogp_1 = 4295141888LL; // idb
_QWORD cfstr_Connectedtoapp = 4295141888LL; // idb
_QWORD cfstr_Error = 4295141888LL; // idb
_QWORD cfstr_Errorstring = 4295141888LL; // idb
_QWORD cfstr_Lasttransmis_1 = 4295141888LL; // idb
_QWORD cfstr_Serverversionu = 4295141888LL; // idb
_QWORD cfstr_Numberconnecte = 4295141888LL; // idb
_QWORD cfstr_Serverhostna_2 = 4295141888LL; // idb
_QWORD cfstr_Serveronline = 4295141888LL; // idb
_QWORD cfstr_Serverport_1 = 4295141888LL; // idb
_QWORD cfstr_Transactionl_3 = 4295141888LL; // idb
__CFString cfstr_DiagnosticGa_1 =
{
  &__CFConstantStringClassReference,
  1992LL,
  "Diagnostic Gateway Server down (%@ - %@)",
  40LL
}; // weak
_QWORD cfstr_Serviceversi_1 = 4295141888LL; // idb
_QWORD cfstr_Diagnostics = 4295141888LL; // idb
_QWORD cfstr_Interfaces = 4295141888LL; // idb
_QWORD cfstr_Interfacelist = 4295141888LL; // idb
_QWORD cfstr_Currentinterfa = 4295141888LL; // idb
_QWORD cfstr_Pendinginter_1 = 4295141888LL; // idb
__CFString cfstr____0 = { &__CFConstantStringClassReference, 1992LL, "%@ - %@", 7LL }; // weak
__CFString cfstr_CanTGetAProxyF =
{
  &__CFConstantStringClassReference,
  1992LL,
  "Can't get a proxy for the server controller: %@",
  47LL
}; // weak
__CFString cfstr_CanTGetAConnec =
{
  &__CFConstantStringClassReference,
  1992LL,
  "Can't get a connection for the Socket Port",
  42LL
}; // weak
__CFString cfstr_CanTGetASocket =
{
  &__CFConstantStringClassReference,
  1992LL,
  "Can't get a Socket Port for the port Address\n",
  45LL
}; // weak
__CFString cfstr_Kserverstatusc = { &__CFConstantStringClassReference, 1992LL, "kServerStatusConnected", 22LL }; // weak
__CFString cfstr_Kserverstatusd = { &__CFConstantStringClassReference, 1992LL, "kServerStatusDisconnected", 25LL }; // weak
__CFString cfstr_Kserverstatuso = { &__CFConstantStringClassReference, 1992LL, "kServerStatusOffline", 20LL }; // weak
__CFString cfstr_Kserverstatu_1 = { &__CFConstantStringClassReference, 1992LL, "kServerStatusDown", 17LL }; // weak
_QWORD cfstr_Diagnosticrequ = 4295141888LL; // idb
_QWORD cfstr_Diagnosticpres = 4295141888LL; // idb
_QWORD cfstr_Required = 4295141888LL; // idb
_QWORD cfstr_Yes = 4295141888LL; // idb
_QWORD cfstr_No = 4295141888LL; // idb
_QWORD cfstr_Optional_1 = 4295141888LL; // idb
_QWORD cfstr_Extra = 4295141888LL; // idb
_QWORD cfstr_Duplicate_1 = 4295141888LL; // idb
_QWORD cfstr_Applecarenam_1 = 4295141888LL; // idb
_QWORD cfstr_Model = 4295141888LL; // idb
_QWORD cfstr_Currentdiag_1 = 4295141888LL; // idb
_QWORD cfstr_Currentlog_1 = 4295141888LL; // idb
_QWORD cfstr_Logpath_1 = 4295141888LL; // idb
__CFString cfstr_Kmachineofflin = { &__CFConstantStringClassReference, 1992LL, "kMachineOffline", 15LL }; // weak
__CFString cfstr_Kmachineconnec = { &__CFConstantStringClassReference, 1992LL, "kMachineConnected", 17LL }; // weak
__CFString cfstr_Kmachinerunnin = { &__CFConstantStringClassReference, 1992LL, "kMachineRunning", 15LL }; // weak
__CFString cfstr_Kmachinefailed = { &__CFConstantStringClassReference, 1992LL, "kMachineFailed", 14LL }; // weak
__CFString cfstr_02x02x02x02x02 =
{
  &__CFConstantStringClassReference,
  1992LL,
  "%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",
  64LL
}; // weak
__CFString cfstr___1 = { &__CFConstantStringClassReference, 1992LL, "%@\n", 3LL }; // weak
_QWORD cfstr_NotAvailable = 4295141888LL; // idb
_QWORD cfstr_Testdate_1 = 4295141888LL; // idb
_QWORD cfstr_Toolname_1 = 4295141888LL; // idb
_QWORD cfstr_Toolversion_1 = 4295141888LL; // idb
_QWORD cfstr_Opcode_1 = 4295141888LL; // idb
__CFString cfstr_Applediagnosti = { &__CFConstantStringClassReference, 1992LL, "AppleDiagnosticGateway", 22LL }; // weak
_QWORD cfstr_Enx = 4295141888LL; // idb
_QWORD cfstr_IpAddr = 4295141888LL; // idb
_QWORD cfstr_MacAddr = 4295141888LL; // idb
_UNKNOWN unk_100029E50; // weak
__int128 xmmword_100029E80 = 0x10001C3A046C61626CLL; // weak
__int128 xmmword_100029E90 = 0x10001C3A0461636374LL; // weak
__int128 xmmword_100029EA0 = 0x10001B157973766365LL; // weak
__int128 xmmword_100029EB0 = 0x10001C3A046C61626CLL; // weak
__int128 xmmword_100029EC0 = 0x10001C3A0461636374LL; // weak
__int128 xmmword_100029ED0 = 0x10001B161873766365LL; // weak
__int128 xmmword_100029EE0 = 0x10001C3A046C61626CLL; // weak
__int128 xmmword_100029EF0 = 0x10001C3A0461636374LL; // weak
__int128 xmmword_100029F00 = 0x10001C3A51173766365LL; // weak
__int128 xmmword_100029F10 = 0x10001C3A046C61626CLL; // weak
__int128 xmmword_100029F20 = 0x10001C3A0461636374LL; // weak
__int128 xmmword_100029F30 = 0x10001C3BCD73766365LL; // weak
char byte_10002A0D0 = 'º'; // weak
char byte_10002A0D1 = 'Û'; // weak
char byte_10002A0D2 = 'î'; // weak
char byte_10002A0D3 = 'ü'; // weak
char byte_10002A0D4 = '¯'; // weak
char byte_10002A0D5 = 'á'; // weak
_QWORD off_10002A0E0[22] =
{
  4295083216LL,
  4295083225LL,
  4295083234LL,
  4295083243LL,
  4295083253LL,
  4295083263LL,
  4295083271LL,
  4295083279LL,
  4295083287LL,
  4295083296LL,
  4295083305LL,
  4295083314LL,
  4295083326LL,
  4295083335LL,
  4295083342LL,
  4295083350LL,
  4295083357LL,
  4295083365LL,
  4295083381LL,
  4295083392LL,
  4295083399LL,
  4295083365LL
}; // idb
const char *off_10002A190[22] =
{
  "GHz",
  "",
  "MHz",
  "MHz+",
  "",
  "MB",
  "GB",
  "TB",
  "RPM",
  "MiB",
  "KiB",
  "",
  "",
  "Â°C",
  "V",
  "mA",
  "mV",
  "%",
  " bytes",
  "W",
  " lux",
  "%"
}; // idb
_UNKNOWN unk_10002A240; // weak
char *off_10002A250 = "DATA"; // idb
char *off_10002A260 = "RESULT"; // idb
char byte_10002A288; // weak
_UNKNOWN unk_10002A289; // weak
char byte_10002A28A; // weak
char byte_10002A28B; // weak
pthread_mutex_t stru_10002A290; // idb
int dword_10002A2D0; // weak
__int16 word_10002A2D4; // weak
char byte_10002A2D6; // weak
char byte_10002A2D7; // weak
int dword_10002A2D8; // weak
int dword_10002A2DC; // weak
int dword_10002A2E0; // weak
__int16 word_10002A2E4; // weak
_UNKNOWN unk_10002A2E6; // weak


//----- (0000000100001940) ----------------------------------------------------
void __usercall __noreturn start(__int64 a1)
{
  char *i; // rcx@1
  int v2; // eax@4
  int _0; // [sp+0h] [bp+0h]@1

  for ( i = (char *)&a1 + (unsigned int)(8 * (_0 + 1)); *(_QWORD *)i; i += 8 )
    ;
  v2 = sub_10000197C();
  exit(v2);
}

//----- (000000010000197C) ----------------------------------------------------
int sub_10000197C()
{
  return NSApplicationMain();
}
// 100015EAE: using guessed type int NSApplicationMain(void);

//----- (0000000100001990) ----------------------------------------------------
// LinkTextField - (void)resetCursorRects
void __cdecl -[LinkTextField resetCursorRects](struct LinkTextField *self, SEL a2)
{
  void (*v2)(void *, const char *, ...); // r14@4
  void *v3; // rax@4
  void *v4; // rax@4
  __int128 v5; // [sp+20h] [bp-60h]@2
  __int128 v6; // [sp+30h] [bp-50h]@3
  __int128 v7; // [sp+40h] [bp-40h]@2
  __int128 v8; // [sp+50h] [bp-30h]@2
  struct LinkTextField *v9; // [sp+60h] [bp-20h]@1
  void *v10; // [sp+68h] [bp-18h]@1

  v9 = self;
  v10 = classRef_LinkTextField;
  objc_msgSendSuper2(&v9, selRef_resetCursorRects);
  if ( self )
  {
    objc_msgSend_stret(&v7, (const char *)self, selRef_bounds);
    *(_QWORD *)&v7 = 4633078116657397760LL;
    *(_QWORD *)&v8 = 4630967054332067840LL;
    objc_msgSend_stret(&v5, (const char *)self, selRef_bounds);
  }
  else
  {
    v8 = 0LL;
    v7 = 0LL;
    *(_QWORD *)&v7 = 4633078116657397760LL;
    *(_QWORD *)&v8 = 4630967054332067840LL;
    v6 = 0LL;
    v5 = 0LL;
  }
  v2 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  v3 = objc_msgSend_ptr(classRef_NSCursor, selRef_IBeamCursor);
  v2(self, selRef_removeCursorRect_cursor_, v3, (_QWORD)v5, *((_QWORD *)&v5 + 1), (_QWORD)v6, *((_QWORD *)&v6 + 1));
  v4 = ((void *(*)(void *, const char *, ...))v2)(classRef_NSCursor, selRef_pointingHandCursor);
  v2(self, selRef_addCursorRect_cursor_, v4, (_QWORD)v7, *((_QWORD *)&v7 + 1), (_QWORD)v8, *((_QWORD *)&v8 + 1));
}
// 100026288: using guessed type char *selRef_resetCursorRects;
// 100026290: using guessed type char *selRef_bounds;
// 100026298: using guessed type char *selRef_IBeamCursor;
// 1000262A0: using guessed type char *selRef_removeCursorRect_cursor_;
// 1000262A8: using guessed type char *selRef_pointingHandCursor;
// 1000262B0: using guessed type char *selRef_addCursorRect_cursor_;
// 100027378: using guessed type void *classRef_NSCursor;
// 100027520: using guessed type void *classRef_LinkTextField;

//----- (0000000100001ACD) ----------------------------------------------------
// GMAppController - (id)init
id __cdecl -[GMAppController init](struct GMAppController *self, SEL a2)
{
  void *v2; // r12@1
  void *v3; // rax@2
  void *(*v4)(void *, const char *, ...); // rbx@2
  void *v5; // rax@2
  __int64 v6; // rax@2
  void *v7; // rax@2
  void *v8; // rax@2
  __int64 v9; // rax@2
  void *v10; // rax@2
  __int64 v11; // rax@2
  void *v12; // rax@2
  __int64 v13; // rax@2
  void *v14; // rax@2
  __int64 v15; // rax@2
  void *v16; // rax@2
  __int64 v17; // rax@2
  void *v18; // rax@2
  __int64 v19; // rax@2
  __int64 v20; // rax@2
  void *v21; // rax@2
  void *v22; // rax@2
  __int64 v23; // rax@2
  __int64 v24; // rbx@2
  void (*v25)(void *, const char *, ...); // r14@3
  void *v26; // rax@4
  void *v27; // rax@4
  __int64 v28; // rax@4
  __int64 v29; // rbx@4
  void (*v30)(void *, const char *, ...); // r14@5
  void *v31; // rax@6
  void *v32; // rax@6
  __int64 v33; // rax@6
  struct GMAppController *v35; // [sp+0h] [bp-30h]@1
  void *v36; // [sp+8h] [bp-28h]@1

  v35 = self;
  v36 = classRef_GMAppController_0;
  v2 = objc_msgSendSuper2(&v35, selRef_init, self, classRef_GMAppController_0);
  if ( v2 )
  {
    *((_QWORD *)v2 + 93) = 0LL;
    *((_QWORD *)v2 + 96) = malloc(0x186C0uLL);
    *((_QWORD *)v2 + 97) = 0LL;
    LODWORD(v3) = msgRef_alloc__objc_msgSend_fixup(classRef_GMGatewayInfo, &msgRef_alloc__objc_msgSend_fixup);
    v4 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v5 = objc_msgSend_ptr(v3, selRef_init, v35, v36);
    LODWORD(v6) = msgRef_retain__objc_msgSend_fixup(v5, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 94) = v6;
    LODWORD(v7) = msgRef_alloc__objc_msgSend_fixup(classRef_GMSearchResults, &msgRef_alloc__objc_msgSend_fixup);
    v8 = v4(v7, selRef_init, v35, v36);
    LODWORD(v9) = msgRef_retain__objc_msgSend_fixup(v8, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 95) = v9;
    v10 = v4(classRef_NSMutableArray, selRef_arrayWithCapacity_, 1LL, v35, v36);
    LODWORD(v11) = msgRef_retain__objc_msgSend_fixup(v10, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 89) = v11;
    v12 = v4(classRef_NSMutableArray, selRef_arrayWithCapacity_, 1LL, v35, v36);
    LODWORD(v13) = msgRef_retain__objc_msgSend_fixup(v12, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 90) = v13;
    v14 = v4(classRef_NSMutableArray, selRef_arrayWithCapacity_, 1LL, v35, v36);
    LODWORD(v15) = msgRef_retain__objc_msgSend_fixup(v14, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 91) = v15;
    v16 = v4(classRef_NSMutableArray, selRef_arrayWithCapacity_, 1LL, v35, v36);
    LODWORD(v17) = msgRef_retain__objc_msgSend_fixup(v16, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 92) = v17;
    v18 = v4(classRef_NSMutableArray, selRef_arrayWithCapacity_, 1LL, v35, v36);
    LODWORD(v19) = msgRef_retain__objc_msgSend_fixup(v18, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 98) = v19;
    *((_DWORD *)v2 + 198) = 0;
    LODWORD(v20) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 87) = v20;
    *((_DWORD *)v2 + 199) = 0;
    *((_BYTE *)v2 + 812) = 0;
    *((_BYTE *)v2 + 813) = 1;
    *((_QWORD *)v2 + 100) = 0LL;
    *((_DWORD *)v2 + 202) = 0;
    LODWORD(v21) = msgRef_alloc__objc_msgSend_fixup(classRef_GMNavigationTab, &msgRef_alloc__objc_msgSend_fixup);
    v22 = v4(v21, selRef_initWithType_, 0LL, v35, v36);
    LODWORD(v23) = msgRef_autorelease__objc_msgSend_fixup(v22, &msgRef_autorelease__objc_msgSend_fixup);
    v24 = v23;
    if ( v23 )
    {
      v25 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      objc_msgSend_ptr(*((void **)v2 + 89), selRef_addObject_, v23, v35, v36);
      v25(*((void **)v2 + 90), selRef_addObject_, v24, v35, v36);
    }
    LODWORD(v26) = msgRef_alloc__objc_msgSend_fixup(classRef_GMNavigationTab, &msgRef_alloc__objc_msgSend_fixup);
    v27 = objc_msgSend_ptr(v26, selRef_initWithType_, 1LL, v35, v36);
    LODWORD(v28) = msgRef_autorelease__objc_msgSend_fixup(v27, &msgRef_autorelease__objc_msgSend_fixup);
    v29 = v28;
    if ( v28 )
    {
      v30 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      objc_msgSend_ptr(*((void **)v2 + 89), selRef_addObject_, v28, v35, v36);
      v30(*((void **)v2 + 90), selRef_addObject_, v29, v35, v36);
      v30(*((void **)v2 + 91), selRef_addObject_, v29, v35, v36);
      v30(*((void **)v2 + 92), selRef_addObject_, v29, v35, v36);
    }
    LODWORD(v31) = msgRef_alloc__objc_msgSend_fixup(classRef_GMNavigationTab, &msgRef_alloc__objc_msgSend_fixup);
    v32 = objc_msgSend_ptr(v31, selRef_initWithType_, 4LL, v35, v36);
    LODWORD(v33) = msgRef_autorelease__objc_msgSend_fixup(v32, &msgRef_autorelease__objc_msgSend_fixup);
    if ( v33 )
      objc_msgSend_ptr(*((void **)v2 + 89), selRef_addObject_, v33, v35, v36);
  }
  return (id)v2;
}
// 1000262B8: using guessed type char *selRef_init;
// 1000262C0: using guessed type char *selRef_arrayWithCapacity_;
// 1000262C8: using guessed type char *selRef_initWithType_;
// 1000262D0: using guessed type char *selRef_addObject_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272C0: using guessed type int (__fastcall *msgRef_autorelease__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027380: using guessed type void *classRef_GMGatewayInfo;
// 100027388: using guessed type void *classRef_GMSearchResults;
// 100027390: using guessed type void *classRef_NSMutableArray;
// 100027398: using guessed type void *classRef_GMNavigationTab;
// 100027528: using guessed type void *classRef_GMAppController_0;
// 100028108: using guessed type __CFString stru_100028108;

//----- (0000000100001E7E) ----------------------------------------------------
// GMAppController - (void)dealloc
void __cdecl -[GMAppController dealloc](struct GMAppController *self, SEL a2)
{
  struct GMAppController *v2; // rbx@1
  struct GMNavTabViewController *v3; // rdi@1
  struct NSDictionary *v4; // rdi@3
  struct GMAppController *v5; // [sp+0h] [bp-20h]@5
  void *v6; // [sp+8h] [bp-18h]@5

  v2 = self;
  v3 = self->navTabViewController;
  if ( v3 )
    msgRef_release__objc_msgSend_fixup(v3, &msgRef_release__objc_msgSend_fixup);
  v4 = v2->dataDict;
  if ( v4 )
    msgRef_release__objc_msgSend_fixup(v4, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(v2->gatewayNavTabList, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(v2->serverNavTabList, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(v2->machineNavTabList, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(v2->logsOnlyNavTabList, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(v2->pendingRequests, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(v2->currentLog, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(v2->gateway, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(v2->searchResults, &msgRef_release__objc_msgSend_fixup);
  free(v2->responseMsg);
  v5 = v2;
  v6 = classRef_GMAppController_0;
  objc_msgSendSuper2(&v5, selRef_dealloc, v2, classRef_GMAppController_0);
}
// 1000262D8: using guessed type char *selRef_dealloc;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027528: using guessed type void *classRef_GMAppController_0;

//----- (0000000100001FA5) ----------------------------------------------------
// GMAppController - (void)awakeFromNib
void __cdecl -[GMAppController awakeFromNib](struct GMAppController *self, SEL a2)
{
  void *v2; // rax@1
  void *(*v3)(void *, const char *, ...); // rbx@1
  void *v4; // rax@1
  struct GMNavTabViewController *v5; // rax@1
  void *v6; // rbx@1
  struct NSView *v7; // rsi@1
  void *(*v8)(void *, const char *, ...); // r13@4
  struct NSView *v9; // rbx@4
  void *v10; // rax@4
  void *v11; // rbx@4
  void *v12; // rbx@4
  void *v13; // rbx@4
  void *v14; // r14@4
  void *v15; // rax@4
  void *v16; // rax@4
  signed int v17; // eax@4
  double v18; // xmm0_8@5
  struct NSTextField *v19; // rbx@7
  void *v20; // rax@7
  void *v21; // rax@7
  struct NSTextField *v22; // rbx@7
  void *v23; // rax@7
  void *v24; // rax@7
  void *v25; // rax@7
  void *v26; // rax@7
  void *v27; // rax@7
  struct NSPathControl *v28; // r14@7
  void *v29; // rax@7
  void *v30; // rax@7
  struct NSPathControl *v31; // r14@7
  void *v32; // rax@7
  void *v33; // rax@7
  void *v34; // rax@7
  __int128 v35; // [sp+20h] [bp-50h]@2
  __int128 v36; // [sp+30h] [bp-40h]@3

  LODWORD(v2) = msgRef_alloc__objc_msgSend_fixup(classRef_GMNavTabViewController, &msgRef_alloc__objc_msgSend_fixup);
  v3 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v4 = objc_msgSend_ptr(v2, selRef_initWithNibName_bundle_, &cfstr_Collection, 0LL);
  LODWORD(v5) = msgRef_retain__objc_msgSend_fixup(v4, &msgRef_retain__objc_msgSend_fixup);
  self->navTabViewController = v5;
  v6 = v3(self->navTabViewController, selRef_view);
  v7 = self->subViewNavTabCollection;
  if ( v7 )
  {
    objc_msgSend_stret(&v35, (const char *)v7, selRef_bounds);
  }
  else
  {
    v36 = 0LL;
    v35 = 0LL;
  }
  v8 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  objc_msgSend_ptr(v6, selRef_setFrame_, (_QWORD)v35, *((_QWORD *)&v35 + 1), (_QWORD)v36, *((_QWORD *)&v36 + 1));
  v9 = self->subViewNavTabCollection;
  v10 = v8(self->navTabViewController, selRef_view);
  v8((void *)v9, selRef_addSubview_, v10);
  v11 = v8((void *)self->gatewayLogTextView, selRef_textContainer);
  v8(v11, selRef_setContainerSize_, COERCE_DOUBLE(4661225614328463360LL), COERCE_DOUBLE(4751297606873776128LL));
  v8(v11, selRef_setWidthTracksTextView_, 0LL);
  v8(v11, selRef_setHeightTracksTextView_, 0LL);
  v12 = v8((void *)self->serverLogTextView, selRef_textContainer);
  v8(v12, selRef_setContainerSize_, COERCE_DOUBLE(4661225614328463360LL), COERCE_DOUBLE(4751297606873776128LL));
  v8(v12, selRef_setWidthTracksTextView_, 0LL);
  v8(v12, selRef_setHeightTracksTextView_, 0LL);
  v13 = v8((void *)self->machineLogTextView, selRef_textContainer);
  v14 = v8((void *)self->machineLogTextView, selRef_enclosingScrollView);
  v8(v13, selRef_setContainerSize_, COERCE_DOUBLE(4661225614328463360LL), COERCE_DOUBLE(4751297606873776128LL));
  v8(v13, selRef_setWidthTracksTextView_, 0LL);
  v8(v13, selRef_setHeightTracksTextView_, 0LL);
  v8(v14, selRef_setHasVerticalScroller_, 1LL);
  v8(v14, selRef_setHasHorizontalScroller_, 1LL);
  v8(v14, selRef_setAutohidesScrollers_, 1LL);
  v8(v14, selRef_setAutoresizingMask_, 18LL);
  v15 = v8(v14, selRef_contentView);
  v8(v15, selRef_setAutoresizesSubviews_, 1LL);
  v8(self->mVerticalSplitView, selRef_setDelegate_, self);
  v16 = v8(classRef_NSUserDefaults, selRef_standardUserDefaults);
  v17 = (unsigned __int64)v8(v16, selRef_integerForKey_, &cfstr_Browserwidth);
  if ( (float)v17 >= 130.0 )
    v18 = (float)v17;
  else
    v18 = 200.0;
  v8(self->mVerticalSplitView, selRef_setPosition_ofDividerAtIndex_, 0LL, v18);
  v8(self->mVerticalSplitView, selRef_adjustSubviews);
  v19 = self->gwAdrAuthStatusTextField;
  v20 = v8(classRef_NSBundle, selRef_mainBundle);
  v21 = v8(v20, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewaychecki, &stru_100028108, 0LL);
  v8((void *)v19, selRef_setStringValue_, v21);
  v22 = self->gwAuthStatusTextField;
  v23 = v8(classRef_NSBundle, selRef_mainBundle);
  v24 = v8(v23, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewaychecki, &stru_100028108, 0LL);
  v8((void *)v22, selRef_setStringValue_, v24);
  v25 = v8((void *)self->gatewayLogPopUpButton, selRef_itemAtIndex_, 0LL);
  v8(v25, selRef_setTitle_, &cfstr_Ast_controller);
  v26 = v8((void *)self->serverLogPopUpButton, selRef_itemAtIndex_, 0LL);
  v8(v26, selRef_setTitle_, &cfstr_Ast_unittest_l);
  v27 = v8((void *)self->serverLogPopUpButton, selRef_itemAtIndex_, 1LL);
  v8(v27, selRef_setTitle_, &cfstr_Ast_repository);
  v28 = self->gatewayLogPathControl;
  v29 = v8(classRef_NSString, selRef_stringWithFormat_, &cfstr___, &cfstr_VarLogAdg, &cfstr_Ast_controller);
  v30 = v8(classRef_NSURL, selRef_URLWithString_, v29);
  v8((void *)v28, selRef_setURL_, v30);
  v8(self, selRef_clearTextView_, self->gatewayLogTextView);
  v31 = self->serverLogPathControl;
  v32 = v8(classRef_NSString, selRef_stringWithFormat_, &cfstr___, &cfstr_VarLogAdg, &cfstr_Ast_unittest_l);
  v33 = v8(classRef_NSURL, selRef_URLWithString_, v32);
  v8((void *)v31, selRef_setURL_, v33);
  v8(self, selRef_clearTextView_, self->serverLogTextView);
  v8(self, selRef_clearTextView_, self->machineLogTextView);
  self->currentSubView = self->subViewDetailBlank;
  v8(self, selRef_switchToSubView_, self->subViewGatewayOverview);
  v8(self->navTabViewController, selRef_setTabs_, self->gatewayNavTabList);
  v34 = v8(self->navTabViewController, selRef_arrayController);
  v8(v34, selRef_addObserver_forKeyPath_options_context_, self, &cfstr_Selectedobje_1, 3LL, 0LL);
  v8(self, selRef_setupBigTextView);
}
// 100026290: using guessed type char *selRef_bounds;
// 1000262E0: using guessed type char *selRef_initWithNibName_bundle_;
// 1000262E8: using guessed type char *selRef_view;
// 1000262F0: using guessed type char *selRef_setFrame_;
// 1000262F8: using guessed type char *selRef_addSubview_;
// 100026300: using guessed type char *selRef_textContainer;
// 100026308: using guessed type char *selRef_setContainerSize_;
// 100026310: using guessed type char *selRef_setWidthTracksTextView_;
// 100026318: using guessed type char *selRef_setHeightTracksTextView_;
// 100026320: using guessed type char *selRef_enclosingScrollView;
// 100026328: using guessed type char *selRef_setHasVerticalScroller_;
// 100026330: using guessed type char *selRef_setHasHorizontalScroller_;
// 100026338: using guessed type char *selRef_setAutohidesScrollers_;
// 100026340: using guessed type char *selRef_setAutoresizingMask_;
// 100026348: using guessed type char *selRef_contentView;
// 100026350: using guessed type char *selRef_setAutoresizesSubviews_;
// 100026358: using guessed type char *selRef_setDelegate_;
// 100026360: using guessed type char *selRef_standardUserDefaults;
// 100026368: using guessed type char *selRef_integerForKey_;
// 100026370: using guessed type char *selRef_setPosition_ofDividerAtIndex_;
// 100026378: using guessed type char *selRef_adjustSubviews;
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 100026390: using guessed type char *selRef_setStringValue_;
// 100026398: using guessed type char *selRef_itemAtIndex_;
// 1000263A0: using guessed type char *selRef_setTitle_;
// 1000263A8: using guessed type char *selRef_stringWithFormat_;
// 1000263B0: using guessed type char *selRef_URLWithString_;
// 1000263B8: using guessed type char *selRef_setURL_;
// 1000263C0: using guessed type char *selRef_clearTextView_;
// 1000263C8: using guessed type char *selRef_switchToSubView_;
// 1000263D0: using guessed type char *selRef_setTabs_;
// 1000263D8: using guessed type char *selRef_arrayController;
// 1000263E0: using guessed type char *selRef_addObserver_forKeyPath_options_context_;
// 1000263E8: using guessed type char *selRef_setupBigTextView;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000273A8: using guessed type void *classRef_NSUserDefaults;
// 1000273B0: using guessed type void *classRef_NSBundle;
// 1000273B8: using guessed type void *classRef_NSURL;
// 1000273C0: using guessed type void *classRef_NSString;
// 100028128: using guessed type __CFString cfstr_Collection;
// 100028148: using guessed type __CFString cfstr_Browserwidth;
// 100028168: using guessed type __CFString cfstr_Kgatewaychecki;
// 100028188: using guessed type __CFString cfstr_Ast_controller;
// 1000281A8: using guessed type __CFString cfstr_Ast_unittest_l;
// 1000281C8: using guessed type __CFString cfstr_Ast_repository;
// 1000281E8: using guessed type __CFString cfstr___;
// 100028208: using guessed type __CFString cfstr_VarLogAdg;
// 100028228: using guessed type __CFString cfstr_Selectedobje_1;

//----- (0000000100002563) ----------------------------------------------------
// GMAppController - (void)setDataDict:(id) 
void __cdecl -[GMAppController setDataDict:](struct GMAppController *self, SEL a2, id a3)
{
  id v3; // r14@1
  struct GMAppController *v4; // rbx@1
  struct NSDictionary *v5; // rdi@1

  v3 = a3;
  v4 = self;
  v5 = self->dataDict;
  if ( v5 )
  {
    msgRef_release__objc_msgSend_fixup(v5, &msgRef_release__objc_msgSend_fixup);
    v4->dataDict = 0LL;
  }
  if ( v3 )
    v4->dataDict = (struct NSDictionary *)objc_msgSend_ptr(v3, selRef_copy);
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (00000001000025C1) ----------------------------------------------------
// GMAppController - (void)setConnectStatus:(id) 
void __cdecl -[GMAppController setConnectStatus:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0

  objc_msgSend_ptr((void *)self->noConnectionTextField, selRef_setStringValue_, a3, v3);
  objc_msgSend_ptr((void *)self->noConnectionProgress, selRef_setHidden_, 0LL);
  objc_msgSend_ptr((void *)self->noConnectionTextField, selRef_setHidden_, 0LL);
  objc_msgSend_ptr((void *)self->noConnectionProgress, selRef_startAnimation_, self);
  objc_msgSend_ptr((void *)self->subViewNoConnection, selRef_setNeedsDisplay_, 1LL);
}
// 100026390: using guessed type char *selRef_setStringValue_;
// 1000263F8: using guessed type char *selRef_setHidden_;
// 100026400: using guessed type char *selRef_startAnimation_;
// 100026408: using guessed type char *selRef_setNeedsDisplay_;

//----- (0000000100002657) ----------------------------------------------------
// GMAppController - (void)setLoginStatus
void __cdecl -[GMAppController setLoginStatus](struct GMAppController *self, SEL a2)
{
  void *(*v2)(void *, const char *, ...); // rbx@1
  void *v3; // rax@1
  struct NSMutableArray *v4; // rbx@2
  __int64 v5; // rax@2
  void *v6; // rax@2
  struct NSMutableArray *v7; // rbx@4
  __int64 v8; // rax@4

  v2 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v3 = objc_msgSend_ptr((void *)self->loginUserPopUpButton, selRef_selectedItem);
  self->loginStatus = (unsigned __int64)v2(v3, selRef_tag);
  if ( self->loginStatus != 2 )
  {
    v4 = self->gatewayNavTabList;
    LODWORD(v5) = msgRef_count__objc_msgSend_fixup(self->gatewayNavTabList, &msgRef_count__objc_msgSend_fixup);
    LODWORD(v6) = msgRef_objectAtIndex___objc_msgSend_fixup(v4, &msgRef_objectAtIndex___objc_msgSend_fixup, v5 - 1);
    if ( (unsigned int)objc_msgSend_ptr(v6, selRef_type) == 4 )
    {
      v7 = self->gatewayNavTabList;
      LODWORD(v8) = msgRef_count__objc_msgSend_fixup(self->gatewayNavTabList, &msgRef_count__objc_msgSend_fixup);
      objc_msgSend_ptr((void *)v7, selRef_removeObjectAtIndex_, v8 - 1);
      objc_msgSend_ptr(self->navTabViewController, selRef_setTabs_, self->gatewayNavTabList);
    }
  }
}
// 1000263D0: using guessed type char *selRef_setTabs_;
// 100026410: using guessed type char *selRef_selectedItem;
// 100026418: using guessed type char *selRef_tag;
// 100026420: using guessed type char *selRef_type;
// 100026428: using guessed type char *selRef_removeObjectAtIndex_;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (0000000100002743) ----------------------------------------------------
// GMAppController - (int)browserSelectionType
int __cdecl -[GMAppController browserSelectionType](struct GMAppController *self, SEL a2)
{
  void *v2; // rax@1
  __int64 v3; // rax@1
  __int64 v4; // rcx@1
  int result; // eax@1
  struct NSOutlineView *v6; // rbx@2
  void *(*v7)(void *, const char *, ...); // r14@2
  void *v8; // rax@2
  void *v9; // rbx@2
  __int64 v10; // rax@2
  char v11; // cl@2
  __int64 v12; // rax@3
  char v13; // cl@3
  __int64 v14; // rax@4
  char v15; // cl@4
  __int64 v16; // rax@5
  char v17; // cl@5

  v2 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_allSelectedItems);
  LODWORD(v3) = msgRef_count__objc_msgSend_fixup(v2, &msgRef_count__objc_msgSend_fixup);
  v4 = v3;
  result = 0;
  if ( v4 )
  {
    v6 = self->outlineViewBrowser;
    v7 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v8 = objc_msgSend_ptr((void *)v6, selRef_selectedRow);
    v9 = v7((void *)v6, selRef_itemAtRow_, v8);
    LODWORD(v10) = msgRef_self__objc_msgSend_fixup(classRef_GMGatewayInfo, &msgRef_self__objc_msgSend_fixup);
    v11 = msgRef_isKindOfClass___objc_msgSend_fixup(v9, &msgRef_isKindOfClass___objc_msgSend_fixup, v10);
    result = 1;
    if ( !v11 )
    {
      LODWORD(v12) = msgRef_self__objc_msgSend_fixup(classRef_GMSearchResults, &msgRef_self__objc_msgSend_fixup);
      v13 = msgRef_isKindOfClass___objc_msgSend_fixup(v9, &msgRef_isKindOfClass___objc_msgSend_fixup, v12);
      result = 2;
      if ( !v13 )
      {
        LODWORD(v14) = msgRef_self__objc_msgSend_fixup(classRef_GMServerInfo, &msgRef_self__objc_msgSend_fixup);
        v15 = msgRef_isKindOfClass___objc_msgSend_fixup(v9, &msgRef_isKindOfClass___objc_msgSend_fixup, v14);
        result = 3;
        if ( !v15 )
        {
          LODWORD(v16) = msgRef_self__objc_msgSend_fixup(classRef_GMMachineInfo, &msgRef_self__objc_msgSend_fixup);
          v17 = msgRef_isKindOfClass___objc_msgSend_fixup(v9, &msgRef_isKindOfClass___objc_msgSend_fixup, v16);
          result = 0;
          if ( v17 )
            result = 4;
        }
      }
    }
  }
  return result;
}
// 100026430: using guessed type char *selRef_allSelectedItems;
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (0000000100002888) ----------------------------------------------------
// GMAppController - (void)addRequest:(int) 
void __cdecl -[GMAppController addRequest:](struct GMAppController *self, SEL a2, int a3)
{
  __int64 v3; // rax@0
  int v4; // ebx@1
  __int64 v5; // rax@1
  void *(*v6)(void *, const char *, ...); // r15@2
  void *v7; // rax@2
  struct NSMutableArray *v8; // r14@3
  void *v9; // rax@3
  __int64 v10; // [sp-8h] [bp-20h]@1

  v10 = v3;
  v4 = a3;
  LODWORD(v5) = msgRef_count__objc_msgSend_fixup(self->pendingRequests, &msgRef_count__objc_msgSend_fixup);
  if ( !v5
    || (v6 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr,
        v7 = objc_msgSend_ptr((void *)self->pendingRequests, selRef_lastObject, v10),
        (unsigned int)v6(v7, selRef_intValue) != v4) )
  {
    v8 = self->pendingRequests;
    v9 = objc_msgSend_ptr(classRef_NSNumber, selRef_numberWithInt_, (unsigned int)v4, v10);
    objc_msgSend_ptr((void *)v8, selRef_addObject_, v9);
  }
}
// 1000262D0: using guessed type char *selRef_addObject_;
// 100026448: using guessed type char *selRef_lastObject;
// 100026450: using guessed type char *selRef_intValue;
// 100026458: using guessed type char *selRef_numberWithInt_;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000273D8: using guessed type void *classRef_NSNumber;

//----- (000000010000292D) ----------------------------------------------------
// GMAppController - (void)removeFirstRequest
void __cdecl -[GMAppController removeFirstRequest](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@1

  LODWORD(v2) = msgRef_count__objc_msgSend_fixup(self->pendingRequests, &msgRef_count__objc_msgSend_fixup);
  if ( v2 )
    objc_msgSend_ptr((void *)self->pendingRequests, selRef_removeObjectAtIndex_, 0LL);
}
// 100026428: using guessed type char *selRef_removeObjectAtIndex_;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000297A) ----------------------------------------------------
// GMAppController - (id)currentLog
id __cdecl -[GMAppController currentLog](struct GMAppController *self, SEL a2)
{
  return (id)self->currentLog;
}

//----- (000000010000298B) ----------------------------------------------------
// GMAppController - (void)setCurrentLog:(id) 
void __cdecl -[GMAppController setCurrentLog:](struct GMAppController *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->currentLog, &msgRef_release__objc_msgSend_fixup);
  self->currentLog = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (00000001000029D0) ----------------------------------------------------
// GMAppController - (char)connectToGatewayController
char __cdecl -[GMAppController connectToGatewayController](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0
  char result; // al@3
  __int64 v4; // [sp-8h] [bp-10h]@1

  v4 = v2;
  self->controllerServiceRef = (void *)sub_100011F1A(0xEB010207, 5141, 5142);
  if ( self->controllerServiceRef )
  {
    if ( self->loginStatus )
    {
      objc_msgSend_ptr(self, selRef_getGatewayServers, v4);
      result = 1;
    }
    else
    {
      objc_msgSend_ptr(
        self,
        selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
        selRef_showLoginSheet,
        0LL,
        1LL,
        v4);
      result = 1;
    }
  }
  else
  {
    objc_msgSend_ptr(
      self,
      selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
      selRef_showNoConnectionView,
      0LL,
      1LL,
      v4);
    result = 0;
  }
  return result;
}
// 100026460: using guessed type char *selRef_getGatewayServers;
// 100026468: using guessed type char *selRef_showLoginSheet;
// 100026470: using guessed type char *selRef_performSelectorOnMainThread_withObject_waitUntilDone_;
// 100026478: using guessed type char *selRef_showNoConnectionView;

//----- (0000000100002A75) ----------------------------------------------------
// GMAppController - (void)serverMonitorThread:(id) 
void __cdecl -[GMAppController serverMonitorThread:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  __int64 v4; // ST00_8@1
  struct GMAppController *v5; // rbx@1
  void *v6; // rax@1
  signed int v7; // er13@1
  __int64 v8; // rax@6
  void *v9; // rax@7
  struct GMAppController *v10; // rdi@8
  const char *v11; // rsi@8
  struct NSView *v12; // rax@28
  struct GMAppController *v13; // rdi@29
  const char *v14; // rsi@29
  void *v15; // [sp+0h] [bp-30h]@1

  v4 = v3;
  v5 = self;
  LODWORD(v6) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAutoreleasePool, &msgRef_alloc__objc_msgSend_fixup);
  v15 = objc_msgSend_ptr(v6, selRef_init, v4);
  v7 = 0;
  while ( v5->monitorServers )
  {
    if ( v5->controllerServiceRef )
    {
      LODWORD(v8) = msgRef_count__objc_msgSend_fixup(v5->pendingRequests, &msgRef_count__objc_msgSend_fixup);
      if ( v8 )
      {
        LODWORD(v9) = msgRef_objectAtIndex___objc_msgSend_fixup(
                        v5->pendingRequests,
                        &msgRef_objectAtIndex___objc_msgSend_fixup,
                        0LL);
        v5->pendingRequest = (unsigned __int64)objc_msgSend_ptr(v9, selRef_intValue, v15);
        switch ( v5->pendingRequest )
        {
          case 1:
            v10 = v5;
            v11 = selRef_gatewayLogin;
            goto LABEL_21;
          case 3:
            v10 = v5;
            v11 = selRef_getGatewayStatus;
            goto LABEL_21;
          case 4:
            v10 = v5;
            v11 = selRef_setGatewayStatus;
            goto LABEL_21;
          case 5:
            v10 = v5;
            v11 = selRef_getServerStatus;
            goto LABEL_21;
          case 7:
            objc_msgSend_ptr(v5, selRef_setServerOnline_, 1LL);
            break;
          case 6:
            objc_msgSend_ptr(v5, selRef_setServerOnline_, 0LL);
            break;
          case 8:
            v10 = v5;
            v11 = selRef_setServerDelete;
            goto LABEL_21;
          case 9:
            v10 = v5;
            v11 = selRef_setServerInterface;
            goto LABEL_21;
          case 0xA:
            v10 = v5;
            v11 = selRef_getGatewayLog;
            goto LABEL_21;
          case 0xB:
            v10 = v5;
            v11 = selRef_getServerLog;
            goto LABEL_21;
          case 0xC:
            v10 = v5;
            v11 = selRef_getMachineSearchList;
            goto LABEL_21;
          case 0xD:
            v10 = v5;
            v11 = selRef_getMachineLogList;
            goto LABEL_21;
          case 0xE:
            v10 = v5;
            v11 = selRef_getMachineLog;
LABEL_21:
            objc_msgSend_ptr(v10, v11);
            break;
          default:
            break;
        }
        objc_msgSend_ptr(
          v5,
          selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
          selRef_removeFirstRequest,
          0LL,
          1LL);
      }
      if ( v5->controllerServiceRef && v5->loginStatus )
      {
        if ( v7 >= 9 )
        {
          objc_msgSend_ptr(v5, selRef_getGatewayServers, v15);
          v7 = 0;
          if ( v5->controllerServiceRef )
          {
            v7 = 0;
            if ( v5->loginStatus )
            {
              v12 = v5->currentSubView;
              if ( v12 == v5->subViewGatewayOverview )
              {
                v13 = v5;
                v14 = selRef_getGatewayStatus;
LABEL_40:
                objc_msgSend_ptr(v13, v14);
                v7 = 0;
                goto LABEL_41;
              }
              if ( v12 == v5->subViewGatewayLogs )
              {
                v13 = v5;
                v14 = selRef_getGatewayLog;
                goto LABEL_40;
              }
              if ( v12 == v5->subViewServerOverview )
              {
                if ( (unsigned int)objc_msgSend_ptr(v5, selRef_browserSelectionType) == 3 )
                {
                  v13 = v5;
                  v14 = selRef_getServerStatus;
                  goto LABEL_40;
                }
                v12 = v5->currentSubView;
              }
              if ( v12 == v5->subViewServerLogs )
              {
                v13 = v5;
                v14 = selRef_getServerLog;
                goto LABEL_40;
              }
              v7 = 0;
              if ( v12 == v5->subViewMachineLogs )
              {
                v7 = 0;
                if ( (unsigned int)objc_msgSend_ptr(v5, selRef_browserSelectionType) == 4 )
                {
                  v13 = v5;
                  v14 = selRef_getMachineLogList;
                  goto LABEL_40;
                }
              }
            }
          }
        }
LABEL_41:
        usleep(0x3D090u);
        ++v7;
      }
    }
    else
    {
      objc_msgSend_ptr(v5, selRef_connectToGatewayController, v15);
      if ( !v5->controllerServiceRef )
        sleep(6u);
    }
  }
  msgRef_release__objc_msgSend_fixup(v15, &msgRef_release__objc_msgSend_fixup);
}
// 1000262B8: using guessed type char *selRef_init;
// 100026450: using guessed type char *selRef_intValue;
// 100026460: using guessed type char *selRef_getGatewayServers;
// 100026470: using guessed type char *selRef_performSelectorOnMainThread_withObject_waitUntilDone_;
// 100026480: using guessed type char *selRef_gatewayLogin;
// 100026488: using guessed type char *selRef_getGatewayStatus;
// 100026490: using guessed type char *selRef_setGatewayStatus;
// 100026498: using guessed type char *selRef_getServerStatus;
// 1000264A0: using guessed type char *selRef_setServerOnline_;
// 1000264A8: using guessed type char *selRef_setServerDelete;
// 1000264B0: using guessed type char *selRef_setServerInterface;
// 1000264B8: using guessed type char *selRef_getGatewayLog;
// 1000264C0: using guessed type char *selRef_getServerLog;
// 1000264C8: using guessed type char *selRef_getMachineSearchList;
// 1000264D0: using guessed type char *selRef_getMachineLogList;
// 1000264D8: using guessed type char *selRef_getMachineLog;
// 1000264E0: using guessed type char *selRef_removeFirstRequest;
// 1000264E8: using guessed type char *selRef_browserSelectionType;
// 1000264F0: using guessed type char *selRef_connectToGatewayController;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (0000000100002DE8) ----------------------------------------------------
// GMAppController - (int)getGatewayDataForType:(int) sendingData:(id) 
int __cdecl -[GMAppController getGatewayDataForType:sendingData:](struct GMAppController *self, SEL a2, int a3, id a4)
{
  id v4; // r14@1
  void *v5; // rax@1
  void (*v6)(void *, const char *, ...); // rbx@1
  char *v7; // r12@1
  int v8; // er15@1
  char *v9; // rsi@1
  int v10; // ebx@1
  id v11; // rdx@1
  unsigned int v12; // er14@2
  void (*v13)(void *, const char *, ...); // r14@3
  void *v14; // rax@3
  void *v15; // rax@3
  void *v16; // rbx@3
  __int64 v17; // rax@3
  int v18; // eax@4
  int v19; // er14@4
  struct ManagerMsgHeader *v20; // rdx@6
  void *(*v21)(void *, const char *, ...); // rbx@8
  void *v22; // rax@8
  void *v23; // rax@8
  void *v24; // rbx@8
  void *(*v25)(void *, const char *, ...); // r15@18
  void *v26; // rax@18
  void *v27; // r14@18
  void *v28; // rax@18
  __CFString *v29; // rdx@18
  void *v30; // rax@20
  void *v32; // [sp+10h] [bp-50h]@1
  int v33; // [sp+1Ch] [bp-44h]@1
  __int64 v34; // [sp+20h] [bp-40h]@1
  void *v35; // [sp+28h] [bp-38h]@1
  int v36; // [sp+34h] [bp-2Ch]@1

  v4 = a4;
  v33 = a3;
  LODWORD(v5) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAutoreleasePool, &msgRef_alloc__objc_msgSend_fixup);
  v6 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  v32 = objc_msgSend_ptr(v5, selRef_init);
  v36 = 100044;
  v7 = (char *)malloc(0x186CCuLL);
  v35 = 0LL;
  v34 = 100LL;
  v6(self, selRef_performSelectorOnMainThread_withObject_waitUntilDone_, selRef_setDataDict_, 0LL, 1LL);
  v8 = 0;
  v9 = 0LL;
  __memset_chk(v7, 0LL, 100044LL, 100044LL);
  v10 = -2147483642;
  v11 = v4;
  if ( self->controllerServiceRef )
  {
    v12 = 44;
    if ( v11 )
    {
      v13 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v14 = objc_msgSend_ptr(
              classRef_NSPropertyListSerialization,
              selRef_dataFromPropertyList_format_errorDescription_,
              v11,
              v34);
      v15 = sub_10001411B(v14, &cfstr_Applecare);
      v16 = v15;
      LODWORD(v17) = msgRef_length__objc_msgSend_fixup(v15, &msgRef_length__objc_msgSend_fixup);
      v13(v16, selRef_getBytes_length_, v7 + 44, v17);
      LODWORD(v13) = msgRef_length__objc_msgSend_fixup(v16, &msgRef_length__objc_msgSend_fixup);
      v8 = msgRef_length__objc_msgSend_fixup(v16, &msgRef_length__objc_msgSend_fixup);
      v12 = (_DWORD)v13 + 44;
    }
    *(_DWORD *)v7 = v33;
    *((_DWORD *)v7 + 9) = 0;
    *((_DWORD *)v7 + 10) = v8;
    __strcpy_chk(v7 + 4, self->responseMsg->var1, 100040LL);
    v9 = v7;
    v18 = sub_100012242(
            (__int64)self->controllerServiceRef,
            (__int64)v7,
            v12,
            (__int64)&self->responseMsg->var0,
            (unsigned int *)&v36);
    v19 = v18;
    if ( v18 == -2147483630 )
    {
      NSLog(&cfstr_ConnectionToGa, v7);
      v9 = 0LL;
      sub_1000120C7(self->controllerServiceRef, 0);
      v10 = -2147483630;
      self->controllerServiceRef = 0LL;
    }
    else
    {
      if ( v18 )
      {
        v9 = (char *)(unsigned int)v18;
        NSLog(&cfstr_Gatewayclient_, (unsigned int)v18);
LABEL_14:
        v10 = v19;
        goto LABEL_15;
      }
      v20 = self->responseMsg;
      v10 = 0;
      if ( !v20->var2 )
      {
        if ( v20->var3 )
        {
          v21 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
          v22 = objc_msgSend_ptr(classRef_NSData, selRef_dataWithBytes_length_, &v20[1]);
          v23 = sub_100014252((__int64)v22, &cfstr_Applecare);
          v9 = selRef_propertyListFromData_mutabilityOption_format_errorDescription_;
          v24 = v21(
                  classRef_NSPropertyListSerialization,
                  selRef_propertyListFromData_mutabilityOption_format_errorDescription_,
                  v23,
                  2LL,
                  &v34,
                  &v35);
          if ( v35 )
          {
            v9 = (char *)objc_msgSend_ptr(v35, selRef_UTF8String);
            printf("propertyListFromData error: \"%s\"\n", v9);
          }
          if ( v24 )
          {
            v9 = selRef_performSelectorOnMainThread_withObject_waitUntilDone_;
            objc_msgSend_ptr(
              self,
              selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
              selRef_setDataDict_,
              v24,
              1LL);
          }
        }
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  free(v7);
  if ( v33 && self->responseMsg->var2 == 2 && self->loginStatus )
  {
    NSLog(&cfstr_InvalidSession, v9);
    self->loginStatus = 0;
    v25 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v26 = objc_msgSend_ptr((void *)self->loginUserPopUpButton, selRef_selectedItem);
    v27 = v25(v26, selRef_tag);
    v28 = v25((void *)self->loginPasswordTextField, selRef_stringValue);
    v29 = &cfstr_Adg_tech;
    if ( v27 == (void *)2 )
      v29 = &cfstr_Adg_admin;
    v30 = v25((void *)classRef_NSDictionary, selRef_dictionaryWithObjectsAndKeys_, v29, &cfstr_Loginname, v28, 0LL);
    if ( !(unsigned int)v25(self, selRef_getGatewayDataForType_sendingData_, 0LL, v30) && !self->responseMsg->var2 )
      objc_msgSend_ptr(
        self,
        selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
        selRef_setLoginStatus,
        0LL,
        1LL);
  }
  msgRef_release__objc_msgSend_fixup(v32, &msgRef_release__objc_msgSend_fixup);
  return v10;
}
// 100015D9A: using guessed type int __fastcall __memset_chk(_QWORD, _QWORD, _QWORD, _QWORD);
// 100015DB2: using guessed type int __fastcall __strcpy_chk(_QWORD, _QWORD, _QWORD);
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 1000262B8: using guessed type char *selRef_init;
// 100026410: using guessed type char *selRef_selectedItem;
// 100026418: using guessed type char *selRef_tag;
// 100026470: using guessed type char *selRef_performSelectorOnMainThread_withObject_waitUntilDone_;
// 1000264F8: using guessed type char *selRef_setDataDict_;
// 100026500: using guessed type char *selRef_dataFromPropertyList_format_errorDescription_;
// 100026508: using guessed type char *selRef_getBytes_length_;
// 100026510: using guessed type char *selRef_dataWithBytes_length_;
// 100026518: using guessed type char *selRef_propertyListFromData_mutabilityOption_format_errorDescription_;
// 100026520: using guessed type char *selRef_UTF8String;
// 100026528: using guessed type char *selRef_stringValue;
// 100026530: using guessed type char *selRef_dictionaryWithObjectsAndKeys_;
// 100026538: using guessed type char *selRef_getGatewayDataForType_sendingData_;
// 100026540: using guessed type char *selRef_setLoginStatus;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000273E8: using guessed type void *classRef_NSPropertyListSerialization;
// 1000273F0: using guessed type void *classRef_NSData;
// 100028248: using guessed type __CFString cfstr_Applecare;
// 100028268: using guessed type __CFString cfstr_ConnectionToGa;
// 100028288: using guessed type __CFString cfstr_Gatewayclient_;
// 1000282A8: using guessed type __CFString cfstr_InvalidSession;
// 1000282C8: using guessed type __CFString cfstr_Adg_admin;
// 1000282E8: using guessed type __CFString cfstr_Adg_tech;
// 100028308: using guessed type __CFString cfstr_Loginname;

//----- (00000001000031E9) ----------------------------------------------------
// GMAppController - (void)gatewayLogin
void __cdecl -[GMAppController gatewayLogin](struct GMAppController *self, SEL a2)
{
  void *v2; // rax@1
  void *(*v3)(void *, const char *, ...); // r12@1
  void *v4; // r14@1
  void *v5; // rax@1
  void *v6; // r15@1
  void *v7; // rax@1
  __CFString *v8; // rdx@1
  void *v9; // rax@3
  void *(*v10)(void *, const char *, ...); // r12@5
  void *v11; // rax@5
  void *v12; // rax@5

  LODWORD(v2) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAutoreleasePool, &msgRef_alloc__objc_msgSend_fixup);
  v3 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v4 = objc_msgSend_ptr(v2, selRef_init);
  v5 = v3((void *)self->loginUserPopUpButton, selRef_selectedItem);
  v6 = v3(v5, selRef_tag);
  v7 = v3((void *)self->loginPasswordTextField, selRef_stringValue);
  v8 = &cfstr_Adg_tech;
  if ( v6 == (void *)2 )
    v8 = &cfstr_Adg_admin;
  v9 = v3(classRef_NSDictionary, selRef_dictionaryWithObjectsAndKeys_, v8, &cfstr_Loginname, v7, 0LL);
  if ( !(unsigned int)v3(self, selRef_getGatewayDataForType_sendingData_, 0LL, v9) )
  {
    if ( self->responseMsg->var2 )
    {
      objc_msgSend_ptr(
        self,
        selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
        selRef_showInvalidPasswordAlert,
        0LL,
        0LL);
    }
    else
    {
      v10 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      objc_msgSend_ptr(
        self,
        selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
        selRef_setLoginStatus,
        0LL,
        1LL);
      v11 = v10(classRef_NSBundle, selRef_mainBundle);
      v12 = v10(v11, selRef_localizedStringForKey_value_table_, &cfstr_Knegotiateserv, &stru_100028108, 0LL);
      v10(self, selRef_performSelectorOnMainThread_withObject_waitUntilDone_, selRef_setConnectStatus_, v12, 1LL);
      v10(self, selRef_getGatewayServers);
      v10(self, selRef_getGatewayStatus);
      v10(
        classRef_NSThread,
        selRef_detachNewThreadSelector_toTarget_withObject_,
        selRef_serverMonitorThread_,
        self,
        self);
    }
  }
  msgRef_release__objc_msgSend_fixup(v4, &msgRef_release__objc_msgSend_fixup);
}
// 1000262B8: using guessed type char *selRef_init;
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 100026410: using guessed type char *selRef_selectedItem;
// 100026418: using guessed type char *selRef_tag;
// 100026460: using guessed type char *selRef_getGatewayServers;
// 100026470: using guessed type char *selRef_performSelectorOnMainThread_withObject_waitUntilDone_;
// 100026488: using guessed type char *selRef_getGatewayStatus;
// 100026528: using guessed type char *selRef_stringValue;
// 100026530: using guessed type char *selRef_dictionaryWithObjectsAndKeys_;
// 100026538: using guessed type char *selRef_getGatewayDataForType_sendingData_;
// 100026540: using guessed type char *selRef_setLoginStatus;
// 100026548: using guessed type char *selRef_setConnectStatus_;
// 100026550: using guessed type char *selRef_serverMonitorThread_;
// 100026558: using guessed type char *selRef_detachNewThreadSelector_toTarget_withObject_;
// 100026560: using guessed type char *selRef_showInvalidPasswordAlert;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000273B0: using guessed type void *classRef_NSBundle;
// 1000273F8: using guessed type void *classRef_NSDictionary;
// 100027400: using guessed type void *classRef_NSThread;
// 1000282C8: using guessed type __CFString cfstr_Adg_admin;
// 1000282E8: using guessed type __CFString cfstr_Adg_tech;
// 100028308: using guessed type __CFString cfstr_Loginname;
// 100028348: using guessed type __CFString cfstr_Knegotiateserv;

//----- (00000001000033B8) ----------------------------------------------------
// GMAppController - (void)getGatewayServers
void __cdecl -[GMAppController getGatewayServers](struct GMAppController *self, SEL a2)
{
  struct GMAppController *v2; // r13@1
  void *v3; // rax@1
  void *(*v4)(void *, const char *, ...); // rbx@1
  void *v5; // rax@1
  unsigned int v6; // eax@1
  struct NSDictionary *v7; // rdi@2
  __int64 v8; // rax@3
  void *(*v9)(void *, const char *, ...); // rbx@4
  __int64 v10; // r12@9
  __int64 v11; // rax@9
  __int64 v12; // rax@11
  __int64 v13; // r15@11
  void *v14; // rax@11
  void *v15; // rax@12
  void *v16; // rax@12
  void *v17; // rax@12
  void *v18; // rbx@12
  void *(*v19)(void *, const char *, ...); // r14@13
  void *v20; // rax@13
  struct GMAppController *v21; // r15@14
  void *v22; // rax@14
  void *v23; // r13@14
  void *(*v24)(void *, const char *, ...); // r14@15
  char v25; // bl@15
  void *v26; // rax@15
  void *v27; // rax@20
  __int64 v28; // rax@20
  int v29; // er15@21
  __int64 v30; // rbx@21
  void *v31; // rax@22
  void *v32; // rax@22
  void *v33; // rax@23
  __int64 v34; // rax@23
  struct GMAppController *v35; // r14@24
  void (*v36)(void *, const char *, ...); // r13@24
  void *v37; // rax@24
  void *v38; // rax@25
  unsigned __int64 v39; // rax@25
  void *(*v40)(void *, const char *, ...); // rbx@29
  void *v41; // rbx@29
  __int64 v42; // rax@30
  __int64 v43; // rax@33
  __int64 v44; // [sp+0h] [bp-130h]@1
  __int64 v45; // [sp+8h] [bp-128h]@5
  void *v46; // [sp+10h] [bp-120h]@4
  struct NSDictionary *v47; // [sp+18h] [bp-118h]@4
  __int64 v48; // [sp+20h] [bp-110h]@14
  void *v49; // [sp+28h] [bp-108h]@4
  char v50; // [sp+37h] [bp-F9h]@4
  unsigned __int64 v51; // [sp+38h] [bp-F8h]@6
  char v52; // [sp+40h] [bp-F0h]@4
  __int128 v53; // [sp+C0h] [bp-70h]@4
  __int128 v54; // [sp+D0h] [bp-60h]@4
  __int128 v55; // [sp+E0h] [bp-50h]@4
  __int128 v56; // [sp+F0h] [bp-40h]@4
  __int64 v57; // [sp+100h] [bp-30h]@1

  v2 = self;
  v57 = *(_QWORD *)__stack_chk_guard_ptr;
  LODWORD(v3) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAutoreleasePool, &msgRef_alloc__objc_msgSend_fixup);
  v4 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v5 = objc_msgSend_ptr(v3, selRef_init);
  v6 = (unsigned __int64)v4(self, selRef_getGatewayDataForType_sendingData_, 2LL, 0LL, v5);
  if ( v6 )
  {
    NSLog(&cfstr_Getgatewayda_6, v6);
  }
  else
  {
    v7 = self->dataDict;
    if ( v7 )
    {
      LODWORD(v8) = msgRef_count__objc_msgSend_fixup(v7, &msgRef_count__objc_msgSend_fixup);
      if ( v8 )
      {
        v9 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
        v49 = objc_msgSend_ptr(classRef_NSMutableDictionary, selRef_dictionaryWithCapacity_, 1LL);
        v56 = 0LL;
        v55 = 0LL;
        v54 = 0LL;
        v53 = 0LL;
        v47 = v2->dataDict;
        v46 = v9((void *)v2->dataDict, selRef_countByEnumeratingWithState_objects_count_, &v53, &v52, 16LL);
        v50 = 0;
        if ( v46 )
        {
          v50 = 0;
          v45 = *(_QWORD *)v54;
          do
          {
            v51 = 0LL;
            do
            {
              if ( *(_QWORD *)v54 != v45 )
                objc_enumerationMutation(v47);
              v10 = *(_QWORD *)(*((_QWORD *)&v53 + 1) + 8 * v51);
              LODWORD(v11) = msgRef_class__objc_msgSend_fixup(classRef_NSDictionary, &msgRef_class__objc_msgSend_fixup);
              if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                                      v10,
                                      &msgRef_isKindOfClass___objc_msgSend_fixup,
                                      v11) )
              {
                LODWORD(v12) = msgRef_objectForKey___objc_msgSend_fixup(
                                 v10,
                                 &msgRef_objectForKey___objc_msgSend_fixup,
                                 &cfstr_Serverip);
                v13 = v12;
                v14 = objc_msgSend_ptr(v2->gateway, selRef_indexOfServerWithIP_, v12);
                if ( v14 == (void *)0xFFFFFFFF )
                {
                  LODWORD(v15) = msgRef_alloc__objc_msgSend_fixup(
                                   classRef_GMServerInfo,
                                   &msgRef_alloc__objc_msgSend_fixup);
                  v16 = objc_msgSend_ptr(v15, selRef_initWithServerDict_, v10);
                  LODWORD(v17) = msgRef_autorelease__objc_msgSend_fixup(v16, &msgRef_autorelease__objc_msgSend_fixup);
                  v18 = v17;
                  if ( v17 )
                  {
                    v19 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
                    objc_msgSend_ptr(v2->gateway, selRef_addServer_, v17);
                    v20 = v19(v18, selRef_ipAddress);
                    v19(v49, selRef_setObject_forKey_, v13, v20);
                    v50 = 1;
                  }
                }
                else
                {
                  v48 = v13;
                  v21 = v2;
                  v22 = objc_msgSend_ptr(v2->gateway, selRef_serverAtIndex_, v14);
                  v23 = v22;
                  if ( v22 )
                  {
                    v24 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
                    v25 = (unsigned __int64)objc_msgSend_ptr(v22, selRef_updateFromGatewayServerDict_, v10);
                    v26 = v24(v23, selRef_ipAddress);
                    v24(v49, selRef_setObject_forKey_, v48, v26);
                    if ( v25 )
                      v50 = 1;
                  }
                  v2 = v21;
                }
              }
              else
              {
                NSLog(&cfstr_ExpectedAnNsdi, v10);
              }
              ++v51;
            }
            while ( v51 < (unsigned __int64)v46 );
            v46 = objc_msgSend_ptr((void *)v47, selRef_countByEnumeratingWithState_objects_count_, &v53, &v52, 16LL);
          }
          while ( v46 );
        }
        v27 = objc_msgSend_ptr(v2->gateway, selRef_serverList);
        LODWORD(v28) = msgRef_count__objc_msgSend_fixup(v27, &msgRef_count__objc_msgSend_fixup);
        if ( v28 )
        {
          v29 = 0;
          v30 = 0LL;
          do
          {
            v31 = objc_msgSend_ptr(v2->gateway, selRef_serverList);
            LODWORD(v32) = msgRef_objectAtIndex___objc_msgSend_fixup(
                             v31,
                             &msgRef_objectAtIndex___objc_msgSend_fixup,
                             v30);
            if ( v32 )
            {
              v33 = objc_msgSend_ptr(v32, selRef_ipAddress);
              LODWORD(v34) = msgRef_objectForKey___objc_msgSend_fixup(
                               v49,
                               &msgRef_objectForKey___objc_msgSend_fixup,
                               v33);
              if ( !v34 )
              {
                v35 = v2;
                v36 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
                v37 = objc_msgSend_ptr(classRef_NSNumber, selRef_numberWithInteger_, v30);
                v36(
                  v35,
                  selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
                  selRef_removeServerAtIndex_,
                  v37,
                  1LL);
                v2 = v35;
                --v29;
                v50 = 1;
              }
            }
            v38 = objc_msgSend_ptr(v2->gateway, selRef_serverList);
            LODWORD(v39) = msgRef_count__objc_msgSend_fixup(v38, &msgRef_count__objc_msgSend_fixup);
            v30 = ++v29;
          }
          while ( v29 < v39 );
        }
        if ( objc_msgSend_ptr((void *)v2->window, selRef_contentView) != v2->mVerticalSplitView )
          objc_msgSend_ptr(
            v2,
            selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
            selRef_showSplitView,
            0LL,
            1LL);
        if ( v50 )
        {
          objc_msgSend_ptr((void *)v2->outlineViewBrowser, selRef_reloadData);
          v40 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
          objc_msgSend_ptr(
            v2,
            selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
            selRef_updateAuthenticationStatus_,
            0LL,
            1LL);
          v41 = v40((void *)v2->outlineViewBrowser, selRef_selectedItem);
          if ( v2->currentSubView == v2->subViewServerOverview )
          {
            LODWORD(v42) = msgRef_self__objc_msgSend_fixup(classRef_GMServerInfo, &msgRef_self__objc_msgSend_fixup);
            if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                                    v41,
                                    &msgRef_isKindOfClass___objc_msgSend_fixup,
                                    v42) )
              objc_msgSend_ptr(
                v2,
                selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
                selRef_updateServerOverview_,
                v41,
                1LL);
          }
        }
      }
    }
  }
  msgRef_release__objc_msgSend_fixup(v44, &msgRef_release__objc_msgSend_fixup);
  v43 = *(_QWORD *)__stack_chk_guard_ptr;
}
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 100015EDE: using guessed type int __fastcall objc_enumerationMutation(_QWORD);
// 100021088: using guessed type void *__stack_chk_guard_ptr;
// 1000262B8: using guessed type char *selRef_init;
// 100026348: using guessed type char *selRef_contentView;
// 100026410: using guessed type char *selRef_selectedItem;
// 100026470: using guessed type char *selRef_performSelectorOnMainThread_withObject_waitUntilDone_;
// 100026538: using guessed type char *selRef_getGatewayDataForType_sendingData_;
// 100026568: using guessed type char *selRef_dictionaryWithCapacity_;
// 100026570: using guessed type char *selRef_countByEnumeratingWithState_objects_count_;
// 100026578: using guessed type char *selRef_indexOfServerWithIP_;
// 100026580: using guessed type char *selRef_initWithServerDict_;
// 100026588: using guessed type char *selRef_addServer_;
// 100026590: using guessed type char *selRef_ipAddress;
// 100026598: using guessed type char *selRef_setObject_forKey_;
// 1000265A0: using guessed type char *selRef_serverAtIndex_;
// 1000265A8: using guessed type char *selRef_updateFromGatewayServerDict_;
// 1000265B0: using guessed type char *selRef_serverList;
// 1000265B8: using guessed type char *selRef_removeServerAtIndex_;
// 1000265C0: using guessed type char *selRef_numberWithInteger_;
// 1000265C8: using guessed type char *selRef_showSplitView;
// 1000265D0: using guessed type char *selRef_reloadData;
// 1000265E0: using guessed type char *selRef_updateAuthenticationStatus_;
// 1000265E8: using guessed type char *selRef_updateServerOverview_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272C0: using guessed type int (__fastcall *msgRef_autorelease__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027330: using guessed type int (__fastcall *msgRef_class__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 1000273D8: using guessed type void *classRef_NSNumber;
// 100027408: using guessed type void *classRef_NSMutableDictionary;
// 100028368: using guessed type __CFString cfstr_ExpectedAnNsdi;
// 1000283C8: using guessed type __CFString cfstr_Getgatewayda_6;

//----- (00000001000039BE) ----------------------------------------------------
// GMAppController - (void)getGatewayStatus
void __cdecl -[GMAppController getGatewayStatus](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0
  __int64 v3; // ST00_8@1
  void *v4; // rax@1
  void *(*v5)(void *, const char *, ...); // r15@1
  void *v6; // r14@1
  unsigned int v7; // eax@1

  v3 = v2;
  LODWORD(v4) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAutoreleasePool, &msgRef_alloc__objc_msgSend_fixup);
  v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v6 = objc_msgSend_ptr(v4, selRef_init, v3);
  v7 = (unsigned __int64)v5(self, selRef_getGatewayDataForType_sendingData_, 1LL, 0LL);
  if ( v7 )
  {
    NSLog(&cfstr_Getgatewayda_0, v7);
  }
  else if ( self->dataDict && (unsigned __int8)objc_msgSend_ptr(self->gateway, selRef_updateFromGatewayStatusDict_) )
  {
    objc_msgSend_ptr(
      self,
      selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
      selRef_updateGatewayOverview,
      0LL,
      1LL);
  }
  msgRef_release__objc_msgSend_fixup(v6, &msgRef_release__objc_msgSend_fixup);
}
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 1000262B8: using guessed type char *selRef_init;
// 100026470: using guessed type char *selRef_performSelectorOnMainThread_withObject_waitUntilDone_;
// 100026538: using guessed type char *selRef_getGatewayDataForType_sendingData_;
// 1000265F0: using guessed type char *selRef_updateFromGatewayStatusDict_;
// 1000265F8: using guessed type char *selRef_updateGatewayOverview;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000283E8: using guessed type __CFString cfstr_Getgatewayda_0;

//----- (0000000100003A88) ----------------------------------------------------
// GMAppController - (void)setGatewayStatus
void __cdecl -[GMAppController setGatewayStatus](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0
  __int64 v3; // ST00_8@1
  void *v4; // rax@1
  void *(*v5)(void *, const char *, ...); // rbx@1
  void *v6; // r14@1
  void *v7; // rax@1
  __int64 v8; // rbx@1

  v3 = v2;
  NSLog(&cfstr_GatewaymgrSetg, a2);
  LODWORD(v4) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAutoreleasePool, &msgRef_alloc__objc_msgSend_fixup);
  v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v6 = objc_msgSend_ptr(v4, selRef_init, v3);
  v7 = v5(self->gateway, selRef_settingsDict);
  v8 = (unsigned int)v5(self, selRef_getGatewayDataForType_sendingData_, 1LL, v7);
  NSLog(&cfstr_GatewaymgrSe_1, v8);
  NSLog(&cfstr_GatewaymgrData, self->dataDict);
  if ( (_DWORD)v8 )
  {
    NSLog(&cfstr_Getgatewayda_0, (unsigned int)v8);
  }
  else if ( self->dataDict && (unsigned __int8)objc_msgSend_ptr(self->gateway, selRef_updateFromGatewayStatusDict_) )
  {
    objc_msgSend_ptr(self, selRef_performSelectorOnMainThread_withObject_waitUntilDone_, selRef_showSettings, 0LL, 1LL);
  }
  msgRef_release__objc_msgSend_fixup(v6, &msgRef_release__objc_msgSend_fixup);
}
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 1000262B8: using guessed type char *selRef_init;
// 100026470: using guessed type char *selRef_performSelectorOnMainThread_withObject_waitUntilDone_;
// 100026538: using guessed type char *selRef_getGatewayDataForType_sendingData_;
// 1000265F0: using guessed type char *selRef_updateFromGatewayStatusDict_;
// 100026600: using guessed type char *selRef_settingsDict;
// 100026608: using guessed type char *selRef_showSettings;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000283E8: using guessed type __CFString cfstr_Getgatewayda_0;
// 100028408: using guessed type __CFString cfstr_GatewaymgrSetg;
// 100028428: using guessed type __CFString cfstr_GatewaymgrSe_1;
// 100028448: using guessed type __CFString cfstr_GatewaymgrData;

//----- (0000000100003B9E) ----------------------------------------------------
// GMAppController - (void)getServerStatus
void __cdecl -[GMAppController getServerStatus](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0
  void *v3; // rax@2
  void *(*v4)(void *, const char *, ...); // rbx@2
  void *v5; // r14@2
  void *v6; // rax@2
  void *v7; // rbx@2
  void *(*v8)(void *, const char *, ...); // r13@3
  void *v9; // rax@3
  void *v10; // rax@3
  unsigned int v11; // eax@3

  if ( (unsigned int)objc_msgSend_ptr(self, selRef_browserSelectionType, v2) == 3 )
  {
    LODWORD(v3) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAutoreleasePool, &msgRef_alloc__objc_msgSend_fixup);
    v4 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v5 = objc_msgSend_ptr(v3, selRef_init);
    v6 = v4((void *)self->outlineViewBrowser, selRef_selectedItem);
    v7 = v6;
    if ( v6 )
    {
      v8 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v9 = objc_msgSend_ptr(v6, selRef_ipAddress);
      v10 = v8((void *)classRef_NSDictionary, selRef_dictionaryWithObjectsAndKeys_, v9, &cfstr_Serverip, 0LL);
      v11 = (unsigned __int64)v8(self, selRef_getGatewayDataForType_sendingData_, 4LL, v10);
      if ( v11 )
      {
        NSLog(&cfstr_Getgatewayda_1, v11);
      }
      else if ( self->dataDict )
      {
        if ( (unsigned __int8)objc_msgSend_ptr(v7, selRef_updateFromServerStatusDict_) )
          objc_msgSend_ptr(
            self,
            selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
            selRef_updateServerOverview_,
            v7,
            1LL);
      }
    }
    msgRef_release__objc_msgSend_fixup(v5, &msgRef_release__objc_msgSend_fixup);
  }
}
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 1000262B8: using guessed type char *selRef_init;
// 100026410: using guessed type char *selRef_selectedItem;
// 100026470: using guessed type char *selRef_performSelectorOnMainThread_withObject_waitUntilDone_;
// 1000264E8: using guessed type char *selRef_browserSelectionType;
// 100026530: using guessed type char *selRef_dictionaryWithObjectsAndKeys_;
// 100026538: using guessed type char *selRef_getGatewayDataForType_sendingData_;
// 100026590: using guessed type char *selRef_ipAddress;
// 1000265E8: using guessed type char *selRef_updateServerOverview_;
// 100026610: using guessed type char *selRef_updateFromServerStatusDict_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100028468: using guessed type __CFString cfstr_Getgatewayda_1;

//----- (0000000100003CE8) ----------------------------------------------------
// GMAppController - (void)setServerOnline:(char) 
void __cdecl -[GMAppController setServerOnline:](struct GMAppController *self, SEL a2, char a3)
{
  void *v3; // rax@2
  void *(*v4)(void *, const char *, ...); // rbx@2
  void *v5; // r14@2
  void *v6; // rax@2
  void *(*v7)(void *, const char *, ...); // r15@3
  void *v8; // rbx@3
  void *v9; // rax@3
  void *v10; // rax@3
  unsigned int v11; // eax@3
  char v12; // [sp+14h] [bp-2Ch]@1

  v12 = a3;
  if ( (unsigned int)objc_msgSend_ptr(self, selRef_browserSelectionType) == 3 )
  {
    LODWORD(v3) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAutoreleasePool, &msgRef_alloc__objc_msgSend_fixup);
    v4 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v5 = objc_msgSend_ptr(v3, selRef_init);
    v6 = v4((void *)self->outlineViewBrowser, selRef_selectedItem);
    if ( v6 )
    {
      v7 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v8 = objc_msgSend_ptr(v6, selRef_ipAddress);
      v9 = v7(classRef_NSNumber, selRef_numberWithBool_, (unsigned int)v12);
      v10 = v7(
              (void *)classRef_NSDictionary,
              selRef_dictionaryWithObjectsAndKeys_,
              v8,
              &cfstr_Serverip,
              v9,
              &cfstr_Online,
              0LL);
      v11 = (unsigned __int64)v7(self, selRef_getGatewayDataForType_sendingData_, 3LL, v10);
      if ( v11 )
        NSLog(&cfstr_Getgatewayda_2, v11);
    }
    msgRef_release__objc_msgSend_fixup(v5, &msgRef_release__objc_msgSend_fixup);
  }
}
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 1000262B8: using guessed type char *selRef_init;
// 100026410: using guessed type char *selRef_selectedItem;
// 1000264E8: using guessed type char *selRef_browserSelectionType;
// 100026530: using guessed type char *selRef_dictionaryWithObjectsAndKeys_;
// 100026538: using guessed type char *selRef_getGatewayDataForType_sendingData_;
// 100026590: using guessed type char *selRef_ipAddress;
// 100026618: using guessed type char *selRef_numberWithBool_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000273D8: using guessed type void *classRef_NSNumber;
// 100028488: using guessed type __CFString cfstr_Online;
// 1000284A8: using guessed type __CFString cfstr_Getgatewayda_2;

//----- (0000000100003E18) ----------------------------------------------------
// GMAppController - (void)setServerDelete
void __cdecl -[GMAppController setServerDelete](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0
  void *v3; // rax@2
  void *(*v4)(void *, const char *, ...); // rbx@2
  void *v5; // r14@2
  void *v6; // rax@2
  void *(*v7)(void *, const char *, ...); // r13@3
  void *v8; // rbx@3
  void *v9; // rax@3
  void *v10; // rax@3
  unsigned int v11; // eax@3

  if ( (unsigned int)objc_msgSend_ptr(self, selRef_browserSelectionType, v2) == 3 )
  {
    LODWORD(v3) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAutoreleasePool, &msgRef_alloc__objc_msgSend_fixup);
    v4 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v5 = objc_msgSend_ptr(v3, selRef_init);
    v6 = v4((void *)self->outlineViewBrowser, selRef_selectedItem);
    if ( v6 )
    {
      v7 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v8 = objc_msgSend_ptr(v6, selRef_ipAddress);
      v9 = v7(classRef_NSNumber, selRef_numberWithBool_, 1LL);
      v10 = v7(
              (void *)classRef_NSDictionary,
              selRef_dictionaryWithObjectsAndKeys_,
              v8,
              &cfstr_Serverip,
              v9,
              &cfstr_Deleteserver,
              0LL);
      v11 = (unsigned __int64)v7(self, selRef_getGatewayDataForType_sendingData_, 3LL, v10);
      if ( v11 )
        NSLog(&cfstr_Getgatewayda_2, v11);
    }
    msgRef_release__objc_msgSend_fixup(v5, &msgRef_release__objc_msgSend_fixup);
  }
}
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 1000262B8: using guessed type char *selRef_init;
// 100026410: using guessed type char *selRef_selectedItem;
// 1000264E8: using guessed type char *selRef_browserSelectionType;
// 100026530: using guessed type char *selRef_dictionaryWithObjectsAndKeys_;
// 100026538: using guessed type char *selRef_getGatewayDataForType_sendingData_;
// 100026590: using guessed type char *selRef_ipAddress;
// 100026618: using guessed type char *selRef_numberWithBool_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000273D8: using guessed type void *classRef_NSNumber;
// 1000284A8: using guessed type __CFString cfstr_Getgatewayda_2;
// 1000284C8: using guessed type __CFString cfstr_Deleteserver;

//----- (0000000100003F41) ----------------------------------------------------
// GMAppController - (void)setServerInterface
void __cdecl -[GMAppController setServerInterface](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0
  __int64 v3; // ST00_8@1
  void *v4; // rax@1
  void *(*v5)(void *, const char *, ...); // rbx@1
  void *v6; // r14@1
  void *v7; // rax@2
  void *v8; // r15@2
  void *(*v9)(void *, const char *, ...); // rbx@3
  void *v10; // r13@3
  void *v11; // rax@3
  void *v12; // rax@3
  void *v13; // rax@3
  __int64 v14; // rax@3
  __int64 v15; // rbx@3
  void (*v16)(void *, const char *, ...); // r13@5

  v3 = v2;
  LODWORD(v4) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAutoreleasePool, &msgRef_alloc__objc_msgSend_fixup);
  v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v6 = objc_msgSend_ptr(v4, selRef_init, v3);
  if ( (unsigned int)v5(self, selRef_browserSelectionType) == 3 )
  {
    v7 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_selectedItem);
    v8 = v7;
    if ( v7 )
    {
      v9 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v10 = objc_msgSend_ptr(v7, selRef_logProxy);
      v11 = v9((void *)self->serverInterfacePopUpButton, selRef_selectedItem);
      v12 = v9(v11, selRef_title);
      v13 = v9(v12, selRef_componentsSeparatedByString_, &stru_1000284E8);
      LODWORD(v14) = msgRef_objectAtIndex___objc_msgSend_fixup(v13, &msgRef_objectAtIndex___objc_msgSend_fixup, 0LL);
      v15 = v14;
      if ( v10 )
      {
        if ( (unsigned int)objc_msgSend_ptr(v10, selRef_setInterface_, v14) )
        {
          v16 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
          objc_msgSend_ptr(
            self,
            selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
            selRef_showInvalidInterfaceAlert_,
            v15,
            1LL);
          v16(
            self,
            selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
            selRef_resetNetworkInterfacesPopUp_,
            v8,
            0LL);
        }
      }
    }
  }
  msgRef_release__objc_msgSend_fixup(v6, &msgRef_release__objc_msgSend_fixup);
}
// 1000262B8: using guessed type char *selRef_init;
// 100026410: using guessed type char *selRef_selectedItem;
// 100026470: using guessed type char *selRef_performSelectorOnMainThread_withObject_waitUntilDone_;
// 1000264E8: using guessed type char *selRef_browserSelectionType;
// 100026620: using guessed type char *selRef_logProxy;
// 100026628: using guessed type char *selRef_title;
// 100026630: using guessed type char *selRef_componentsSeparatedByString_;
// 100026638: using guessed type char *selRef_setInterface_;
// 100026640: using guessed type char *selRef_showInvalidInterfaceAlert_;
// 100026648: using guessed type char *selRef_resetNetworkInterfacesPopUp_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 1000284E8: using guessed type __CFString stru_1000284E8;

//----- (00000001000040DA) ----------------------------------------------------
// GMAppController - (void)getGatewayLog
void __cdecl -[GMAppController getGatewayLog](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0
  __int64 v3; // ST00_8@1
  void *v4; // rax@1
  void *(*v5)(void *, const char *, ...); // rbx@1
  void *v6; // rax@1
  struct GMGatewayInfo *v7; // rbx@2
  void *(*v8)(void *, const char *, ...); // r14@2
  void *v9; // rax@2
  void *v10; // rax@2
  void *(*v11)(void *, const char *, ...); // r12@3
  void *v12; // r14@3
  void *v13; // rbx@3
  void *v14; // rax@3
  void *v15; // rax@3
  void *v16; // rbx@3
  char *v17; // r12@4
  void *v18; // rax@4
  void *v19; // r14@4
  __int64 v20; // rax@4
  __int64 v21; // r13@4
  __int64 v22; // rax@7
  struct GMGatewayInfo *v23; // rbx@8
  void *(*v24)(void *, const char *, ...); // r14@10
  void *v25; // rax@10
  void *v26; // rax@10
  void *(*v27)(void *, const char *, ...); // r12@11
  void *v28; // rbx@11
  void *v29; // rax@11
  void *v30; // rax@11
  __int64 v31; // [sp+0h] [bp-30h]@1

  v3 = v2;
  LODWORD(v4) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAutoreleasePool, &msgRef_alloc__objc_msgSend_fixup);
  v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v6 = objc_msgSend_ptr(v4, selRef_init, v3);
  if ( (unsigned int)v5(self, selRef_browserSelectionType, v6) == 1 )
  {
    v7 = self->gateway;
    v8 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v9 = objc_msgSend_ptr(self->gateway, selRef_controllerIP);
    v10 = v8(v7, selRef_indexOfServerWithIP_, v9);
    if ( v10 != (void *)0xFFFFFFFF )
    {
      v11 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v12 = objc_msgSend_ptr(self->gateway, selRef_serverAtIndex_, v10);
      v13 = v11(self->gateway, selRef_logPath);
      v14 = v11(self->gateway, selRef_logIndex);
      v15 = v11(self, selRef_getLogAtPath_fromIndex_forServer_, v13, v14, v12);
      v16 = v15;
      if ( v15 )
      {
        v17 = (char *)&msgRef_self__objc_msgSend_fixup + 1;
        LODWORD(v18) = msgRef_objectForKey___objc_msgSend_fixup(
                         v15,
                         &msgRef_objectForKey___objc_msgSend_fixup,
                         &cfstr_Isfulllog);
        v19 = v18;
        LODWORD(v20) = msgRef_objectForKey___objc_msgSend_fixup(
                         v16,
                         &msgRef_objectForKey___objc_msgSend_fixup,
                         &cfstr_Logcontents_1);
        v21 = v20;
        if ( v19 )
          LOBYTE(v17) = (unsigned __int64)objc_msgSend_ptr(v19, selRef_boolValue);
        if ( v21 )
        {
          LODWORD(v22) = msgRef_length__objc_msgSend_fixup(v21, &msgRef_length__objc_msgSend_fixup);
          if ( v22 )
          {
            v23 = self->gateway;
            if ( (_BYTE)v17 )
            {
              objc_msgSend_ptr(self->gateway, selRef_setLogContents_, v21);
            }
            else
            {
              v24 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
              v25 = objc_msgSend_ptr(self->gateway, selRef_logContents);
              v26 = v24(v25, selRef_stringByAppendingString_, v21);
              v24(v23, selRef_setLogContents_, v26);
            }
            v27 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
            v28 = objc_msgSend_ptr(self->gateway, selRef_logContents);
            v29 = v27((void *)self->gatewayLogSearchField, selRef_stringValue);
            v30 = sub_100012F74(v28, v29);
            v27(
              self,
              selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
              selRef_fillGatewayTextViewWithString_,
              v30,
              1LL);
          }
        }
      }
    }
  }
  msgRef_release__objc_msgSend_fixup(v31, &msgRef_release__objc_msgSend_fixup);
}
// 1000262B8: using guessed type char *selRef_init;
// 100026470: using guessed type char *selRef_performSelectorOnMainThread_withObject_waitUntilDone_;
// 1000264E8: using guessed type char *selRef_browserSelectionType;
// 100026528: using guessed type char *selRef_stringValue;
// 100026578: using guessed type char *selRef_indexOfServerWithIP_;
// 1000265A0: using guessed type char *selRef_serverAtIndex_;
// 100026650: using guessed type char *selRef_controllerIP;
// 100026658: using guessed type char *selRef_logPath;
// 100026660: using guessed type char *selRef_logIndex;
// 100026668: using guessed type char *selRef_getLogAtPath_fromIndex_forServer_;
// 100026670: using guessed type char *selRef_boolValue;
// 100026678: using guessed type char *selRef_setLogContents_;
// 100026680: using guessed type char *selRef_logContents;
// 100026688: using guessed type char *selRef_stringByAppendingString_;
// 100026690: using guessed type char *selRef_fillGatewayTextViewWithString_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (0000000100004328) ----------------------------------------------------
// GMAppController - (void)getServerLog
void __cdecl -[GMAppController getServerLog](struct GMAppController *self, SEL a2)
{
  void *v2; // rax@1
  void *(*v3)(void *, const char *, ...); // rbx@1
  struct NSOutlineView *v4; // rbx@2
  void *(*v5)(void *, const char *, ...); // r14@2
  void *v6; // rax@2
  void *v7; // r13@2
  void *v8; // rax@2
  void *v9; // r12@2
  void *(*v10)(void *, const char *, ...); // r14@3
  void *v11; // rbx@3
  const char *v12; // rsi@3
  void *v13; // rax@5
  void *v14; // rax@5
  void *v15; // rbx@5
  void *v16; // r15@6
  char *v17; // r14@6
  void *v18; // rax@6
  void *v19; // r12@6
  __int64 v20; // rax@6
  __int64 v21; // rbx@6
  __int64 v22; // rax@9
  char v23; // al@10
  const char *v24; // rsi@12
  void *(*v25)(void *, const char *, ...); // r14@16
  void *v26; // rax@16
  void *v27; // rax@16
  const char *v28; // rsi@16
  void *v29; // rax@17
  const char *v30; // rsi@20
  void *(*v31)(void *, const char *, ...); // r12@22
  void *v32; // r15@22
  void *v33; // rax@22
  void *v34; // rax@22
  void *v35; // [sp+10h] [bp-30h]@1

  LODWORD(v2) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAutoreleasePool, &msgRef_alloc__objc_msgSend_fixup);
  v3 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v35 = objc_msgSend_ptr(v2, selRef_init);
  if ( (unsigned int)v3(self, selRef_browserSelectionType) == 3 )
  {
    v4 = self->outlineViewBrowser;
    v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v6 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_selectedRow);
    v7 = v5((void *)v4, selRef_itemAtRow_, v6);
    v8 = v5((void *)self->serverLogPopUpButton, selRef_selectedItem);
    v9 = v5(v8, selRef_title);
    if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                            v9,
                            &msgRef_isEqualToString___objc_msgSend_fixup,
                            &cfstr_Ast_unittest_l) )
    {
      v10 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v11 = objc_msgSend_ptr(v7, selRef_activityLogPath);
      v12 = selRef_activityLogIndex;
    }
    else
    {
      v10 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v11 = objc_msgSend_ptr(v7, selRef_transactionLogPath);
      v12 = selRef_transactionLogIndex;
    }
    v13 = v10(v7, v12);
    v14 = v10(self, selRef_getLogAtPath_fromIndex_forServer_, v11, v13, v7);
    v15 = v14;
    if ( v14 )
    {
      v16 = v9;
      v17 = (char *)&msgRef_self__objc_msgSend_fixup + 1;
      LODWORD(v18) = msgRef_objectForKey___objc_msgSend_fixup(
                       v14,
                       &msgRef_objectForKey___objc_msgSend_fixup,
                       &cfstr_Isfulllog);
      v19 = v18;
      LODWORD(v20) = msgRef_objectForKey___objc_msgSend_fixup(
                       v15,
                       &msgRef_objectForKey___objc_msgSend_fixup,
                       &cfstr_Logcontents_1);
      v21 = v20;
      if ( v19 )
        LOBYTE(v17) = (unsigned __int64)objc_msgSend_ptr(v19, selRef_boolValue);
      v9 = v16;
      if ( v21 )
      {
        LODWORD(v22) = msgRef_length__objc_msgSend_fixup(v21, &msgRef_length__objc_msgSend_fixup);
        if ( v22 )
        {
          v23 = msgRef_isEqualToString___objc_msgSend_fixup(
                  v16,
                  &msgRef_isEqualToString___objc_msgSend_fixup,
                  &cfstr_Ast_unittest_l);
          if ( (_BYTE)v17 )
          {
            if ( v23 )
              v24 = selRef_setActivityLogContents_;
            else
              v24 = selRef_setTransactionLogContents_;
            objc_msgSend_ptr(v7, v24, v21);
          }
          else
          {
            if ( v23 )
            {
              v25 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
              v26 = objc_msgSend_ptr(v7, selRef_activityLogContents);
              v27 = v25(v26, selRef_stringByAppendingString_, v21);
              v28 = selRef_setActivityLogContents_;
            }
            else
            {
              v25 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
              v29 = objc_msgSend_ptr(v7, selRef_transactionLogContents);
              v27 = v25(v29, selRef_stringByAppendingString_, v21);
              v28 = selRef_setTransactionLogContents_;
            }
            v25(v7, v28, v27);
          }
        }
      }
    }
    if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                            v9,
                            &msgRef_isEqualToString___objc_msgSend_fixup,
                            &cfstr_Ast_unittest_l) )
      v30 = selRef_activityLogContents;
    else
      v30 = selRef_transactionLogContents;
    v31 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v32 = objc_msgSend_ptr(v7, v30);
    v33 = v31((void *)self->serverLogSearchField, selRef_stringValue);
    v34 = sub_100012F74(v32, v33);
    v31(
      self,
      selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
      selRef_fillServerTextViewWithString_,
      v34,
      1LL);
  }
  msgRef_release__objc_msgSend_fixup(v35, &msgRef_release__objc_msgSend_fixup);
}
// 1000262B8: using guessed type char *selRef_init;
// 100026410: using guessed type char *selRef_selectedItem;
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 100026470: using guessed type char *selRef_performSelectorOnMainThread_withObject_waitUntilDone_;
// 1000264E8: using guessed type char *selRef_browserSelectionType;
// 100026528: using guessed type char *selRef_stringValue;
// 100026628: using guessed type char *selRef_title;
// 100026668: using guessed type char *selRef_getLogAtPath_fromIndex_forServer_;
// 100026670: using guessed type char *selRef_boolValue;
// 100026688: using guessed type char *selRef_stringByAppendingString_;
// 100026698: using guessed type char *selRef_activityLogPath;
// 1000266A0: using guessed type char *selRef_activityLogIndex;
// 1000266A8: using guessed type char *selRef_transactionLogPath;
// 1000266B0: using guessed type char *selRef_transactionLogIndex;
// 1000266B8: using guessed type char *selRef_setActivityLogContents_;
// 1000266C0: using guessed type char *selRef_setTransactionLogContents_;
// 1000266C8: using guessed type char *selRef_activityLogContents;
// 1000266D0: using guessed type char *selRef_transactionLogContents;
// 1000266D8: using guessed type char *selRef_fillServerTextViewWithString_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (0000000100004612) ----------------------------------------------------
// GMAppController - (void)getMachineSearchList
void __cdecl -[GMAppController getMachineSearchList](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0
  __int64 v3; // ST00_8@1
  struct GMAppController *v4; // rbx@1
  void *v5; // rax@1
  void *(*v6)(void *, const char *, ...); // r15@1
  void *v7; // r14@1
  void *v8; // rax@1
  void *v9; // rax@1
  unsigned int v10; // eax@1
  struct NSDictionary *v11; // rdi@2
  __int64 v12; // rax@3
  __int64 v13; // r15@3
  void *v14; // rax@3
  void *v15; // r13@3
  __int64 v16; // rax@3
  __int64 v17; // r12@3
  __int64 v18; // rax@7
  void (*v19)(void *, const char *, ...); // r12@8
  void (*v20)(void *, const char *, ...); // r15@9

  v3 = v2;
  v4 = self;
  LODWORD(v5) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAutoreleasePool, &msgRef_alloc__objc_msgSend_fixup);
  v6 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v7 = objc_msgSend_ptr(v5, selRef_init, v3);
  v8 = v6((void *)self->searchFieldLogs, selRef_stringValue);
  v9 = v6((void *)classRef_NSDictionary, selRef_dictionaryWithObjectsAndKeys_, v8, &cfstr_Partialssn, 0LL);
  v10 = (unsigned __int64)v6(self, selRef_getGatewayDataForType_sendingData_, 12LL, v9);
  if ( v10 )
  {
    NSLog(&cfstr_Getgatewayda_3, v10);
  }
  else
  {
    v11 = self->dataDict;
    if ( v11 )
    {
      LODWORD(v12) = msgRef_objectForKey___objc_msgSend_fixup(
                       v11,
                       &msgRef_objectForKey___objc_msgSend_fixup,
                       &cfstr_Partialssn);
      v13 = v12;
      LODWORD(v14) = msgRef_objectForKey___objc_msgSend_fixup(
                       v4->dataDict,
                       &msgRef_objectForKey___objc_msgSend_fixup,
                       &cfstr_Searcherror);
      v15 = v14;
      LODWORD(v16) = msgRef_objectForKey___objc_msgSend_fixup(
                       v4->dataDict,
                       &msgRef_objectForKey___objc_msgSend_fixup,
                       &cfstr_Uutsfound);
      v17 = v16;
      if ( v15 && (unsigned int)objc_msgSend_ptr(v15, selRef_intValue) == 7 )
      {
        objc_msgSend_ptr(
          v4,
          selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
          selRef_showTooManyLogsFoundAlert_,
          v13,
          0LL);
      }
      else if ( !v17 || (LODWORD(v18) = msgRef_count__objc_msgSend_fixup(v17, &msgRef_count__objc_msgSend_fixup), v18) )
      {
        v20 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
        objc_msgSend_ptr(v4->searchResults, selRef_updateFromUutDict_, v4->dataDict);
        v20(v4, selRef_performSelectorOnMainThread_withObject_waitUntilDone_, selRef_updateSearchResultsView, 0LL, 1LL);
        v20(v4, selRef_getMachineLogList);
      }
      else
      {
        v19 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
        objc_msgSend_ptr(v4->searchResults, selRef_removeAllUuts);
        v19(v4, selRef_performSelectorOnMainThread_withObject_waitUntilDone_, selRef_updateSearchResultsView, 0LL, 0LL);
        v19(v4, selRef_performSelectorOnMainThread_withObject_waitUntilDone_, selRef_showNoLogsFoundAlert_, v13, 0LL);
      }
    }
  }
  msgRef_release__objc_msgSend_fixup(v7, &msgRef_release__objc_msgSend_fixup);
}
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 1000262B8: using guessed type char *selRef_init;
// 100026450: using guessed type char *selRef_intValue;
// 100026470: using guessed type char *selRef_performSelectorOnMainThread_withObject_waitUntilDone_;
// 1000264D0: using guessed type char *selRef_getMachineLogList;
// 100026528: using guessed type char *selRef_stringValue;
// 100026530: using guessed type char *selRef_dictionaryWithObjectsAndKeys_;
// 100026538: using guessed type char *selRef_getGatewayDataForType_sendingData_;
// 1000266E0: using guessed type char *selRef_showTooManyLogsFoundAlert_;
// 1000266E8: using guessed type char *selRef_removeAllUuts;
// 1000266F0: using guessed type char *selRef_updateSearchResultsView;
// 1000266F8: using guessed type char *selRef_showNoLogsFoundAlert_;
// 100026700: using guessed type char *selRef_updateFromUutDict_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 1000285C8: using guessed type __CFString cfstr_Getgatewayda_3;

//----- (0000000100004834) ----------------------------------------------------
// GMAppController - (void)getMachineLogList
void __cdecl -[GMAppController getMachineLogList](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0
  __int64 v3; // ST00_8@1
  void *v4; // rax@1
  void *(*v5)(void *, const char *, ...); // rbx@1
  void *v6; // r14@1
  void *v7; // rax@2
  void *v8; // rbx@2
  void *(*v9)(void *, const char *, ...); // r13@3
  void *v10; // rax@3
  void *v11; // rax@3
  unsigned int v12; // eax@3
  void (*v13)(void *, const char *, ...); // r12@5

  v3 = v2;
  LODWORD(v4) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAutoreleasePool, &msgRef_alloc__objc_msgSend_fixup);
  v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v6 = objc_msgSend_ptr(v4, selRef_init, v3);
  if ( (unsigned int)v5(self, selRef_browserSelectionType) == 4 )
  {
    v7 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_selectedItem);
    v8 = v7;
    if ( v7 )
    {
      v9 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v10 = objc_msgSend_ptr(v7, selRef_serialNumber);
      v11 = v9((void *)classRef_NSDictionary, selRef_dictionaryWithObjectsAndKeys_, v10, &cfstr_Serialnumber_1, 0LL);
      v12 = (unsigned __int64)v9(self, selRef_getGatewayDataForType_sendingData_, 7LL, v11);
      if ( v12 )
      {
        NSLog(&cfstr_Getgatewayda_4, v12);
      }
      else if ( self->dataDict )
      {
        v13 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
        objc_msgSend_ptr(v8, selRef_updateLogListFromLogsDict_);
        v13(self, selRef_performSelectorOnMainThread_withObject_waitUntilDone_, selRef_updateMachineLogsView_, v8, 1LL);
        v13(self, selRef_getMachineLog);
      }
    }
  }
  msgRef_release__objc_msgSend_fixup(v6, &msgRef_release__objc_msgSend_fixup);
}
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 1000262B8: using guessed type char *selRef_init;
// 100026410: using guessed type char *selRef_selectedItem;
// 100026470: using guessed type char *selRef_performSelectorOnMainThread_withObject_waitUntilDone_;
// 1000264D8: using guessed type char *selRef_getMachineLog;
// 1000264E8: using guessed type char *selRef_browserSelectionType;
// 100026530: using guessed type char *selRef_dictionaryWithObjectsAndKeys_;
// 100026538: using guessed type char *selRef_getGatewayDataForType_sendingData_;
// 100026708: using guessed type char *selRef_serialNumber;
// 100026710: using guessed type char *selRef_updateLogListFromLogsDict_;
// 100026718: using guessed type char *selRef_updateMachineLogsView_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100028608: using guessed type __CFString cfstr_Getgatewayda_4;

//----- (0000000100004979) ----------------------------------------------------
// GMAppController - (void)getMachineLog
void __cdecl -[GMAppController getMachineLog](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0
  __int64 v3; // ST00_8@1
  void *v4; // rax@1
  void *(*v5)(void *, const char *, ...); // rbx@1
  void *v6; // rax@1
  struct NSOutlineView *v7; // rbx@2
  void *(*v8)(void *, const char *, ...); // r14@2
  void *v9; // rax@2
  void *v10; // rax@2
  void *v11; // r15@2
  void *(*v12)(void *, const char *, ...); // r13@3
  void *v13; // rax@3
  void *v14; // rbx@3
  void *v15; // rax@4
  void *v16; // rax@4
  void *v17; // rbx@4
  struct GMGatewayInfo *v18; // r13@5
  void *(*v19)(void *, const char *, ...); // r14@5
  void *v20; // rax@5
  void *v21; // r13@5
  void *(*v22)(void *, const char *, ...); // r14@6
  void *v23; // rax@6
  void *v24; // rax@6
  __int64 v25; // rax@7
  __int64 v26; // rbx@7
  __int64 v27; // rax@8
  void *(*v28)(void *, const char *, ...); // rbx@10
  void *v29; // rax@10
  void *v30; // rax@10
  void (*v31)(void *, const char *, ...); // rbx@11
  void *v32; // rax@11
  __int64 v33; // [sp+0h] [bp-30h]@1

  v3 = v2;
  LODWORD(v4) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAutoreleasePool, &msgRef_alloc__objc_msgSend_fixup);
  v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v6 = objc_msgSend_ptr(v4, selRef_init, v3);
  if ( (unsigned int)v5(self, selRef_browserSelectionType, v6) == 4 )
  {
    v7 = self->outlineViewBrowser;
    v8 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v9 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_selectedRow);
    v10 = v8((void *)v7, selRef_itemAtRow_, v9);
    v11 = v10;
    if ( v10 )
    {
      v12 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v13 = objc_msgSend_ptr(v10, selRef_logList);
      v14 = v12(classRef_NSArray, selRef_arrayWithArray_, v13);
      if ( (signed __int64)v12((void *)self->machineLogTableView, selRef_selectedRow) >= 0 )
      {
        v15 = objc_msgSend_ptr((void *)self->machineLogTableView, selRef_selectedRow);
        LODWORD(v16) = msgRef_objectAtIndex___objc_msgSend_fixup(v14, &msgRef_objectAtIndex___objc_msgSend_fixup, v15);
        v17 = v16;
        if ( v16 )
        {
          v18 = self->gateway;
          v19 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
          v20 = objc_msgSend_ptr(v16, selRef_serverHostName);
          v21 = v19(v18, selRef_serverWithHostName_, v20);
          if ( v21 )
          {
            v22 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
            v23 = objc_msgSend_ptr(v17, selRef_logPath);
            v24 = v22(self, selRef_getLogAtPath_fromIndex_forServer_, v23, 0LL, v21);
            if ( v24 )
            {
              LODWORD(v25) = msgRef_objectForKey___objc_msgSend_fixup(
                               v24,
                               &msgRef_objectForKey___objc_msgSend_fixup,
                               &cfstr_Logcontents_1);
              v26 = v25;
              if ( v25
                && (LODWORD(v27) = msgRef_length__objc_msgSend_fixup(v25, &msgRef_length__objc_msgSend_fixup), v27) )
              {
                objc_msgSend_ptr(v11, selRef_setCurrentLog_, v26);
              }
              else
              {
                v28 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
                v29 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
                v30 = v28(v29, selRef_localizedStringForKey_value_table_, &cfstr_Klogfileempty, &stru_100028108, 0LL);
                v28(v11, selRef_setCurrentLog_, v30);
              }
              v31 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
              v32 = objc_msgSend_ptr(v11, selRef_currentLog);
              v31(
                self,
                selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
                selRef_fillMachineTextViewWithString_,
                v32,
                1LL);
            }
          }
        }
      }
    }
  }
  msgRef_release__objc_msgSend_fixup(v33, &msgRef_release__objc_msgSend_fixup);
}
// 1000262B8: using guessed type char *selRef_init;
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 100026470: using guessed type char *selRef_performSelectorOnMainThread_withObject_waitUntilDone_;
// 1000264E8: using guessed type char *selRef_browserSelectionType;
// 100026658: using guessed type char *selRef_logPath;
// 100026668: using guessed type char *selRef_getLogAtPath_fromIndex_forServer_;
// 100026720: using guessed type char *selRef_logList;
// 100026728: using guessed type char *selRef_arrayWithArray_;
// 100026730: using guessed type char *selRef_serverHostName;
// 100026738: using guessed type char *selRef_serverWithHostName_;
// 100026740: using guessed type char *selRef_setCurrentLog_;
// 100026748: using guessed type char *selRef_fillMachineTextViewWithString_;
// 100026750: using guessed type char *selRef_currentLog;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 1000273B0: using guessed type void *classRef_NSBundle;
// 100027410: using guessed type void *classRef_NSArray;
// 100028628: using guessed type __CFString cfstr_Klogfileempty;

//----- (0000000100004BD5) ----------------------------------------------------
// GMAppController - (id)getLogAtPath:(id) fromIndex:(uint64_t) forServer:(id) 
id __cdecl -[GMAppController getLogAtPath:fromIndex:forServer:](struct GMAppController *self, SEL a2, id a3, uint64_t a4, id a5)
{
  uint64_t v5; // r14@1
  id v6; // rbx@1
  void *v7; // rcx@1
  id result; // rax@1
  void *v9; // rcx@2

  v5 = a4;
  v6 = a3;
  v7 = objc_msgSend_ptr(a5, selRef_logProxy);
  result = 0LL;
  if ( v7 )
  {
    v9 = objc_msgSend_ptr(v7, selRef_getLogAndLengthAtPath_fromIndex_, v6, v5);
    result = 0LL;
    if ( v9 )
      result = (id)objc_msgSend_ptr((void *)classRef_NSDictionary, selRef_dictionaryWithDictionary_, v9);
  }
  return result;
}
// 100026620: using guessed type char *selRef_logProxy;
// 100026758: using guessed type char *selRef_getLogAndLengthAtPath_fromIndex_;
// 100026760: using guessed type char *selRef_dictionaryWithDictionary_;

//----- (0000000100004C82) ----------------------------------------------------
// GMAppController - (void)removeServerAtIndex:(id) 
void __cdecl -[GMAppController removeServerAtIndex:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  struct GMGatewayInfo *v4; // rbx@1
  void *v5; // rax@1

  v4 = self->gateway;
  v5 = objc_msgSend_ptr(a3, selRef_integerValue, v3);
  objc_msgSend_ptr(v4, selRef_removeServerAtIndex_, v5);
}
// 1000265B8: using guessed type char *selRef_removeServerAtIndex_;
// 100026768: using guessed type char *selRef_integerValue;

//----- (0000000100004CBF) ----------------------------------------------------
// GMAppController - (void)updateMachineListForServer:(id) 
void __cdecl -[GMAppController updateMachineListForServer:](struct GMAppController *self, SEL a2, id a3)
{
  objc_msgSend_ptr(a3, selRef_updateMachineStatus);
}
// 100026770: using guessed type char *selRef_updateMachineStatus;

//----- (0000000100004CD4) ----------------------------------------------------
// GMAppController - (void)saveLogAs:(id) 
void __cdecl -[GMAppController saveLogAs:](struct GMAppController *self, SEL a2, id a3)
{
  void *(*v3)(void *, const char *, ...); // rbx@1
  void *v4; // rax@1
  int v5; // eax@1
  struct NSView *v6; // rcx@1
  void *(*v7)(void *, const char *, ...); // r14@2
  void *v8; // rax@2
  void *v9; // r12@2
  _QWORD *v10; // rax@2
  const char *v11; // rsi@3
  _QWORD *v12; // rdx@4
  struct NSOutlineView *v13; // rbx@7
  void *(*v14)(void *, const char *, ...); // r14@7
  void *v15; // rax@7
  void *v16; // r13@7
  void *v17; // rax@7
  void *v18; // rbx@7
  void *v19; // rax@7
  const char *v20; // rsi@8
  struct NSOutlineView *v21; // rbx@13
  void *(*v22)(void *, const char *, ...); // r14@13
  void *v23; // rax@13
  void *v24; // rax@13
  void *(*v25)(void *, const char *, ...); // r14@14
  void *v26; // rax@14
  void *v27; // rbx@14
  void *v28; // rax@14
  void *v29; // rax@14
  void *v30; // rbx@14
  void *(*v31)(void *, const char *, ...); // r14@15
  void *v32; // rax@15
  void *v33; // rax@15
  void *v34; // rax@15
  void *v35; // rax@15
  void (*v36)(void *, const char *, ...); // r13@21
  void *v37; // rbx@21
  void *v38; // rax@21
  void *v39; // rax@21
  void *v40; // rax@21
  void *v41; // rax@21
  struct NSWindow *v42; // rdx@21
  void *v43; // [sp+8h] [bp-58h]@21
  int v44; // [sp+10h] [bp-50h]@21
  int v45; // [sp+14h] [bp-4Ch]@21
  void *(__fastcall *v46)(__int64, unsigned int); // [sp+18h] [bp-48h]@21
  void *v47; // [sp+20h] [bp-40h]@21
  struct GMAppController *v48; // [sp+28h] [bp-38h]@21
  void *v49; // [sp+30h] [bp-30h]@21

  v3 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v4 = objc_msgSend_ptr(classRef_NSArray, selRef_arrayWithObjects_, &cfstr_Log, 0LL);
  v5 = (unsigned __int64)v3(self, selRef_browserSelectionType, v4);
  v6 = self->currentSubView;
  if ( v6 == self->subViewGatewayLogs )
  {
    v7 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v8 = objc_msgSend_ptr(self->gateway, selRef_name);
    v9 = v7(classRef_NSString, selRef_stringWithFormat_, &cfstr____2, v8, &cfstr_Ast_controller);
    v10 = v7(self->gateway, selRef_logContents);
    goto LABEL_3;
  }
  if ( v6 != self->subViewServerLogs )
  {
    if ( v6 == self->subViewMachineLogs && v5 == 4 )
    {
      v21 = self->outlineViewBrowser;
      v22 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v23 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_selectedRow);
      v24 = v22((void *)v21, selRef_itemAtRow_, v23);
      v16 = v24;
      if ( v24 )
      {
        v25 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
        v26 = objc_msgSend_ptr(v24, selRef_logList);
        v27 = v25(classRef_NSArray, selRef_arrayWithArray_, v26);
        v28 = v25((void *)self->machineLogTableView, selRef_selectedRow);
        LODWORD(v29) = msgRef_objectAtIndex___objc_msgSend_fixup(v27, &msgRef_objectAtIndex___objc_msgSend_fixup, v28);
        v30 = v29;
        if ( v29 )
        {
          v31 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
          v32 = objc_msgSend_ptr(classRef_NSArray, selRef_arrayWithObjects_, &cfstr_Gw_log, 0LL);
          v33 = v31(v30, selRef_logPath, v32);
          v34 = v31(v33, selRef_lastPathComponent);
          v9 = v34;
          v35 = v31(v34, selRef_pathExtension);
          if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                                  v35,
                                  &msgRef_isEqualToString___objc_msgSend_fixup,
                                  &cfstr_Tmp) )
            v9 = objc_msgSend_ptr(v9, selRef_stringByDeletingPathExtension);
          v20 = selRef_currentLog;
          goto LABEL_9;
        }
      }
    }
LABEL_18:
    v9 = 0LL;
    v11 = selRef_setCurrentLog_;
    goto LABEL_19;
  }
  if ( v5 != 3 )
    goto LABEL_18;
  v13 = self->outlineViewBrowser;
  v14 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v15 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_selectedRow);
  v16 = v14((void *)v13, selRef_itemAtRow_, v15);
  v17 = v14((void *)self->serverLogPopUpButton, selRef_selectedItem);
  v18 = v14(v17, selRef_title);
  v19 = v14(v16, selRef_hostName);
  v9 = v14(classRef_NSString, selRef_stringWithFormat_, &cfstr____2, v19, v18);
  if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                          v18,
                          &msgRef_isEqualToString___objc_msgSend_fixup,
                          &cfstr_Ast_unittest_l) )
    v20 = selRef_activityLogContents;
  else
    v20 = selRef_transactionLogContents;
LABEL_9:
  v10 = objc_msgSend_ptr(v16, v20);
LABEL_3:
  v11 = selRef_setCurrentLog_;
  if ( v10 )
  {
    v12 = v10;
    goto LABEL_20;
  }
LABEL_19:
  v12 = &stru_100028108;
LABEL_20:
  objc_msgSend_ptr(self, v11, v12);
  if ( v9 )
  {
    v36 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    v37 = objc_msgSend_ptr(classRef_NSSavePanel, selRef_savePanel);
    v36(v37, selRef_setAllowedFileTypes_);
    v36(v37, selRef_setCanCreateDirectories_, 1LL);
    v36(v37, selRef_setCanSelectHiddenExtension_, 1LL);
    v36(v37, selRef_setExtensionHidden_, 0LL);
    v36(v37, selRef_setNameFieldStringValue_, v9);
    v38 = ((void *(*)(void *, const char *, ...))v36)(classRef_NSBundle, selRef_mainBundle);
    v39 = ((void *(*)(void *, const char *, ...))v36)(
            v38,
            selRef_localizedStringForKey_value_table_,
            &cfstr_Ksavelogastitl,
            &stru_100028108,
            0LL);
    v36(v37, selRef_setNameFieldLabel_, v39);
    v40 = ((void *(*)(void *, const char *, ...))v36)(classRef_NSBundle, selRef_mainBundle);
    v41 = ((void *(*)(void *, const char *, ...))v36)(
            v40,
            selRef_localizedStringForKey_value_table_,
            &cfstr_Ksavebutton,
            &stru_100028108,
            0LL);
    v36(v37, selRef_setPrompt_, v41);
    v36(v37, selRef_setTreatsFilePackagesAsDirectories_, 0LL);
    v36(v37, selRef_setAccessoryView_, 0LL);
    v42 = self->window;
    v43 = _NSConcreteStackBlock_ptr;
    v44 = 1107296256;
    v45 = 0;
    v46 = sub_100005156;
    v47 = &unk_100029E50;
    v48 = self;
    v49 = v37;
    v36(v37, selRef_beginSheetModalForWindow_completionHandler_, v42, &v43);
  }
}
// 100021078: using guessed type void *_NSConcreteStackBlock_ptr;
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 1000263A8: using guessed type char *selRef_stringWithFormat_;
// 100026410: using guessed type char *selRef_selectedItem;
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 1000264E8: using guessed type char *selRef_browserSelectionType;
// 100026628: using guessed type char *selRef_title;
// 100026658: using guessed type char *selRef_logPath;
// 100026680: using guessed type char *selRef_logContents;
// 1000266C8: using guessed type char *selRef_activityLogContents;
// 1000266D0: using guessed type char *selRef_transactionLogContents;
// 100026720: using guessed type char *selRef_logList;
// 100026728: using guessed type char *selRef_arrayWithArray_;
// 100026740: using guessed type char *selRef_setCurrentLog_;
// 100026750: using guessed type char *selRef_currentLog;
// 100026778: using guessed type char *selRef_arrayWithObjects_;
// 100026780: using guessed type char *selRef_name;
// 100026788: using guessed type char *selRef_hostName;
// 100026790: using guessed type char *selRef_lastPathComponent;
// 100026798: using guessed type char *selRef_pathExtension;
// 1000267A0: using guessed type char *selRef_stringByDeletingPathExtension;
// 1000267A8: using guessed type char *selRef_savePanel;
// 1000267B0: using guessed type char *selRef_setAllowedFileTypes_;
// 1000267B8: using guessed type char *selRef_setCanCreateDirectories_;
// 1000267C0: using guessed type char *selRef_setCanSelectHiddenExtension_;
// 1000267C8: using guessed type char *selRef_setExtensionHidden_;
// 1000267D0: using guessed type char *selRef_setNameFieldStringValue_;
// 1000267D8: using guessed type char *selRef_setNameFieldLabel_;
// 1000267E0: using guessed type char *selRef_setPrompt_;
// 1000267E8: using guessed type char *selRef_setTreatsFilePackagesAsDirectories_;
// 1000267F0: using guessed type char *selRef_setAccessoryView_;
// 100026800: using guessed type char *selRef_beginSheetModalForWindow_completionHandler_;
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 1000273B0: using guessed type void *classRef_NSBundle;
// 1000273C0: using guessed type void *classRef_NSString;
// 100027410: using guessed type void *classRef_NSArray;
// 100027418: using guessed type void *classRef_NSSavePanel;
// 100028188: using guessed type __CFString cfstr_Ast_controller;
// 100028668: using guessed type __CFString cfstr_Log;
// 100028688: using guessed type __CFString cfstr____2;
// 1000286A8: using guessed type __CFString cfstr_Gw_log;
// 1000286E8: using guessed type __CFString cfstr_Ksavelogastitl;
// 100028708: using guessed type __CFString cfstr_Ksavebutton;

//----- (0000000100005156) ----------------------------------------------------
void *__fastcall sub_100005156(__int64 a1, unsigned int a2)
{
  return objc_msgSend_ptr(
           *(void **)(a1 + 32),
           selRef_saveLogPanelDidEnd_returnCode_contextInfo_,
           *(_QWORD *)(a1 + 40),
           a2,
           0LL);
}
// 1000267F8: using guessed type char *selRef_saveLogPanelDidEnd_returnCode_contextInfo_;

//----- (0000000100005180) ----------------------------------------------------
void __fastcall sub_100005180(__int64 a1, __int64 a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 3);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 3);
}

//----- (00000001000051C0) ----------------------------------------------------
void __fastcall sub_1000051C0(__int64 a1)
{
  _Block_object_dispose(*(const void **)(a1 + 32), 3);
  _Block_object_dispose(*(const void **)(a1 + 40), 3);
}

//----- (00000001000051EB) ----------------------------------------------------
// GMAppController - (void)saveLogPanelDidEnd:(id) returnCode:(int) contextInfo:(void *) 
void __cdecl -[GMAppController saveLogPanelDidEnd:returnCode:contextInfo:](struct GMAppController *self, SEL a2, id a3, int a4, void *a5)
{
  void *v5; // rax@0
  id v6; // r14@1
  void *(*v7)(void *, const char *, ...); // r15@2
  void *v8; // rbx@2
  void *v9; // rax@2
  void *v10; // rax@2
  void *(*v11)(void *, const char *, ...); // r15@3
  void *v12; // rax@3
  void *v13; // rbx@3
  void *v14; // [sp+0h] [bp-20h]@1

  v14 = v5;
  v6 = a3;
  if ( a4 == 1 )
  {
    v14 = 0LL;
    v7 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v8 = objc_msgSend_ptr(self, selRef_currentLog, a3, 0LL);
    v9 = v7(v6, selRef_URL, 0LL);
    v10 = v7(v9, selRef_path, 0LL);
    v7(v8, selRef_writeToFile_atomically_encoding_error_, v10, 1LL, 4LL, &v14, 0LL);
    if ( v14 )
    {
      v11 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v12 = objc_msgSend_ptr(v6, selRef_URL, v14);
      v13 = v11(v12, selRef_path, v14);
      v11(v14, selRef_localizedDescription, v14);
      NSLog(&cfstr_ErrorWritingTo, v13);
    }
  }
}
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 100026750: using guessed type char *selRef_currentLog;
// 100026808: using guessed type char *selRef_URL;
// 100026810: using guessed type char *selRef_path;
// 100026818: using guessed type char *selRef_writeToFile_atomically_encoding_error_;
// 100026820: using guessed type char *selRef_localizedDescription;
// 100028728: using guessed type __CFString cfstr_ErrorWritingTo;

//----- (00000001000052AE) ----------------------------------------------------
// GMAppController - (void)pageSetup:(id) 
void __cdecl -[GMAppController pageSetup:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  void *(*v4)(void *, const char *, ...); // r15@1
  void *v5; // r14@1
  void *v6; // rax@1

  v4 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v5 = objc_msgSend_ptr(classRef_NSPageLayout, selRef_pageLayout, a3, v3);
  v6 = v4(classRef_NSPrintInfo, selRef_sharedPrintInfo);
  v4(
    v5,
    selRef_beginSheetWithPrintInfo_modalForWindow_delegate_didEndSelector_contextInfo_,
    v6,
    self->window,
    self,
    selRef_pageSetupDidEnd_returnCode_contextInfo_,
    0LL);
}
// 100026828: using guessed type char *selRef_pageLayout;
// 100026830: using guessed type char *selRef_sharedPrintInfo;
// 100026838: using guessed type char *selRef_pageSetupDidEnd_returnCode_contextInfo_;
// 100026840: using guessed type char *selRef_beginSheetWithPrintInfo_modalForWindow_delegate_didEndSelector_contextInfo_;
// 100027420: using guessed type void *classRef_NSPageLayout;
// 100027428: using guessed type void *classRef_NSPrintInfo;

//----- (000000010000531F) ----------------------------------------------------
// GMAppController - (void)pageSetupDidEnd:(id) returnCode:(int) contextInfo:(void *) 
void __cdecl -[GMAppController pageSetupDidEnd:returnCode:contextInfo:](struct GMAppController *self, SEL a2, id a3, int a4, void *a5)
{
  ;
}

//----- (0000000100005325) ----------------------------------------------------
// GMAppController - (void)printLog:(id) 
void __cdecl -[GMAppController printLog:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  void *v4; // rbx@1
  struct NSView *v5; // rax@1
  signed __int64 v6; // rax@2
  __int64 v7; // r15@7
  void *v8; // rbx@9

  v4 = objc_msgSend_ptr(classRef_NSPrintInfo, selRef_sharedPrintInfo, a3, v3);
  v5 = self->currentSubView;
  if ( v5 == self->subViewGatewayLogs )
  {
    v6 = 264LL;
  }
  else if ( v5 == self->subViewServerLogs )
  {
    v6 = 544LL;
  }
  else
  {
    if ( v5 != self->subViewMachineLogs )
      return;
    v6 = 640LL;
  }
  v7 = *(_QWORD *)&self->NSObject_opaque[v6];
  if ( v7 )
  {
    objc_msgSend_ptr(v4, selRef_setHorizontalPagination_, 1LL);
    objc_msgSend_ptr(v4, selRef_setTopMargin_, COERCE_DOUBLE(4632233691727265792LL));
    objc_msgSend_ptr(v4, selRef_setBottomMargin_, COERCE_DOUBLE(4632233691727265792LL));
    objc_msgSend_ptr(v4, selRef_setLeftMargin_, COERCE_DOUBLE(4632233691727265792LL));
    objc_msgSend_ptr(v4, selRef_setRightMargin_, COERCE_DOUBLE(4632233691727265792LL));
    objc_msgSend_ptr(v4, selRef_setHorizontallyCentered_, 0LL);
    objc_msgSend_ptr(v4, selRef_setVerticallyCentered_, 0LL);
    v8 = objc_msgSend_ptr(classRef_NSPrintOperation, selRef_printOperationWithView_printInfo_, v7, v4);
    objc_msgSend_ptr(v8, selRef_setShowsPrintPanel_, 1LL);
    objc_msgSend_ptr(
      v8,
      selRef_runOperationModalForWindow_delegate_didRunSelector_contextInfo_,
      self->window,
      self,
      0LL,
      0LL);
  }
}
// 100026830: using guessed type char *selRef_sharedPrintInfo;
// 100026848: using guessed type char *selRef_setHorizontalPagination_;
// 100026850: using guessed type char *selRef_setTopMargin_;
// 100026858: using guessed type char *selRef_setBottomMargin_;
// 100026860: using guessed type char *selRef_setLeftMargin_;
// 100026868: using guessed type char *selRef_setRightMargin_;
// 100026870: using guessed type char *selRef_setHorizontallyCentered_;
// 100026878: using guessed type char *selRef_setVerticallyCentered_;
// 100026880: using guessed type char *selRef_printOperationWithView_printInfo_;
// 100026888: using guessed type char *selRef_setShowsPrintPanel_;
// 100026890: using guessed type char *selRef_runOperationModalForWindow_delegate_didRunSelector_contextInfo_;
// 100027428: using guessed type void *classRef_NSPrintInfo;
// 100027430: using guessed type void *classRef_NSPrintOperation;

//----- (00000001000054A6) ----------------------------------------------------
// GMAppController - (void)searchForUut:(id) 
void __cdecl -[GMAppController searchForUut:](struct GMAppController *self, SEL a2, id a3)
{
  objc_msgSend_ptr((void *)self->window, selRef_makeFirstResponder_, self->searchFieldLogs);
}
// 100026898: using guessed type char *selRef_makeFirstResponder_;

//----- (00000001000054CE) ----------------------------------------------------
// GMAppController - (void)verifyGatewaySettings:(id) 
void __cdecl -[GMAppController verifyGatewaySettings:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  __int64 v4; // ST00_8@1
  void *(*v5)(void *, const char *, ...); // r14@1
  void *v6; // rax@1
  __int64 v7; // rax@1
  void (*v8)(void *, const char *, ...); // r14@2
  signed __int64 v9; // rax@2
  void *v10; // rax@3
  __int64 v11; // rax@3
  void *(*v12)(void *, const char *, ...); // r15@4
  void *v13; // r14@4
  void *v14; // rax@4
  void *v15; // rax@6
  __int64 v16; // rax@6
  void *(*v17)(void *, const char *, ...); // r15@7
  void *v18; // r14@7
  void *v19; // rax@7
  void *v20; // rax@9
  __int64 v21; // rax@9
  void *v22; // rax@10
  __int64 v23; // rax@10
  void *(*v24)(void *, const char *, ...); // r15@11
  void *v25; // r14@11
  void *v26; // rax@11

  v4 = v3;
  NSLog(&cfstr_Verifygatewa_1, a2);
  v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  objc_msgSend_ptr((void *)self->window, selRef_makeFirstResponder_, self->subViewNavTabCollection, v4);
  v6 = v5((void *)self->gwSetNameTextField, selRef_stringValue);
  LODWORD(v7) = msgRef_length__objc_msgSend_fixup(v6, &msgRef_length__objc_msgSend_fixup);
  if ( !v7 )
  {
    v8 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    objc_msgSend_ptr(self, selRef_showSaveVerifyAlert_message_, &cfstr_Kverifyincompl, &cfstr_Kverifynoident);
    v9 = 312LL;
LABEL_13:
    v8((void *)self->window, selRef_makeFirstResponder_, *(_QWORD *)&self->NSObject_opaque[v9]);
    NSLog(&cfstr_GatewaymgrSave, 0LL);
    return;
  }
  v10 = objc_msgSend_ptr((void *)self->gwSetAdminPassTextField, selRef_stringValue);
  LODWORD(v11) = msgRef_length__objc_msgSend_fixup(v10, &msgRef_length__objc_msgSend_fixup);
  if ( v11 )
  {
    v12 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v13 = objc_msgSend_ptr((void *)self->gwSetAdminPassTextField, selRef_stringValue);
    v14 = v12((void *)self->gwVerifyAdminPassTextField, selRef_stringValue);
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v13,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v14) )
    {
      v8 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      objc_msgSend_ptr(self, selRef_showSaveVerifyAlert_message_, &cfstr_Kverifypasswor, &cfstr_Kverifyadminpa);
      v9 = 320LL;
      goto LABEL_13;
    }
  }
  else
  {
    v15 = objc_msgSend_ptr((void *)self->gwSetUserPassTextField, selRef_stringValue);
    LODWORD(v16) = msgRef_length__objc_msgSend_fixup(v15, &msgRef_length__objc_msgSend_fixup);
    if ( v16 )
    {
      v17 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v18 = objc_msgSend_ptr((void *)self->gwSetUserPassTextField, selRef_stringValue);
      v19 = v17((void *)self->gwVerifyUserPassTextField, selRef_stringValue);
      if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                               v18,
                               &msgRef_isEqualToString___objc_msgSend_fixup,
                               v19) )
      {
        v8 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
        objc_msgSend_ptr(self, selRef_showSaveVerifyAlert_message_, &cfstr_Kverifypasswor, &cfstr_Kverifyuserpas);
        v9 = 336LL;
        goto LABEL_13;
      }
    }
    else
    {
      v20 = objc_msgSend_ptr((void *)self->gwSetRemoteIPTextField, selRef_stringValue);
      LODWORD(v21) = msgRef_length__objc_msgSend_fixup(v20, &msgRef_length__objc_msgSend_fixup);
      if ( v21 )
      {
        v22 = objc_msgSend_ptr((void *)self->gwSetACPassTextField, selRef_stringValue);
        LODWORD(v23) = msgRef_length__objc_msgSend_fixup(v22, &msgRef_length__objc_msgSend_fixup);
        if ( v23 )
        {
          v24 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
          v25 = objc_msgSend_ptr((void *)self->gwSetACPassTextField, selRef_stringValue);
          v26 = v24((void *)self->gwVerifyACPassTextField, selRef_stringValue);
          if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                                   v25,
                                   &msgRef_isEqualToString___objc_msgSend_fixup,
                                   v26) )
          {
            v8 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
            objc_msgSend_ptr(self, selRef_showSaveVerifyAlert_message_, &cfstr_Kverifypasswor, &cfstr_Kverifyacpassw);
            v9 = 384LL;
            goto LABEL_13;
          }
        }
      }
    }
  }
  NSLog(&cfstr_GatewaymgrSave, 1LL);
  objc_msgSend_ptr(self, selRef_saveGatewaySettings);
}
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 100026528: using guessed type char *selRef_stringValue;
// 100026898: using guessed type char *selRef_makeFirstResponder_;
// 1000268A0: using guessed type char *selRef_showSaveVerifyAlert_message_;
// 1000268A8: using guessed type char *selRef_saveGatewaySettings;
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100028748: using guessed type __CFString cfstr_Verifygatewa_1;
// 100028768: using guessed type __CFString cfstr_Kverifyincompl;
// 100028788: using guessed type __CFString cfstr_Kverifynoident;
// 1000287A8: using guessed type __CFString cfstr_Kverifypasswor;
// 1000287C8: using guessed type __CFString cfstr_Kverifyadminpa;
// 1000287E8: using guessed type __CFString cfstr_Kverifyuserpas;
// 100028808: using guessed type __CFString cfstr_Kverifyacpassw;
// 100028828: using guessed type __CFString cfstr_GatewaymgrSave;

//----- (00000001000057F2) ----------------------------------------------------
// GMAppController - (void)saveGatewaySettings
void __cdecl -[GMAppController saveGatewaySettings](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0
  struct GMGatewayInfo *v3; // r14@1
  void (*v4)(void *, const char *, ...); // r15@1
  void *v5; // rax@1
  void *v6; // rax@1
  __int64 v7; // rax@1
  struct GMGatewayInfo *v8; // r14@2
  void (*v9)(void *, const char *, ...); // r15@2
  void *v10; // rax@2
  void *v11; // rax@2
  struct NSTextField *v12; // r14@3
  void (*v13)(void *, const char *, ...); // r15@3
  void *v14; // rax@3
  void *v15; // rax@4
  __int64 v16; // rax@4
  struct GMGatewayInfo *v17; // r14@5
  void (*v18)(void *, const char *, ...); // r15@5
  void *v19; // rax@5
  void *v20; // rax@5
  struct NSTextField *v21; // r14@6
  void (*v22)(void *, const char *, ...); // r15@6
  void *v23; // rax@6
  void *(*v24)(void *, const char *, ...); // r15@7
  void *v25; // r14@7
  void *v26; // rax@7
  void *(*v27)(void *, const char *, ...); // r15@8
  void *v28; // r14@8
  void *v29; // rax@8
  void *(*v30)(void *, const char *, ...); // r15@9
  void *v31; // r14@9
  void *v32; // rax@9
  void *(*v33)(void *, const char *, ...); // r15@10
  void *v34; // r14@10
  void *v35; // rax@10
  void *v36; // rax@11
  struct NSTextField *v37; // r12@12
  void *(*v38)(void *, const char *, ...); // r13@12
  void *v39; // rax@12
  void *v40; // rax@12
  struct NSTextField *v41; // r12@12
  void *v42; // rax@12
  void *v43; // rax@12
  struct GMGatewayInfo *v44; // r14@13
  void (*v45)(void *, const char *, ...); // r15@13
  void *v46; // rax@13
  struct GMGatewayInfo *v47; // r14@13
  void *v48; // rax@13
  struct GMGatewayInfo *v49; // r14@13
  void *v50; // rax@13
  struct GMGatewayInfo *v51; // r14@13
  void *v52; // rax@13
  void *v53; // rax@13
  char *v54; // rsi@13
  __int64 v55; // rax@13
  struct GMGatewayInfo *v56; // r14@14
  void (*v57)(void *, const char *, ...); // r15@14
  void *v58; // rax@14

  v3 = self->gateway;
  v4 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  v5 = objc_msgSend_ptr((void *)self->gwSetNameTextField, selRef_stringValue, v2);
  v4(v3, selRef_setName_, v5);
  v6 = ((void *(*)(void *, const char *, ...))v4)((void *)self->gwSetAdminPassTextField, selRef_stringValue);
  LODWORD(v7) = msgRef_length__objc_msgSend_fixup(v6, &msgRef_length__objc_msgSend_fixup);
  if ( v7 )
  {
    v8 = self->gateway;
    v9 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    v10 = objc_msgSend_ptr((void *)self->gwSetAdminPassTextField, selRef_stringValue);
    v9(v8, selRef_setAdminPass_, v10);
    v11 = ((void *(*)(void *, const char *, ...))v9)((void *)self->loginUserPopUpButton, selRef_selectedItem);
    if ( ((void *(*)(void *, const char *, ...))v9)(v11, selRef_tag) == (void *)2 )
    {
      v12 = self->loginPasswordTextField;
      v13 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v14 = objc_msgSend_ptr((void *)self->gwSetAdminPassTextField, selRef_stringValue);
      v13((void *)v12, selRef_setStringValue_, v14);
    }
  }
  v15 = objc_msgSend_ptr((void *)self->gwSetUserPassTextField, selRef_stringValue);
  LODWORD(v16) = msgRef_length__objc_msgSend_fixup(v15, &msgRef_length__objc_msgSend_fixup);
  if ( v16 )
  {
    v17 = self->gateway;
    v18 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    v19 = objc_msgSend_ptr((void *)self->gwSetUserPassTextField, selRef_stringValue);
    v18(v17, selRef_setUserPass_, v19);
    v20 = ((void *(*)(void *, const char *, ...))v18)((void *)self->loginUserPopUpButton, selRef_selectedItem);
    if ( ((void *(*)(void *, const char *, ...))v18)(v20, selRef_tag) == (void *)1 )
    {
      v21 = self->loginPasswordTextField;
      v22 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v23 = objc_msgSend_ptr((void *)self->gwSetUserPassTextField, selRef_stringValue);
      v22((void *)v21, selRef_setStringValue_, v23);
    }
  }
  v24 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v25 = objc_msgSend_ptr((void *)self->gwSetRemoteIPTextField, selRef_stringValue);
  v26 = v24(self->gateway, selRef_appleIP);
  if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                           v25,
                           &msgRef_isEqualToString___objc_msgSend_fixup,
                           v26)
    || (v27 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr,
        v28 = objc_msgSend_ptr((void *)self->gwSetSiteIDTextField, selRef_stringValue),
        v29 = v27(self->gateway, selRef_siteID),
        !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                            v28,
                            &msgRef_isEqualToString___objc_msgSend_fixup,
                            v29))
    || (v30 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr,
        v31 = objc_msgSend_ptr((void *)self->gwSetShipToTextField, selRef_stringValue),
        v32 = v30(self->gateway, selRef_shipTo),
        !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                            v31,
                            &msgRef_isEqualToString___objc_msgSend_fixup,
                            v32))
    || (v33 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr,
        v34 = objc_msgSend_ptr((void *)self->gwSetACNameTextField, selRef_stringValue),
        v35 = v33(self->gateway, selRef_appleConnectName),
        !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                            v34,
                            &msgRef_isEqualToString___objc_msgSend_fixup,
                            v35))
    || (v36 = objc_msgSend_ptr((void *)self->gwSetACPassTextField, selRef_stringValue),
        !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                            v36,
                            &msgRef_isEqualToString___objc_msgSend_fixup,
                            &stru_100028108)) )
  {
    v37 = self->gwAdrAuthStatusTextField;
    v38 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v39 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
    v40 = v38(v39, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewayauthen, &stru_100028108, 0LL);
    v38((void *)v37, selRef_setStringValue_, v40);
    v41 = self->gwAuthStatusTextField;
    v42 = v38(classRef_NSBundle, selRef_mainBundle);
    v43 = v38(v42, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewayauthen, &stru_100028108, 0LL);
    v38((void *)v41, selRef_setStringValue_, v43);
    v38((void *)self->gwAdrAuthStatusImageView, selRef_setHidden_, 1LL);
    v38((void *)self->gwAdrAuthStatusProgress, selRef_startAnimation_, self);
  }
  v44 = self->gateway;
  v45 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  v46 = objc_msgSend_ptr((void *)self->gwSetRemoteIPTextField, selRef_stringValue);
  v45(v44, selRef_setAppleIP_, v46);
  v47 = self->gateway;
  v48 = ((void *(*)(void *, const char *, ...))v45)((void *)self->gwSetSiteIDTextField, selRef_stringValue);
  v45(v47, selRef_setSiteID_, v48);
  v49 = self->gateway;
  v50 = ((void *(*)(void *, const char *, ...))v45)((void *)self->gwSetShipToTextField, selRef_stringValue);
  v45(v49, selRef_setShipTo_, v50);
  v51 = self->gateway;
  v52 = ((void *(*)(void *, const char *, ...))v45)((void *)self->gwSetACNameTextField, selRef_stringValue);
  v45(v51, selRef_setAppleConnectName_, v52);
  v53 = ((void *(*)(void *, const char *, ...))v45)((void *)self->gwSetACPassTextField, selRef_stringValue);
  v54 = (char *)&msgRef_length__objc_msgSend_fixup;
  LODWORD(v55) = msgRef_length__objc_msgSend_fixup(v53, &msgRef_length__objc_msgSend_fixup);
  if ( v55 )
  {
    v56 = self->gateway;
    v57 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    v58 = objc_msgSend_ptr((void *)self->gwSetACPassTextField, selRef_stringValue);
    v54 = selRef_setAppleConnectPass_;
    v57(v56, selRef_setAppleConnectPass_, v58);
  }
  NSLog(&cfstr_GatewaymgrAddr, v54);
  objc_msgSend_ptr(self, selRef_addRequest_, 4LL);
  objc_msgSend_ptr(self, selRef_enableSaveRevertState_, 0LL);
}
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 100026390: using guessed type char *selRef_setStringValue_;
// 1000263F8: using guessed type char *selRef_setHidden_;
// 100026400: using guessed type char *selRef_startAnimation_;
// 100026410: using guessed type char *selRef_selectedItem;
// 100026418: using guessed type char *selRef_tag;
// 100026528: using guessed type char *selRef_stringValue;
// 1000268B0: using guessed type char *selRef_setName_;
// 1000268B8: using guessed type char *selRef_setAdminPass_;
// 1000268C0: using guessed type char *selRef_setUserPass_;
// 1000268C8: using guessed type char *selRef_appleIP;
// 1000268D0: using guessed type char *selRef_siteID;
// 1000268D8: using guessed type char *selRef_shipTo;
// 1000268E0: using guessed type char *selRef_appleConnectName;
// 1000268E8: using guessed type char *selRef_setAppleIP_;
// 1000268F0: using guessed type char *selRef_setSiteID_;
// 1000268F8: using guessed type char *selRef_setShipTo_;
// 100026900: using guessed type char *selRef_setAppleConnectName_;
// 100026908: using guessed type char *selRef_setAppleConnectPass_;
// 100026910: using guessed type char *selRef_addRequest_;
// 100026918: using guessed type char *selRef_enableSaveRevertState_;
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 1000273B0: using guessed type void *classRef_NSBundle;
// 100028848: using guessed type __CFString cfstr_Kgatewayauthen;
// 100028868: using guessed type __CFString cfstr_GatewaymgrAddr;

//----- (0000000100005D6D) ----------------------------------------------------
// GMAppController - (void)revertGatewaySettings:(id) 
void __cdecl -[GMAppController revertGatewaySettings:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0

  objc_msgSend_ptr(self, selRef_updateGatewaySettings, a3, v3);
  objc_msgSend_ptr(self, selRef_enableSaveRevertState_, 0LL);
}
// 100026918: using guessed type char *selRef_enableSaveRevertState_;
// 100026920: using guessed type char *selRef_updateGatewaySettings;

//----- (0000000100005DA1) ----------------------------------------------------
// GMAppController - (void)removeServer:(id) 
void __cdecl -[GMAppController removeServer:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  struct NSOutlineView *v4; // rbx@2
  void *(*v5)(void *, const char *, ...); // r15@2
  void *v6; // rax@2
  void *v7; // rax@2

  if ( (unsigned int)objc_msgSend_ptr(self, selRef_browserSelectionType, a3, v3) == 3 )
  {
    v4 = self->outlineViewBrowser;
    v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v6 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_selectedRow);
    v7 = v5((void *)v4, selRef_itemAtRow_, v6);
    if ( (unsigned int)v5(v7, selRef_status) == 3 )
      objc_msgSend_ptr(self, selRef_addRequest_, 8LL);
  }
}
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 1000264E8: using guessed type char *selRef_browserSelectionType;
// 100026910: using guessed type char *selRef_addRequest_;
// 100026928: using guessed type char *selRef_status;

//----- (0000000100005E2E) ----------------------------------------------------
// GMAppController - (void)disconnectServer:(id) 
void __cdecl -[GMAppController disconnectServer:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  struct NSOutlineView *v4; // rbx@2
  void *(*v5)(void *, const char *, ...); // r15@2
  void *v6; // rax@2
  void *v7; // rax@2
  signed __int64 v8; // rdx@3

  if ( (unsigned int)objc_msgSend_ptr(self, selRef_browserSelectionType, a3, v3) == 3 )
  {
    v4 = self->outlineViewBrowser;
    v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v6 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_selectedRow);
    v7 = v5((void *)v4, selRef_itemAtRow_, v6);
    if ( (unsigned int)v5(v7, selRef_status) )
      v8 = 7LL;
    else
      v8 = 6LL;
    objc_msgSend_ptr(self, selRef_addRequest_, v8);
  }
}
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 1000264E8: using guessed type char *selRef_browserSelectionType;
// 100026910: using guessed type char *selRef_addRequest_;
// 100026928: using guessed type char *selRef_status;

//----- (0000000100005EC1) ----------------------------------------------------
// GMAppController - (void)changeServerInterface:(id) 
void __cdecl -[GMAppController changeServerInterface:](struct GMAppController *self, SEL a2, id a3)
{
  struct NSOutlineView *v3; // rbx@2
  void *(*v4)(void *, const char *, ...); // r12@2
  void *v5; // rax@2
  void *v6; // rbx@2
  void *v7; // rax@2
  void *v8; // r15@2
  void *v9; // rax@2
  __int64 v10; // rax@2
  void *(*v11)(void *, const char *, ...); // r12@3
  void *v12; // rax@3
  void *v13; // rax@3

  if ( (unsigned int)objc_msgSend_ptr(self, selRef_browserSelectionType, a3) == 3 )
  {
    v3 = self->outlineViewBrowser;
    v4 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v5 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_selectedRow);
    v6 = v4((void *)v3, selRef_itemAtRow_, v5);
    v7 = v4((void *)self->serverInterfacePopUpButton, selRef_selectedItem);
    v8 = v4(v7, selRef_title);
    v9 = v4(v6, selRef_pendingInterface);
    LODWORD(v10) = msgRef_length__objc_msgSend_fixup(v9, &msgRef_length__objc_msgSend_fixup);
    if ( v10 )
    {
      v11 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v12 = objc_msgSend_ptr(v6, selRef_pendingInterface);
      v13 = v11(v6, selRef_descriptionForInterfaceWithName_, v12);
    }
    else
    {
      v13 = objc_msgSend_ptr(v6, selRef_networkInterface);
    }
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v8,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v13) )
      objc_msgSend_ptr(self, selRef_showSaveInterfaceAlert_, v6);
  }
}
// 100026410: using guessed type char *selRef_selectedItem;
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 1000264E8: using guessed type char *selRef_browserSelectionType;
// 100026628: using guessed type char *selRef_title;
// 100026930: using guessed type char *selRef_pendingInterface;
// 100026938: using guessed type char *selRef_descriptionForInterfaceWithName_;
// 100026940: using guessed type char *selRef_networkInterface;
// 100026948: using guessed type char *selRef_showSaveInterfaceAlert_;
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (0000000100005FD2) ----------------------------------------------------
// GMAppController - (void)showServerLog:(id) 
void __cdecl -[GMAppController showServerLog:](struct GMAppController *self, SEL a2, id a3)
{
  objc_msgSend_ptr(self, selRef_showLogs, a3);
}
// 100026950: using guessed type char *selRef_showLogs;

//----- (0000000100005FE4) ----------------------------------------------------
// GMAppController - (void)changeMachineLogView:(id) 
void __cdecl -[GMAppController changeMachineLogView:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  struct NSOutlineView *v4; // rbx@1
  void *(*v5)(void *, const char *, ...); // r15@1
  void *v6; // rax@1
  void *v7; // rbx@1
  __int64 v8; // rax@1
  void *v9; // rax@4

  v4 = self->outlineViewBrowser;
  v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v6 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_selectedRow, a3, v3);
  v7 = v5((void *)v4, selRef_itemAtRow_, v6);
  LODWORD(v8) = msgRef_self__objc_msgSend_fixup(classRef_GMMachineInfo, &msgRef_self__objc_msgSend_fixup);
  if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(v7, &msgRef_isKindOfClass___objc_msgSend_fixup, v8) )
  {
    if ( v7 )
    {
      v9 = objc_msgSend_ptr(v7, selRef_currentLog);
      objc_msgSend_ptr(self, selRef_fillMachineTextViewWithString_, v9);
    }
  }
}
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 100026748: using guessed type char *selRef_fillMachineTextViewWithString_;
// 100026750: using guessed type char *selRef_currentLog;
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010000608E) ----------------------------------------------------
// GMAppController - (void)searchFieldChanged:(id) 
void __cdecl -[GMAppController searchFieldChanged:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  void *v4; // rax@1
  __int64 v5; // rax@1
  struct NSOutlineView *v6; // r14@2
  void (*v7)(void *, const char *, ...); // r15@2
  void *v8; // rax@2
  void (*v9)(void *, const char *, ...); // r14@3
  void *v10; // rax@3

  v4 = objc_msgSend_ptr((void *)self->searchFieldLogs, selRef_stringValue, a3, v3);
  LODWORD(v5) = msgRef_length__objc_msgSend_fixup(v4, &msgRef_length__objc_msgSend_fixup);
  if ( v5 )
  {
    objc_msgSend_ptr((void *)self->window, selRef_makeFirstResponder_, self->outlineViewBrowser);
    objc_msgSend_ptr(self, selRef_addRequest_, 12LL);
  }
  else
  {
    v6 = self->outlineViewBrowser;
    v7 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    v8 = objc_msgSend_ptr(classRef_NSArray, selRef_arrayWithObjects_, self->gateway, 0LL);
    v7((void *)v6, selRef_selectItems_byExtendingSelection_, v8, 0LL);
    if ( (signed __int64)((void *(*)(void *, const char *, ...))v7)(self->searchResults, selRef_numberOfUUTs) > 0 )
    {
      v9 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v10 = objc_msgSend_ptr(self->searchResults, selRef_uutList);
      v9(v10, selRef_removeAllObjects);
      v9((void *)self->outlineViewBrowser, selRef_reloadData);
    }
  }
}
// 100026528: using guessed type char *selRef_stringValue;
// 1000265D0: using guessed type char *selRef_reloadData;
// 100026778: using guessed type char *selRef_arrayWithObjects_;
// 100026898: using guessed type char *selRef_makeFirstResponder_;
// 100026910: using guessed type char *selRef_addRequest_;
// 100026958: using guessed type char *selRef_selectItems_byExtendingSelection_;
// 100026960: using guessed type char *selRef_numberOfUUTs;
// 100026968: using guessed type char *selRef_uutList;
// 100026970: using guessed type char *selRef_removeAllObjects;
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027410: using guessed type void *classRef_NSArray;

//----- (000000010000620C) ----------------------------------------------------
// GMAppController - (void)showInvalidPasswordAlert
void __cdecl -[GMAppController showInvalidPasswordAlert](struct GMAppController *self, SEL a2)
{
  void *(*v2)(void *, const char *, ...); // r15@1
  void *v3; // rax@1
  void *v4; // ST30_8@1
  void *v5; // rax@1
  void *v6; // ST28_8@1
  void *v7; // rax@1
  void *v8; // r14@1
  struct NSWindow *v9; // rbx@1
  void *v10; // rax@1

  v2 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v3 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
  v4 = v2(v3, selRef_localizedStringForKey_value_table_, &cfstr_Kinvalidpasswo, &stru_100028108, 0LL);
  v5 = v2(classRef_NSBundle, selRef_mainBundle);
  v6 = v2(v5, selRef_localizedStringForKey_value_table_, &cfstr_Kokaybutton, &stru_100028108, 0LL);
  v7 = v2(classRef_NSBundle, selRef_mainBundle);
  v8 = v2(v7, selRef_localizedStringForKey_value_table_, &cfstr_Kquitbutton, &stru_100028108, 0LL);
  v9 = self->window;
  v10 = v2(classRef_NSBundle, selRef_mainBundle);
  v2(v10, selRef_localizedStringForKey_value_table_, &cfstr_Kinvalidpass_1, &stru_100028108, 0LL);
  NSBeginAlertSheet(v4, v6, v8, 0LL, v9, self);
}
// 100015EB4: using guessed type int __fastcall NSBeginAlertSheet(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 1000273B0: using guessed type void *classRef_NSBundle;
// 1000288A8: using guessed type __CFString cfstr_Kinvalidpasswo;
// 1000288C8: using guessed type __CFString cfstr_Kokaybutton;
// 1000288E8: using guessed type __CFString cfstr_Kquitbutton;
// 100028908: using guessed type __CFString cfstr_Kinvalidpass_1;

//----- (000000010000633E) ----------------------------------------------------
// GMAppController - (void)showReAuthenticationAlert
void __cdecl -[GMAppController showReAuthenticationAlert](struct GMAppController *self, SEL a2)
{
  void *(*v2)(void *, const char *, ...); // r15@1
  void *v3; // rax@1
  void *v4; // ST30_8@1
  void *v5; // rax@1
  void *v6; // ST28_8@1
  void *v7; // rax@1
  void *v8; // r14@1
  struct NSWindow *v9; // rbx@1
  void *v10; // rax@1

  v2 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v3 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
  v4 = v2(v3, selRef_localizedStringForKey_value_table_, &cfstr_Kreauthenticat, &stru_100028108, 0LL);
  v5 = v2(classRef_NSBundle, selRef_mainBundle);
  v6 = v2(v5, selRef_localizedStringForKey_value_table_, &cfstr_Kokaybutton, &stru_100028108, 0LL);
  v7 = v2(classRef_NSBundle, selRef_mainBundle);
  v8 = v2(v7, selRef_localizedStringForKey_value_table_, &cfstr_Kquitbutton, &stru_100028108, 0LL);
  v9 = self->window;
  v10 = v2(classRef_NSBundle, selRef_mainBundle);
  v2(v10, selRef_localizedStringForKey_value_table_, &cfstr_Kreauthentic_1, &stru_100028108, 0LL);
  NSBeginAlertSheet(v4, v6, v8, 0LL, v9, self);
}
// 100015EB4: using guessed type int __fastcall NSBeginAlertSheet(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 1000273B0: using guessed type void *classRef_NSBundle;
// 1000288C8: using guessed type __CFString cfstr_Kokaybutton;
// 1000288E8: using guessed type __CFString cfstr_Kquitbutton;
// 100028928: using guessed type __CFString cfstr_Kreauthenticat;
// 100028948: using guessed type __CFString cfstr_Kreauthentic_1;

//----- (0000000100006470) ----------------------------------------------------
// GMAppController - (void)passwordAlertDidEnd:(id) returnCode:(int) contextInfo:(void *) 
// local variable allocation has failed, the output may be wrong!
void __cdecl -[GMAppController passwordAlertDidEnd:returnCode:contextInfo:](struct GMAppController *self, SEL a2, id a3, int a4, void *a5)
{
  if ( a4 )
  {
    if ( a4 == 1 )
      objc_msgSend_ptr(self, selRef_showLoginSheet, a3, *(_QWORD *)&a4);
  }
  else
  {
    objc_msgSend_ptr(*(void **)NSApp_ptr, selRef_terminate_, self, NSApp_ptr);
  }
}
// 100006470: variables would overlap: ecx.4 and rcx.8
// 100021038: using guessed type void *NSApp_ptr;
// 100026468: using guessed type char *selRef_showLoginSheet;
// 100026980: using guessed type char *selRef_terminate_;

//----- (00000001000064AE) ----------------------------------------------------
// GMAppController - (void)showSaveVerifyAlert:(id) message:(id) 
void __cdecl -[GMAppController showSaveVerifyAlert:message:](struct GMAppController *self, SEL a2, id a3, id a4)
{
  id v4; // ST30_8@1
  id v5; // rbx@1
  void *(*v6)(void *, const char *, ...); // r15@1
  void *v7; // rax@1
  void *v8; // ST28_8@1
  void *v9; // rax@1
  void *v10; // r14@1
  struct NSWindow *v11; // rbx@1
  void *v12; // rax@1

  v4 = a4;
  v5 = a3;
  v6 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v7 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
  v8 = v6(v7, selRef_localizedStringForKey_value_table_, v5, &stru_100028108, 0LL);
  v9 = v6(classRef_NSBundle, selRef_mainBundle);
  v10 = v6(v9, selRef_localizedStringForKey_value_table_, &cfstr_Kokaybutton, &stru_100028108, 0LL);
  v11 = self->window;
  v12 = v6(classRef_NSBundle, selRef_mainBundle);
  v6(v12, selRef_localizedStringForKey_value_table_, v4, &stru_100028108);
  NSBeginAlertSheet(v8, v10, 0LL, 0LL, v11, self);
}
// 100015EB4: using guessed type int __fastcall NSBeginAlertSheet(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 1000273B0: using guessed type void *classRef_NSBundle;
// 1000288C8: using guessed type __CFString cfstr_Kokaybutton;

//----- (00000001000065AD) ----------------------------------------------------
// GMAppController - (void)showSaveChangesAlert:(void *) 
void __cdecl -[GMAppController showSaveChangesAlert:](struct GMAppController *self, SEL a2, void *a3)
{
  void *(*v3)(void *, const char *, ...); // r12@1
  void *v4; // rax@1
  void *v5; // ST38_8@1
  void *v6; // rax@1
  void *v7; // ST30_8@1
  void *v8; // rax@1
  void *v9; // ST28_8@1
  void *v10; // rax@1
  void *v11; // r15@1
  struct NSWindow *v12; // r13@1
  void *v13; // rax@1

  v3 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v4 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
  v5 = v3(v4, selRef_localizedStringForKey_value_table_, &cfstr_Ksavechangesal, &stru_100028108, 0LL);
  v6 = v3(classRef_NSBundle, selRef_mainBundle);
  v7 = v3(v6, selRef_localizedStringForKey_value_table_, &cfstr_Ksavebutton, &stru_100028108, 0LL);
  v8 = v3(classRef_NSBundle, selRef_mainBundle);
  v9 = v3(v8, selRef_localizedStringForKey_value_table_, &cfstr_Kdontsavebutto, &stru_100028108, 0LL);
  v10 = v3(classRef_NSBundle, selRef_mainBundle);
  v11 = v3(v10, selRef_localizedStringForKey_value_table_, &cfstr_Kcancelbutton, &stru_100028108, 0LL);
  v12 = self->window;
  v13 = v3(classRef_NSBundle, selRef_mainBundle);
  v3(v13, selRef_localizedStringForKey_value_table_, &cfstr_Ksavechanges_1, &stru_100028108, 0LL);
  NSBeginAlertSheet(v5, v7, v9, v11, v12, self);
}
// 100015EB4: using guessed type int __fastcall NSBeginAlertSheet(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 1000273B0: using guessed type void *classRef_NSBundle;
// 100028708: using guessed type __CFString cfstr_Ksavebutton;
// 100028968: using guessed type __CFString cfstr_Ksavechangesal;
// 100028988: using guessed type __CFString cfstr_Kdontsavebutto;
// 1000289A8: using guessed type __CFString cfstr_Kcancelbutton;
// 1000289C8: using guessed type __CFString cfstr_Ksavechanges_1;

//----- (0000000100006714) ----------------------------------------------------
// GMAppController - (void)saveChangesAlertDidEnd:(id) returnCode:(int) contextInfo:(void *) 
void __cdecl -[GMAppController saveChangesAlertDidEnd:returnCode:contextInfo:](struct GMAppController *self, SEL a2, id a3, int a4, void *a5)
{
  struct GMAppController *v5; // rbx@1
  void (*v6)(void *, const char *, ...); // r15@3
  __int64 v7; // rax@4
  __int64 v8; // rax@6
  void (*v9)(void *, const char *, ...); // r15@7
  unsigned int v10; // eax@7
  struct NSOutlineView *v11; // r15@11
  void (*v12)(void *, const char *, ...); // r12@11
  void *v13; // rax@11
  __int64 v14; // rax@13
  void *(*v15)(void *, const char *, ...); // r12@14
  void *v16; // r15@14
  __int64 v17; // rax@14
  void *v18; // rax@14

  v5 = (struct GMAppController *)a5;
  if ( !a4 )
  {
    objc_msgSend_ptr(self, selRef_enableSaveRevertState_, 0LL);
    if ( v5 && self == v5 )
      goto LABEL_5;
    if ( !v5 )
    {
LABEL_11:
      v11 = self->outlineViewBrowser;
      v12 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v13 = objc_msgSend_ptr(classRef_NSArray, selRef_arrayWithObjects_, v5, 0LL);
      v12((void *)v11, selRef_selectItems_byExtendingSelection_, v13, 0LL);
      goto LABEL_15;
    }
LABEL_6:
    LODWORD(v8) = msgRef_self__objc_msgSend_fixup(classRef_GMNavigationTab, &msgRef_self__objc_msgSend_fixup);
    if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(v5, &msgRef_isKindOfClass___objc_msgSend_fixup, v8) )
    {
      v9 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v10 = (unsigned __int64)objc_msgSend_ptr(v5, selRef_type);
      v9(self, selRef_showSelectedTabView_, v10);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  if ( a4 == 1 )
  {
    v6 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    objc_msgSend_ptr(self, selRef_verifyGatewaySettings_, self);
    v6(self, selRef_enableSaveRevertState_, 0LL);
    if ( !v5 )
      goto LABEL_11;
    LODWORD(v7) = msgRef_self__objc_msgSend_fixup(classRef_GMAppController, &msgRef_self__objc_msgSend_fixup);
    if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(v5, &msgRef_isKindOfClass___objc_msgSend_fixup, v7) )
    {
LABEL_5:
      objc_msgSend_ptr(*(void **)NSApp_ptr, selRef_terminate_, self);
      goto LABEL_15;
    }
    goto LABEL_6;
  }
  if ( a5 )
  {
    LODWORD(v14) = msgRef_self__objc_msgSend_fixup(classRef_GMNavigationTab, &msgRef_self__objc_msgSend_fixup);
    if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(v5, &msgRef_isKindOfClass___objc_msgSend_fixup, v14) )
    {
      v15 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v16 = objc_msgSend_ptr(self->navTabViewController, selRef_arrayController);
      LODWORD(v17) = msgRef_objectAtIndex___objc_msgSend_fixup(
                       self->gatewayNavTabList,
                       &msgRef_objectAtIndex___objc_msgSend_fixup,
                       2LL);
      v18 = v15(classRef_NSArray, selRef_arrayWithObject_, v17);
      v15(v16, selRef_setSelectedObjects_, v18);
    }
  }
LABEL_15:
  self->showingSheet = 0;
}
// 100021038: using guessed type void *NSApp_ptr;
// 1000263D8: using guessed type char *selRef_arrayController;
// 100026420: using guessed type char *selRef_type;
// 100026778: using guessed type char *selRef_arrayWithObjects_;
// 100026918: using guessed type char *selRef_enableSaveRevertState_;
// 100026958: using guessed type char *selRef_selectItems_byExtendingSelection_;
// 100026980: using guessed type char *selRef_terminate_;
// 100026990: using guessed type char *selRef_verifyGatewaySettings_;
// 100026998: using guessed type char *selRef_showSelectedTabView_;
// 1000269A0: using guessed type char *selRef_arrayWithObject_;
// 1000269A8: using guessed type char *selRef_setSelectedObjects_;
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027410: using guessed type void *classRef_NSArray;

//----- (0000000100006914) ----------------------------------------------------
// GMAppController - (void)showSaveInterfaceAlert:(void *) 
void __cdecl -[GMAppController showSaveInterfaceAlert:](struct GMAppController *self, SEL a2, void *a3)
{
  void *(*v3)(void *, const char *, ...); // r13@1
  void *v4; // rax@1
  void *v5; // ST28_8@1
  void *v6; // rax@1
  void *v7; // ST20_8@1
  void *v8; // rax@1
  void *v9; // r15@1
  struct NSWindow *v10; // r14@1
  void *v11; // rax@1

  self->showingSheet = 1;
  v3 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v4 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
  v5 = v3(v4, selRef_localizedStringForKey_value_table_, &cfstr_Ksaveinterface, &stru_100028108, 0LL);
  v6 = v3(classRef_NSBundle, selRef_mainBundle);
  v7 = v3(v6, selRef_localizedStringForKey_value_table_, &cfstr_Ksavebutton, &stru_100028108, 0LL);
  v8 = v3(classRef_NSBundle, selRef_mainBundle);
  v9 = v3(v8, selRef_localizedStringForKey_value_table_, &cfstr_Kcancelbutton, &stru_100028108, 0LL);
  v10 = self->window;
  v11 = v3(classRef_NSBundle, selRef_mainBundle);
  v3(v11, selRef_localizedStringForKey_value_table_, &cfstr_Ksaveinterfa_1, &stru_100028108, 0LL);
  NSBeginAlertSheet(v5, v7, v9, 0LL, v10, self);
}
// 100015EB4: using guessed type int __fastcall NSBeginAlertSheet(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 1000273B0: using guessed type void *classRef_NSBundle;
// 100028708: using guessed type __CFString cfstr_Ksavebutton;
// 1000289A8: using guessed type __CFString cfstr_Kcancelbutton;
// 1000289E8: using guessed type __CFString cfstr_Ksaveinterface;
// 100028A08: using guessed type __CFString cfstr_Ksaveinterfa_1;

//----- (0000000100006A52) ----------------------------------------------------
// GMAppController - (void)saveInterfaceAlertDidEnd:(id) returnCode:(int) contextInfo:(void *) 
// local variable allocation has failed, the output may be wrong!
void __cdecl -[GMAppController saveInterfaceAlertDidEnd:returnCode:contextInfo:](struct GMAppController *self, SEL a2, id a3, int a4, void *a5)
{
  __int64 v5; // rax@0

  if ( a4 == 1 )
    objc_msgSend_ptr(self, selRef_addRequest_, 9LL, *(_QWORD *)&a4, v5);
  else
    objc_msgSend_ptr(self, selRef_resetNetworkInterfacesPopUp_, a5, v5);
  self->showingSheet = 0;
}
// 100006A52: variables would overlap: ecx.4 and rcx.8
// 100026648: using guessed type char *selRef_resetNetworkInterfacesPopUp_;
// 100026910: using guessed type char *selRef_addRequest_;

//----- (0000000100006A9C) ----------------------------------------------------
// GMAppController - (void)showInvalidInterfaceAlert:(id) 
void __cdecl -[GMAppController showInvalidInterfaceAlert:](struct GMAppController *self, SEL a2, id a3)
{
  void *(*v3)(void *, const char *, ...); // r15@1
  void *v4; // rax@1
  void *v5; // ST28_8@1
  void *v6; // rax@1
  void *v7; // r14@1
  struct NSWindow *v8; // rbx@1
  void *v9; // rax@1

  v3 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v4 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
  v5 = v3(v4, selRef_localizedStringForKey_value_table_, &cfstr_Kinvalidinterf, &stru_100028108, 0LL);
  v6 = v3(classRef_NSBundle, selRef_mainBundle);
  v7 = v3(v6, selRef_localizedStringForKey_value_table_, &cfstr_Kokaybutton, &stru_100028108, 0LL);
  v8 = self->window;
  v9 = v3(classRef_NSBundle, selRef_mainBundle);
  v3(v9, selRef_localizedStringForKey_value_table_, &cfstr_Kinvalidinte_1, &stru_100028108, 0LL);
  NSBeginAlertSheet(v5, v7, 0LL, 0LL, v8, self);
}
// 100015EB4: using guessed type int __fastcall NSBeginAlertSheet(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 1000273B0: using guessed type void *classRef_NSBundle;
// 1000288C8: using guessed type __CFString cfstr_Kokaybutton;
// 100028A28: using guessed type __CFString cfstr_Kinvalidinterf;
// 100028A48: using guessed type __CFString cfstr_Kinvalidinte_1;

//----- (0000000100006BA8) ----------------------------------------------------
// GMAppController - (void)showNoLogsFoundAlert:(id) 
void __cdecl -[GMAppController showNoLogsFoundAlert:](struct GMAppController *self, SEL a2, id a3)
{
  void *(*v3)(void *, const char *, ...); // r15@1
  void *v4; // rax@1
  void *v5; // ST28_8@1
  void *v6; // rax@1
  void *v7; // r14@1
  struct NSWindow *v8; // rbx@1
  void *v9; // rax@1

  v3 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v4 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
  v5 = v3(v4, selRef_localizedStringForKey_value_table_, &cfstr_Knologsfoundti, &stru_100028108, 0LL);
  v6 = v3(classRef_NSBundle, selRef_mainBundle);
  v7 = v3(v6, selRef_localizedStringForKey_value_table_, &cfstr_Kokaybutton, &stru_100028108, 0LL);
  v8 = self->window;
  v9 = v3(classRef_NSBundle, selRef_mainBundle);
  v3(v9, selRef_localizedStringForKey_value_table_, &cfstr_Knologsfoundme, &stru_100028108, 0LL);
  NSBeginAlertSheet(v5, v7, 0LL, 0LL, v8, self);
}
// 100015EB4: using guessed type int __fastcall NSBeginAlertSheet(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 1000273B0: using guessed type void *classRef_NSBundle;
// 1000288C8: using guessed type __CFString cfstr_Kokaybutton;
// 100028A68: using guessed type __CFString cfstr_Knologsfoundti;
// 100028A88: using guessed type __CFString cfstr_Knologsfoundme;

//----- (0000000100006CB4) ----------------------------------------------------
// GMAppController - (void)showTooManyLogsFoundAlert:(id) 
void __cdecl -[GMAppController showTooManyLogsFoundAlert:](struct GMAppController *self, SEL a2, id a3)
{
  void *(*v3)(void *, const char *, ...); // r15@1
  void *v4; // rax@1
  void *v5; // ST28_8@1
  void *v6; // rax@1
  void *v7; // r14@1
  struct NSWindow *v8; // rbx@1
  void *v9; // rax@1

  v3 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v4 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
  v5 = v3(v4, selRef_localizedStringForKey_value_table_, &cfstr_Ktoomanylogsfo, &stru_100028108, 0LL);
  v6 = v3(classRef_NSBundle, selRef_mainBundle);
  v7 = v3(v6, selRef_localizedStringForKey_value_table_, &cfstr_Kokaybutton, &stru_100028108, 0LL);
  v8 = self->window;
  v9 = v3(classRef_NSBundle, selRef_mainBundle);
  v3(v9, selRef_localizedStringForKey_value_table_, &cfstr_Ktoomanylogs_1, &stru_100028108, 0LL);
  NSBeginAlertSheet(v5, v7, 0LL, 0LL, v8, self);
}
// 100015EB4: using guessed type int __fastcall NSBeginAlertSheet(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 1000273B0: using guessed type void *classRef_NSBundle;
// 1000288C8: using guessed type __CFString cfstr_Kokaybutton;
// 100028AA8: using guessed type __CFString cfstr_Ktoomanylogsfo;
// 100028AC8: using guessed type __CFString cfstr_Ktoomanylogs_1;

//----- (0000000100006DC0) ----------------------------------------------------
// GMAppController - (void)showNoConnectionView
void __cdecl -[GMAppController showNoConnectionView](struct GMAppController *self, SEL a2)
{
  struct GMAppController *v2; // r14@1
  void *(*v3)(void *, const char *, ...); // rbx@1
  void *v4; // rax@1
  void *v5; // rax@1
  struct NSTimer *v6; // rdi@10

  v2 = self;
  v3 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v4 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
  v5 = v3(v4, selRef_localizedStringForKey_value_table_, &cfstr_Knoconnectionm, &stru_100028108, 0LL);
  v3(self, selRef_setConnectStatus_, v5);
  if ( v3((void *)self->window, selRef_contentView) != (void *)self->subViewNoConnection )
  {
    msgRef_retain__objc_msgSend_fixup(self->mVerticalSplitView, &msgRef_retain__objc_msgSend_fixup);
    objc_msgSend_ptr((void *)self->window, selRef_setContentView_, self->subViewNoConnection);
  }
  if ( (signed __int64)objc_msgSend_ptr(self->searchResults, selRef_numberOfUUTs) > 0
    || (signed __int64)objc_msgSend_ptr(self->gateway, selRef_numberOfServers) > 0 )
  {
    if ( (signed __int64)objc_msgSend_ptr(self->searchResults, selRef_numberOfUUTs) > 0 )
      objc_msgSend_ptr(self->searchResults, selRef_removeAllUuts);
    if ( (signed __int64)objc_msgSend_ptr(self->gateway, selRef_numberOfServers) > 0 )
      objc_msgSend_ptr(self->gateway, selRef_removeAllServers);
    objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_reloadData);
  }
  v6 = self->adrConnectionTimer;
  if ( v6 )
  {
    objc_msgSend_ptr((void *)v6, selRef_invalidate);
    v2->adrConnectionTimer = 0LL;
  }
}
// 100026348: using guessed type char *selRef_contentView;
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 100026548: using guessed type char *selRef_setConnectStatus_;
// 1000265D0: using guessed type char *selRef_reloadData;
// 1000266E8: using guessed type char *selRef_removeAllUuts;
// 100026960: using guessed type char *selRef_numberOfUUTs;
// 1000269B8: using guessed type char *selRef_setContentView_;
// 1000269C0: using guessed type char *selRef_numberOfServers;
// 1000269C8: using guessed type char *selRef_removeAllServers;
// 1000269D0: using guessed type char *selRef_invalidate;
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000273B0: using guessed type void *classRef_NSBundle;
// 100028AE8: using guessed type __CFString cfstr_Knoconnectionm;

//----- (0000000100006FA2) ----------------------------------------------------
// GMAppController - (void)showSplitView
void __cdecl -[GMAppController showSplitView](struct GMAppController *self, SEL a2)
{
  void (*v2)(void *, const char *, ...); // r14@4

  if ( self->loginStatus )
  {
    if ( objc_msgSend_ptr((void *)self->window, selRef_contentView) != self->mVerticalSplitView )
    {
      msgRef_retain__objc_msgSend_fixup(self->subViewNoConnection, &msgRef_retain__objc_msgSend_fixup);
      objc_msgSend_ptr((void *)self->window, selRef_setContentView_, self->mVerticalSplitView);
    }
    v2 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    objc_msgSend_ptr((void *)self->noConnectionProgress, selRef_stopAnimation_, self);
    v2((void *)self->outlineViewBrowser, selRef_reloadData);
    if ( !self->adrConnectionTimer )
      self->adrConnectionTimer = (struct NSTimer *)objc_msgSend_ptr(
                                                     classRef_NSTimer,
                                                     selRef_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_,
                                                     self,
                                                     selRef_updateAdrAwolTime,
                                                     0LL,
                                                     1LL,
                                                     COERCE_DOUBLE(4621819117588971520LL));
  }
}
// 100026348: using guessed type char *selRef_contentView;
// 1000265D0: using guessed type char *selRef_reloadData;
// 1000269B8: using guessed type char *selRef_setContentView_;
// 1000269D8: using guessed type char *selRef_stopAnimation_;
// 1000269E0: using guessed type char *selRef_updateAdrAwolTime;
// 1000269E8: using guessed type char *selRef_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_;
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027440: using guessed type void *classRef_NSTimer;

//----- (00000001000070E9) ----------------------------------------------------
// GMAppController - (void)updateAdrAwolTime
void __cdecl -[GMAppController updateAdrAwolTime](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rdx@1
  void *(*v3)(void *, const char *, ...); // r14@4
  void *v4; // rax@4
  void *v5; // rax@4

  if ( (unsigned int)objc_msgSend_ptr(self->gateway, selRef_authenticationStatus) == 1 )
  {
    self->adrAwolTime = 0;
  }
  else if ( ++self->adrAwolTime >= 91 )
  {
    v3 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v4 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle, v2);
    v5 = v3(v4, selRef_localizedStringForKey_value_table_, &cfstr_Kadrservernota, &stru_100028108, 0LL);
    v3(self, selRef_showBigHonkingText_, v5);
    NSLog(&cfstr_GatewaymgrAdrS, selRef_showBigHonkingText_);
    self->adrAwolTime = 0;
  }
}
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 1000269F0: using guessed type char *selRef_authenticationStatus;
// 1000269F8: using guessed type char *selRef_showBigHonkingText_;
// 1000273B0: using guessed type void *classRef_NSBundle;
// 100028B48: using guessed type __CFString cfstr_Kadrservernota;
// 100028B68: using guessed type __CFString cfstr_GatewaymgrAdrS;

//----- (0000000100007197) ----------------------------------------------------
// GMAppController - (void)adjustTabView
void __cdecl -[GMAppController adjustTabView](struct GMAppController *self, SEL a2)
{
  void *(*v2)(void *, const char *, ...); // rbx@1
  void *v3; // rax@1
  void *v4; // rax@1
  const char *v5; // rax@1
  const char *v6; // rax@4
  void *(*v7)(void *, const char *, ...); // r14@7
  void *v8; // rax@7
  unsigned __int64 v9; // rax@7
  void *v10; // rax@7
  void *v11; // rax@7
  __int128 v12; // [sp+20h] [bp-60h]@5
  __int128 v13; // [sp+30h] [bp-50h]@6
  __int128 v14; // [sp+40h] [bp-40h]@2
  __int128 v15; // [sp+50h] [bp-30h]@3

  v2 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v3 = objc_msgSend_ptr(self->navTabViewController, selRef_collectionView);
  v4 = v2(v3, selRef_itemPrototype);
  v5 = (const char *)v2(v4, selRef_view);
  if ( v5 )
  {
    objc_msgSend_stret(&v14, v5, selRef_frame);
  }
  else
  {
    v15 = 0LL;
    v14 = 0LL;
  }
  v6 = (const char *)objc_msgSend_ptr(self->navTabViewController, selRef_view);
  if ( v6 )
  {
    objc_msgSend_stret(&v12, v6, selRef_frame);
  }
  else
  {
    v13 = 0LL;
    v12 = 0LL;
  }
  v7 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v8 = objc_msgSend_ptr(self->navTabViewController, selRef_tabs);
  LODWORD(v9) = msgRef_count__objc_msgSend_fixup(v8, &msgRef_count__objc_msgSend_fixup);
  *(double *)&v13 = (COERCE_DOUBLE((unsigned int)v9 | 0x4330000000000000LL)
                   + COERCE_DOUBLE((v9 >> 32) | 0x4530000000000000LL)
                   - 1.934281311833767e25)
                  * *(double *)&v15;
  v10 = v7(self->navTabViewController, selRef_view);
  v7(v10, selRef_setFrame_, (_QWORD)v12, *((_QWORD *)&v12 + 1), (_QWORD)v13, *((_QWORD *)&v13 + 1));
  v11 = v7(self->navTabViewController, selRef_view);
  v7(v11, selRef_setNeedsDisplay_, 1LL);
}
// 1000262E8: using guessed type char *selRef_view;
// 1000262F0: using guessed type char *selRef_setFrame_;
// 100026408: using guessed type char *selRef_setNeedsDisplay_;
// 100026A00: using guessed type char *selRef_collectionView;
// 100026A08: using guessed type char *selRef_itemPrototype;
// 100026A10: using guessed type char *selRef_frame;
// 100026A18: using guessed type char *selRef_tabs;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100007322) ----------------------------------------------------
// GMAppController - (void)switchToSubView:(id) 
void __cdecl -[GMAppController switchToSubView:](struct GMAppController *self, SEL a2, id a3)
{
  id v3; // r14@1
  struct NSView *v4; // rsi@1
  void (*v5)(void *, const char *, ...); // r15@5
  __int128 v6; // [sp+20h] [bp-40h]@3
  __int128 v7; // [sp+30h] [bp-30h]@4

  v3 = a3;
  v4 = self->currentSubView;
  if ( (id)v4 != a3 )
  {
    if ( v4 )
    {
      objc_msgSend_stret(&v6, (const char *)v4, selRef_frame);
    }
    else
    {
      v7 = 0LL;
      v6 = 0LL;
    }
    v5 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    objc_msgSend_ptr(v3, selRef_setFrame_, (_QWORD)v6, *((_QWORD *)&v6 + 1), (_QWORD)v7, *((_QWORD *)&v7 + 1));
    msgRef_retain__objc_msgSend_fixup(self->currentSubView, &msgRef_retain__objc_msgSend_fixup);
    v5((void *)self->subViewMainParent, selRef_replaceSubview_with_, self->currentSubView, v3);
    self->currentSubView = (struct NSView *)v3;
  }
}
// 1000262F0: using guessed type char *selRef_setFrame_;
// 100026A10: using guessed type char *selRef_frame;
// 100026A20: using guessed type char *selRef_replaceSubview_with_;
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (00000001000073F3) ----------------------------------------------------
// GMAppController - (void)showSelectedTabView:(int) 
void __cdecl -[GMAppController showSelectedTabView:](struct GMAppController *self, SEL a2, int a3)
{
  switch ( a3 )
  {
    case 0:
      objc_msgSend_ptr(self, selRef_showOverview);
      break;
    case 1:
      objc_msgSend_ptr(self, selRef_showLogs);
      break;
    case 2:
      objc_msgSend_ptr(self, selRef_showReports);
      break;
    case 3:
      objc_msgSend_ptr(self, selRef_showUUTs);
      break;
    case 4:
      objc_msgSend_ptr(self, selRef_showSettings);
      break;
    default:
      return;
  }
}
// 100026608: using guessed type char *selRef_showSettings;
// 100026950: using guessed type char *selRef_showLogs;
// 100026A28: using guessed type char *selRef_showOverview;
// 100026A30: using guessed type char *selRef_showReports;
// 100026A38: using guessed type char *selRef_showUUTs;

//----- (000000010000746C) ----------------------------------------------------
// GMAppController - (void)enableSaveRevertState:(char) 
void __cdecl -[GMAppController enableSaveRevertState:](struct GMAppController *self, SEL a2, char a3)
{
  struct GMAppController *v3; // rbx@1
  char v4; // al@2
  struct NSButton *v5; // rdi@2
  struct NSSearchField *v6; // rdi@3
  const char *v7; // rsi@3
  signed __int64 v8; // rdx@3

  v3 = self;
  if ( (unsigned __int8)objc_msgSend_ptr((void *)self->gwSaveSettingsButton, selRef_isEnabled) != a3 )
  {
    v4 = (unsigned __int64)objc_msgSend_ptr((void *)self->gwSaveSettingsButton, selRef_isEnabled);
    v5 = self->gwRevertSettingsButton;
    if ( v4 )
    {
      objc_msgSend_ptr((void *)v5, selRef_setEnabled_, 0LL);
      objc_msgSend_ptr((void *)v3->gwSaveSettingsButton, selRef_setEnabled_, 0LL);
      v6 = v3->searchFieldLogs;
      v7 = selRef_setEnabled_;
      v8 = 1LL;
    }
    else
    {
      objc_msgSend_ptr((void *)v5, selRef_setEnabled_, 1LL);
      objc_msgSend_ptr((void *)v3->gwSaveSettingsButton, selRef_setEnabled_, 1LL);
      v6 = v3->searchFieldLogs;
      v7 = selRef_setEnabled_;
      v8 = 0LL;
    }
    objc_msgSend_ptr((void *)v6, v7, v8);
  }
}
// 100026A40: using guessed type char *selRef_isEnabled;
// 100026A48: using guessed type char *selRef_setEnabled_;

//----- (0000000100007551) ----------------------------------------------------
// GMAppController - (void)showOverview
void __cdecl -[GMAppController showOverview](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0
  void *v3; // rax@2
  __int64 v4; // rax@2
  struct NSOutlineView *v5; // rbx@3
  void *(*v6)(void *, const char *, ...); // r14@3
  void *v7; // rax@3
  void *v8; // r14@3
  __int64 v9; // rax@3
  __int64 v10; // rax@4
  const char *v11; // rsi@5
  __int64 v12; // rax@6

  if ( self->loginStatus )
  {
    v3 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_allSelectedItems, v2);
    LODWORD(v4) = msgRef_count__objc_msgSend_fixup(v3, &msgRef_count__objc_msgSend_fixup);
    if ( v4 )
    {
      v5 = self->outlineViewBrowser;
      v6 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v7 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_selectedRow);
      v8 = v6((void *)v5, selRef_itemAtRow_, v7);
      LODWORD(v9) = msgRef_self__objc_msgSend_fixup(classRef_GMGatewayInfo, &msgRef_self__objc_msgSend_fixup);
      if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                              v8,
                              &msgRef_isKindOfClass___objc_msgSend_fixup,
                              v9) )
      {
        objc_msgSend_ptr(self, selRef_addRequest_, 3LL);
        objc_msgSend_ptr(self, selRef_switchToSubView_, self->subViewGatewayOverview);
        objc_msgSend_ptr(self, selRef_updateGatewayOverview);
      }
      else
      {
        LODWORD(v10) = msgRef_self__objc_msgSend_fixup(classRef_GMServerInfo, &msgRef_self__objc_msgSend_fixup);
        if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                                v8,
                                &msgRef_isKindOfClass___objc_msgSend_fixup,
                                v10) )
        {
          objc_msgSend_ptr(self, selRef_addRequest_, 5LL);
          objc_msgSend_ptr(self, selRef_switchToSubView_, self->subViewServerOverview);
          v11 = selRef_updateServerOverview_;
LABEL_8:
          objc_msgSend_ptr(self, v11, v8);
          return;
        }
        LODWORD(v12) = msgRef_self__objc_msgSend_fixup(classRef_GMMachineInfo, &msgRef_self__objc_msgSend_fixup);
        if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                                v8,
                                &msgRef_isKindOfClass___objc_msgSend_fixup,
                                v12) )
        {
          objc_msgSend_ptr(self, selRef_switchToSubView_, self->subViewMachineOverview);
          v11 = selRef_updateMachineOverview_;
          goto LABEL_8;
        }
      }
    }
  }
}
// 1000263C8: using guessed type char *selRef_switchToSubView_;
// 100026430: using guessed type char *selRef_allSelectedItems;
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 1000265E8: using guessed type char *selRef_updateServerOverview_;
// 1000265F8: using guessed type char *selRef_updateGatewayOverview;
// 100026910: using guessed type char *selRef_addRequest_;
// 100026A50: using guessed type char *selRef_updateMachineOverview_;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (0000000100007724) ----------------------------------------------------
// GMAppController - (void)showLogs
void __cdecl -[GMAppController showLogs](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0
  void *v3; // rax@1
  __int64 v4; // rax@1
  struct NSOutlineView *v5; // rbx@2
  void *(*v6)(void *, const char *, ...); // r14@2
  void *v7; // rax@2
  void *v8; // r14@2
  __int64 v9; // rax@2
  signed __int64 v10; // rax@3
  void *v11; // rdx@4
  const char *v12; // rsi@4
  __int64 v13; // rax@6
  void (*v14)(void *, const char *, ...); // rbx@7
  void *v15; // rax@7
  void *v16; // rax@7
  const char *v17; // rsi@8
  void *v18; // rax@10
  __int64 v19; // rax@11

  v3 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_allSelectedItems, v2);
  LODWORD(v4) = msgRef_count__objc_msgSend_fixup(v3, &msgRef_count__objc_msgSend_fixup);
  if ( v4 )
  {
    v5 = self->outlineViewBrowser;
    v6 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v7 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_selectedRow);
    v8 = v6((void *)v5, selRef_itemAtRow_, v7);
    LODWORD(v9) = msgRef_self__objc_msgSend_fixup(classRef_GMGatewayInfo, &msgRef_self__objc_msgSend_fixup);
    if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(v8, &msgRef_isKindOfClass___objc_msgSend_fixup, v9) )
    {
      objc_msgSend_ptr(self, selRef_addRequest_, 10LL);
      v10 = 248LL;
LABEL_4:
      v11 = *(void **)&self->NSObject_opaque[v10];
      v12 = selRef_switchToSubView_;
LABEL_5:
      objc_msgSend_ptr(self, v12, v11);
      return;
    }
    LODWORD(v13) = msgRef_self__objc_msgSend_fixup(classRef_GMServerInfo, &msgRef_self__objc_msgSend_fixup);
    if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(v8, &msgRef_isKindOfClass___objc_msgSend_fixup, v13) )
    {
      v14 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      objc_msgSend_ptr(self, selRef_clearTextView_, self->serverLogTextView);
      v14(self, selRef_addRequest_, 11LL);
      v14(self, selRef_switchToSubView_, self->subViewServerLogs);
      v15 = ((void *(*)(void *, const char *, ...))v14)((void *)self->serverLogPopUpButton, selRef_selectedItem);
      v16 = ((void *(*)(void *, const char *, ...))v14)(v15, selRef_title);
      if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                              v16,
                              &msgRef_isEqualToString___objc_msgSend_fixup,
                              &cfstr_Ast_unittest_l) )
        v17 = selRef_activityLogPath;
      else
        v17 = selRef_transactionLogPath;
      v18 = objc_msgSend_ptr(v8, v17);
      v12 = selRef_setURL_;
      self = (struct GMAppController *)self->serverLogPathControl;
      v11 = objc_msgSend_ptr(classRef_NSURL, selRef_URLWithString_, v18);
      goto LABEL_5;
    }
    LODWORD(v19) = msgRef_self__objc_msgSend_fixup(classRef_GMMachineInfo, &msgRef_self__objc_msgSend_fixup);
    if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(v8, &msgRef_isKindOfClass___objc_msgSend_fixup, v19) )
    {
      objc_msgSend_ptr(self, selRef_addRequest_, 13LL);
      v10 = 624LL;
      goto LABEL_4;
    }
  }
  else
  {
    objc_msgSend_ptr(self, selRef_switchToSubView_, self->subViewMachineLogs);
  }
}
// 1000263B0: using guessed type char *selRef_URLWithString_;
// 1000263B8: using guessed type char *selRef_setURL_;
// 1000263C0: using guessed type char *selRef_clearTextView_;
// 1000263C8: using guessed type char *selRef_switchToSubView_;
// 100026410: using guessed type char *selRef_selectedItem;
// 100026430: using guessed type char *selRef_allSelectedItems;
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 100026628: using guessed type char *selRef_title;
// 100026698: using guessed type char *selRef_activityLogPath;
// 1000266A8: using guessed type char *selRef_transactionLogPath;
// 100026910: using guessed type char *selRef_addRequest_;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 1000273B8: using guessed type void *classRef_NSURL;

//----- (0000000100007975) ----------------------------------------------------
// GMAppController - (void)showReports
void __cdecl -[GMAppController showReports](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0

  if ( (unsigned int)objc_msgSend_ptr(self, selRef_browserSelectionType, v2) == 1 )
    objc_msgSend_ptr(self, selRef_switchToSubView_, self->subViewGatewayReports);
}
// 1000263C8: using guessed type char *selRef_switchToSubView_;
// 1000264E8: using guessed type char *selRef_browserSelectionType;

//----- (00000001000079BB) ----------------------------------------------------
// GMAppController - (void)showUUTs
void __cdecl -[GMAppController showUUTs](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0

  if ( (unsigned int)objc_msgSend_ptr(self, selRef_browserSelectionType, v2) == 1 )
    objc_msgSend_ptr(self, selRef_switchToSubView_, self->subViewGatewayUUTs);
}
// 1000263C8: using guessed type char *selRef_switchToSubView_;
// 1000264E8: using guessed type char *selRef_browserSelectionType;

//----- (0000000100007A01) ----------------------------------------------------
// GMAppController - (void)showSettings
void __cdecl -[GMAppController showSettings](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0

  if ( (unsigned int)objc_msgSend_ptr(self, selRef_browserSelectionType, v2) == 1 )
  {
    objc_msgSend_ptr(self, selRef_addRequest_, 3LL);
    objc_msgSend_ptr(self, selRef_switchToSubView_, self->subViewGatewaySettings);
    objc_msgSend_ptr(self, selRef_updateGatewaySettings);
  }
}
// 1000263C8: using guessed type char *selRef_switchToSubView_;
// 1000264E8: using guessed type char *selRef_browserSelectionType;
// 100026910: using guessed type char *selRef_addRequest_;
// 100026920: using guessed type char *selRef_updateGatewaySettings;

//----- (0000000100007A6F) ----------------------------------------------------
// GMAppController - (void)updateGatewayOverview
void __cdecl -[GMAppController updateGatewayOverview](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0
  struct NSTextField *v3; // r14@1
  void *v4; // rax@1
  struct NSTextField *v5; // r14@1
  void *v6; // rax@1
  struct NSTextField *v7; // r14@1
  void *v8; // rax@1
  struct NSTextField *v9; // r14@1
  void *v10; // rax@1
  struct NSTextField *v11; // r14@1
  void *v12; // rax@1
  void *v13; // rax@1

  v3 = self->gwNameTextField;
  v4 = objc_msgSend_ptr(self->gateway, selRef_name, v2);
  objc_msgSend_ptr((void *)v3, selRef_setStringValue_, v4);
  v5 = self->gwVersionTextField;
  v6 = objc_msgSend_ptr(self->gateway, selRef_version);
  objc_msgSend_ptr((void *)v5, selRef_setStringValue_, v6);
  v7 = self->gwControllerIPTextField;
  v8 = objc_msgSend_ptr(self->gateway, selRef_controllerIP);
  objc_msgSend_ptr((void *)v7, selRef_setStringValue_, v8);
  v9 = self->gwControllerHostTextField;
  v10 = objc_msgSend_ptr(self->gateway, selRef_controllerName);
  objc_msgSend_ptr((void *)v9, selRef_setStringValue_, v10);
  v11 = self->gwConnectedServersTextField;
  v12 = objc_msgSend_ptr(self->gateway, selRef_numberOfServers);
  v13 = objc_msgSend_ptr(classRef_NSString, selRef_stringWithFormat_, &cfstr_Ld, v12);
  objc_msgSend_ptr((void *)v11, selRef_setStringValue_, v13);
  objc_msgSend_ptr((void *)self->subViewGatewayOverview, selRef_setNeedsDisplay_, 1LL);
}
// 100026390: using guessed type char *selRef_setStringValue_;
// 1000263A8: using guessed type char *selRef_stringWithFormat_;
// 100026408: using guessed type char *selRef_setNeedsDisplay_;
// 100026650: using guessed type char *selRef_controllerIP;
// 100026780: using guessed type char *selRef_name;
// 1000269C0: using guessed type char *selRef_numberOfServers;
// 100026A58: using guessed type char *selRef_version;
// 100026A60: using guessed type char *selRef_controllerName;
// 1000273C0: using guessed type void *classRef_NSString;
// 100028B88: using guessed type __CFString cfstr_Ld;

//----- (0000000100007BD7) ----------------------------------------------------
// GMAppController - (void)updateGatewaySettings
void __cdecl -[GMAppController updateGatewaySettings](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0
  struct NSTextField *v3; // r14@1
  void *v4; // rax@1
  struct NSTextField *v5; // r15@1
  void *v6; // rax@1
  struct NSTextField *v7; // r15@1
  void *v8; // rax@1
  struct NSTextField *v9; // r15@1
  void *v10; // rax@1
  struct NSTextField *v11; // r15@1
  void *v12; // rax@1

  v3 = self->gwSetNameTextField;
  v4 = objc_msgSend_ptr(self->gateway, selRef_name, v2);
  objc_msgSend_ptr((void *)v3, selRef_setStringValue_, v4);
  objc_msgSend_ptr((void *)self->gwSetAdminPassTextField, selRef_setStringValue_, &stru_100028108);
  objc_msgSend_ptr((void *)self->gwVerifyAdminPassTextField, selRef_setStringValue_, &stru_100028108);
  objc_msgSend_ptr((void *)self->gwSetUserPassTextField, selRef_setStringValue_, &stru_100028108);
  objc_msgSend_ptr((void *)self->gwVerifyUserPassTextField, selRef_setStringValue_, &stru_100028108);
  v5 = self->gwSetRemoteIPTextField;
  v6 = objc_msgSend_ptr(self->gateway, selRef_appleIP);
  objc_msgSend_ptr((void *)v5, selRef_setStringValue_, v6);
  v7 = self->gwSetSiteIDTextField;
  v8 = objc_msgSend_ptr(self->gateway, selRef_siteID);
  objc_msgSend_ptr((void *)v7, selRef_setStringValue_, v8);
  v9 = self->gwSetShipToTextField;
  v10 = objc_msgSend_ptr(self->gateway, selRef_shipTo);
  objc_msgSend_ptr((void *)v9, selRef_setStringValue_, v10);
  v11 = self->gwSetACNameTextField;
  v12 = objc_msgSend_ptr(self->gateway, selRef_appleConnectName);
  objc_msgSend_ptr((void *)v11, selRef_setStringValue_, v12);
  objc_msgSend_ptr((void *)self->gwSetACPassTextField, selRef_setStringValue_, &stru_100028108);
  objc_msgSend_ptr((void *)self->gwVerifyACPassTextField, selRef_setStringValue_, &stru_100028108);
  objc_msgSend_ptr(self, selRef_updateAuthenticationStatus_, 0LL);
}
// 100026390: using guessed type char *selRef_setStringValue_;
// 1000265E0: using guessed type char *selRef_updateAuthenticationStatus_;
// 100026780: using guessed type char *selRef_name;
// 1000268C8: using guessed type char *selRef_appleIP;
// 1000268D0: using guessed type char *selRef_siteID;
// 1000268D8: using guessed type char *selRef_shipTo;
// 1000268E0: using guessed type char *selRef_appleConnectName;

//----- (0000000100007DBA) ----------------------------------------------------
// GMAppController - (void)updateAuthenticationStatus:(id) 
void __cdecl -[GMAppController updateAuthenticationStatus:](struct GMAppController *self, SEL a2, id a3)
{
  struct GMAppController *v3; // r15@1
  void *v4; // rax@1
  __int64 v5; // rax@1
  struct GMGatewayInfo *v6; // rdi@1
  void *v7; // rax@2
  __int64 v8; // rax@2
  void *(*v9)(void *, const char *, ...); // rbx@4
  void *v10; // rax@4
  void *v11; // rbx@4
  signed int v12; // er12@4
  void *v13; // rax@5
  __int64 v14; // rax@5
  void *(*v15)(void *, const char *, ...); // rbx@7
  void *v16; // rax@7
  void *v17; // rax@8
  __int64 v18; // rax@8
  void *(*v19)(void *, const char *, ...); // rbx@10
  void *v20; // rax@10
  __int64 v21; // rbx@12
  void *(*v22)(void *, const char *, ...); // r14@13
  void *v23; // rax@13
  void *v24; // r12@13
  void *(*v25)(void *, const char *, ...); // r14@16
  void *v26; // rax@16
  void *(*v27)(void *, const char *, ...); // rbx@17
  void *v28; // rax@17
  void *(*v29)(void *, const char *, ...); // rbx@18
  void *v30; // rax@18
  void *(*v31)(void *, const char *, ...); // rbx@19
  void *v32; // rax@19
  void *(*v33)(void *, const char *, ...); // rbx@20
  void *v34; // rax@20
  void *(*v35)(void *, const char *, ...); // rbx@21
  void *v36; // rax@21
  void *(*v37)(void *, const char *, ...); // rbx@22
  void *v38; // rax@22
  void *(*v39)(void *, const char *, ...); // rbx@23
  void *v40; // rax@23
  void (*v41)(void *, const char *, ...); // r14@14
  void *(*v42)(void *, const char *, ...); // rbx@24
  void *v43; // rax@24
  void (*v44)(void *, const char *, ...); // r14@25
  void *v45; // ST20_8@25
  void (*v46)(void *, const char *, ...); // r14@27
  void (*v47)(void *, const char *, ...); // rbx@29
  __int64 v48; // [sp+0h] [bp-50h]@0

  v3 = self;
  v4 = objc_msgSend_ptr(self->gateway, selRef_controllerIP, a3);
  LODWORD(v5) = msgRef_length__objc_msgSend_fixup(v4, &msgRef_length__objc_msgSend_fixup);
  v6 = self->gateway;
  if ( v5 )
  {
    v7 = objc_msgSend_ptr(v6, selRef_appleIP);
    LODWORD(v8) = msgRef_length__objc_msgSend_fixup(v7, &msgRef_length__objc_msgSend_fixup);
    if ( !v8 )
    {
      NSLog(&cfstr_GatewaymgrAuth, 3LL);
LABEL_4:
      v9 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v10 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v11 = v9(v10, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewaymissin, &stru_100028108, 0LL);
      v12 = 3;
      goto LABEL_25;
    }
    v13 = objc_msgSend_ptr(v3->gateway, selRef_siteID);
    LODWORD(v14) = msgRef_length__objc_msgSend_fixup(v13, &msgRef_length__objc_msgSend_fixup);
    if ( !v14 )
    {
      NSLog(&cfstr_GatewaymgrAuth, 4LL);
LABEL_7:
      v15 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v16 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v11 = v15(v16, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewaymiss_2, &stru_100028108, 0LL);
      v12 = 4;
      goto LABEL_25;
    }
    v17 = objc_msgSend_ptr(v3->gateway, selRef_appleConnectName);
    LODWORD(v18) = msgRef_length__objc_msgSend_fixup(v17, &msgRef_length__objc_msgSend_fixup);
    if ( !v18 )
    {
      NSLog(&cfstr_GatewaymgrAuth, 5LL);
LABEL_10:
      v19 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v20 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v11 = v19(v20, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewaymiss_0, &stru_100028108, 0LL);
      v12 = 5;
      goto LABEL_25;
    }
    v6 = v3->gateway;
  }
  v21 = (unsigned int)objc_msgSend_ptr(v6, selRef_authenticationStatus);
  NSLog(&cfstr_GatewaymgrAuth, v21);
  switch ( (_DWORD)v21 )
  {
    case 3:
      goto LABEL_4;
    case 4:
      goto LABEL_7;
    case 5:
      goto LABEL_10;
    case 1:
      v22 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v23 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v11 = v22(v23, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewayauth_1, &stru_100028108, 0LL);
      v24 = v22(classRef_NSImage, selRef_imageNamed_, &cfstr_Auth_success);
      if ( (unsigned __int8)v22((void *)v3->mPassFailOverlayWin, selRef_isVisible) )
      {
        v41 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
        objc_msgSend_ptr(v3->mClickWin, selRef_orderOut_, v3);
        v41((void *)v3->mPassFailOverlayWin, selRef_orderOut_, v3);
      }
      v3->adrAwolTime = 0;
      goto LABEL_26;
    case 2:
      v25 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v26 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v24 = 0LL;
      v11 = v25(v26, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewayauthen, &stru_100028108, 0LL);
      v25((void *)v3->gwAdrAuthStatusProgress, selRef_startAnimation_, v3);
      goto LABEL_26;
    case 7:
      v27 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v28 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v11 = v27(v28, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewayinva_4, &stru_100028108, 0LL);
      v12 = 7;
      break;
    case 8:
      v29 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v30 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v11 = v29(v30, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewayinva_0, &stru_100028108, 0LL);
      v12 = 8;
      break;
    case 9:
      v31 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v32 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v11 = v31(v32, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewayinva_1, &stru_100028108, 0LL);
      v12 = 9;
      break;
    case 0xA:
      v33 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v34 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v11 = v33(v34, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewayinva_2, &stru_100028108, 0LL);
      v12 = 10;
      break;
    case 0xD:
      v35 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v36 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v11 = v35(v36, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewaypasswo, &stru_100028108, 0LL);
      v12 = 13;
      break;
    case 0xB:
      v37 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v38 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v11 = v37(v38, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewaynotaut, &stru_100028108, 0LL);
      v12 = 11;
      break;
    default:
      NSLog(&cfstr_GatewaymgrDSta, (unsigned int)v21);
      v39 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v40 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v11 = v39(v40, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewaynoauth, &stru_100028108, 0LL);
      v12 = 12;
      break;
    case 6:
      v42 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v43 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v11 = v42(v43, selRef_localizedStringForKey_value_table_, &cfstr_Kgatewayinvali, &stru_100028108, 0LL);
      v12 = 6;
      break;
  }
LABEL_25:
  v44 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  v45 = objc_msgSend_ptr(classRef_NSImage, selRef_imageNamed_, &cfstr_Auth_failed);
  v44(v3->gateway, selRef_siteID);
  v44(v3->gateway, selRef_shipTo);
  v44(v3->gateway, selRef_appleConnectName);
  v44(v3->gateway, selRef_controllerIP);
  LODWORD(v48) = v12;
  v24 = v45;
  NSLog(&cfstr_GatewaymgrAu_1, v11);
LABEL_26:
  if ( v11 )
  {
    v46 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    objc_msgSend_ptr((void *)v3->gwAdrAuthStatusTextField, selRef_setStringValue_, v11, v48);
    v46((void *)v3->gwAuthStatusTextField, selRef_setStringValue_, v11);
  }
  if ( v24 )
  {
    v47 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    objc_msgSend_ptr((void *)v3->gwAdrAuthStatusProgress, selRef_stopAnimation_, v3, v48);
    v47(v24, selRef_setScalesWhenResized_, 1LL);
    v47(v24, selRef_setSize_, COERCE_DOUBLE(4625196817309499392LL));
    v47((void *)v3->gwAdrAuthStatusImageView, selRef_setImage_, v24);
    v47((void *)v3->gwAdrAuthStatusImageView, selRef_setHidden_, 0LL);
  }
  else
  {
    objc_msgSend_ptr((void *)v3->gwAdrAuthStatusImageView, selRef_setHidden_, 1LL, v48);
  }
  objc_msgSend_ptr((void *)v3->subViewGatewayOverview, selRef_setNeedsDisplay_, 1LL);
  objc_msgSend_ptr((void *)v3->subViewGatewaySettings, selRef_setNeedsDisplay_, 1LL);
}
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 100026390: using guessed type char *selRef_setStringValue_;
// 1000263F8: using guessed type char *selRef_setHidden_;
// 100026400: using guessed type char *selRef_startAnimation_;
// 100026408: using guessed type char *selRef_setNeedsDisplay_;
// 100026650: using guessed type char *selRef_controllerIP;
// 1000268C8: using guessed type char *selRef_appleIP;
// 1000268D0: using guessed type char *selRef_siteID;
// 1000268D8: using guessed type char *selRef_shipTo;
// 1000268E0: using guessed type char *selRef_appleConnectName;
// 1000269D8: using guessed type char *selRef_stopAnimation_;
// 1000269F0: using guessed type char *selRef_authenticationStatus;
// 100026A68: using guessed type char *selRef_imageNamed_;
// 100026A70: using guessed type char *selRef_isVisible;
// 100026A78: using guessed type char *selRef_orderOut_;
// 100026A80: using guessed type char *selRef_setScalesWhenResized_;
// 100026A88: using guessed type char *selRef_setSize_;
// 100026A90: using guessed type char *selRef_setImage_;
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000273B0: using guessed type void *classRef_NSBundle;
// 100027448: using guessed type void *classRef_NSImage;
// 100028848: using guessed type __CFString cfstr_Kgatewayauthen;
// 100028BA8: using guessed type __CFString cfstr_GatewaymgrAuth;
// 100028BC8: using guessed type __CFString cfstr_Kgatewayauth_1;
// 100028BE8: using guessed type __CFString cfstr_Auth_success;
// 100028C08: using guessed type __CFString cfstr_Kgatewaymissin;
// 100028C28: using guessed type __CFString cfstr_Kgatewaymiss_2;
// 100028C48: using guessed type __CFString cfstr_Kgatewaymiss_0;
// 100028C68: using guessed type __CFString cfstr_Kgatewayinvali;
// 100028C88: using guessed type __CFString cfstr_Kgatewayinva_4;
// 100028CA8: using guessed type __CFString cfstr_Kgatewayinva_0;
// 100028CC8: using guessed type __CFString cfstr_Kgatewayinva_1;
// 100028CE8: using guessed type __CFString cfstr_Kgatewayinva_2;
// 100028D08: using guessed type __CFString cfstr_Kgatewaypasswo;
// 100028D28: using guessed type __CFString cfstr_Kgatewaynotaut;
// 100028D48: using guessed type __CFString cfstr_GatewaymgrDSta;
// 100028D68: using guessed type __CFString cfstr_Kgatewaynoauth;
// 100028D88: using guessed type __CFString cfstr_Auth_failed;
// 100028DA8: using guessed type __CFString cfstr_GatewaymgrAu_1;

//----- (00000001000084F8) ----------------------------------------------------
// GMAppController - (void)updateServerOverview:(id) 
void __cdecl -[GMAppController updateServerOverview:](struct GMAppController *self, SEL a2, id a3)
{
  double v3; // xmm0_8@0
  id v4; // rbx@1
  struct GMAppController *v5; // r14@1
  struct NSMenuItem *v6; // r13@3
  void *(*v7)(void *, const char *, ...); // rbx@3
  void *v8; // rax@3
  const char *v9; // rsi@3
  __CFString *v10; // r12@3
  void *v11; // rax@4
  struct NSMenuItem *v12; // r13@4
  void *v13; // rax@4
  void *v14; // rax@4
  struct NSButton *v15; // r13@4
  void *v16; // rax@4
  void *v17; // rax@4
  void *(*v18)(void *, const char *, ...); // r15@7
  int v19; // ST08_4@7
  struct NSMenuItem *v20; // rbx@7
  void *v21; // rax@7
  void *v22; // rax@7
  struct NSMenuItem *v23; // rbx@7
  void *v24; // rax@7
  void *v25; // rax@7
  struct NSButton *v26; // rbx@7
  void *v27; // rax@7
  void *v28; // rax@7
  void *(*v29)(void *, const char *, ...); // r15@8
  id v30; // r13@8
  char v31; // bl@8
  void *v32; // rdi@8
  __CFString *v33; // rdx@9
  struct NSTextField *v34; // rbx@11
  void (*v35)(void *, const char *, ...); // r12@11
  void *v36; // rax@11
  struct NSTextField *v37; // rbx@11
  void *v38; // rax@11
  void *v39; // rax@11
  struct NSTextField *v40; // rbx@12
  void (*v41)(void *, const char *, ...); // r12@12
  void *v42; // rax@12
  const char *v43; // rsi@12
  char v44; // al@14
  struct NSTextField *v45; // rbx@14
  void *v46; // rax@15
  void (*v47)(void *, const char *, ...); // r13@16
  void *v48; // rax@16
  struct NSTextField *v49; // r12@16
  void *v50; // rax@16
  void *v51; // rax@16
  struct NSTextField *v52; // rbx@17
  void (*v53)(void *, const char *, ...); // r12@17
  void *v54; // rax@17
  void *v55; // rax@17
  struct NSTextField *v56; // r15@17
  void *(*v57)(void *, const char *, ...); // rbx@18
  void *v58; // rax@18
  const char *v59; // rsi@18
  __CFString *v60; // rdx@18
  void *v61; // rdi@18
  _QWORD *v62; // rcx@18
  void *v63; // rax@19
  void *v64; // rax@20
  struct NSTextField *v65; // r15@20
  void *(*v66)(void *, const char *, ...); // r12@20
  unsigned int v67; // eax@20
  void *v68; // rax@20
  void *v69; // rax@20
  void *v70; // rax@20
  __int64 v71; // rax@20
  __int64 v72; // rbx@20
  void (*v73)(void *, const char *, ...); // rbx@22
  void (*v74)(void *, const char *, ...); // r15@23
  void *v75; // rax@24
  __int64 v76; // rax@24
  struct NSTextField *v77; // r12@24
  id v78; // r15@25
  void *(*v79)(void *, const char *, ...); // r13@25
  void *v80; // rax@25
  void *v81; // rbx@25
  void *v82; // rax@25
  void *v83; // rax@25
  void (*v84)(void *, const char *, ...); // r15@27
  id v85; // [sp+10h] [bp-30h]@3

  v4 = a3;
  v5 = self;
  if ( self->showingSheet )
    return;
  if ( !(unsigned int)objc_msgSend_ptr(a3, selRef_status) )
  {
    v85 = v4;
    v6 = self->connectServerMenuItem;
    v7 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v8 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
    v9 = selRef_localizedStringForKey_value_table_;
    v10 = &cfstr_Kserverdisconn;
LABEL_4:
    v11 = v7(v8, v9, v10, &stru_100028108, 0LL);
    v7((void *)v6, selRef_setTitle_, v11);
    v12 = self->connectServerDropDownMenuItem;
    v13 = v7(classRef_NSBundle, selRef_mainBundle);
    v14 = v7(v13, selRef_localizedStringForKey_value_table_, v10, &stru_100028108, 0LL);
    v7((void *)v12, selRef_setTitle_, v14);
    v15 = self->serverDisconnectButton;
    v16 = v7(classRef_NSBundle, selRef_mainBundle);
    v17 = v7(v16, selRef_localizedStringForKey_value_table_, v10, &stru_100028108, 0LL);
    v7((void *)v15, selRef_setTitle_, v17);
    v7((void *)self->serverDisconnectButton, selRef_setEnabled_, 1LL);
    goto LABEL_8;
  }
  if ( (unsigned int)objc_msgSend_ptr(v4, selRef_status) == 1 )
  {
    v85 = v4;
    v6 = self->connectServerMenuItem;
    v7 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v8 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
    v9 = selRef_localizedStringForKey_value_table_;
    v10 = &cfstr_Kserverconnect;
    goto LABEL_4;
  }
  v18 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v85 = v4;
  v19 = (unsigned __int64)objc_msgSend_ptr(v4, selRef_status);
  v20 = self->connectServerMenuItem;
  v21 = v18(classRef_NSBundle, selRef_mainBundle);
  v22 = v18(v21, selRef_localizedStringForKey_value_table_, &cfstr_Kserverconnect, &stru_100028108, 0LL);
  v18((void *)v20, selRef_setTitle_, v22);
  v23 = self->connectServerDropDownMenuItem;
  v24 = v18(classRef_NSBundle, selRef_mainBundle);
  v25 = v18(v24, selRef_localizedStringForKey_value_table_, &cfstr_Kserverconnect, &stru_100028108, 0LL);
  v18((void *)v23, selRef_setTitle_, v25);
  v26 = self->serverDisconnectButton;
  v27 = v18(classRef_NSBundle, selRef_mainBundle);
  v28 = v18(v27, selRef_localizedStringForKey_value_table_, &cfstr_Kserverconnect, &stru_100028108, 0LL);
  v18((void *)v26, selRef_setTitle_, v28);
  objc_msgSend_ptr((void *)self->serverDisconnectButton, selRef_setEnabled_, v19 == 2);
LABEL_8:
  v29 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v30 = v85;
  v31 = (unsigned __int64)objc_msgSend_ptr(v85, selRef_isConnected);
  v32 = v29(classRef_NSBundle, selRef_mainBundle);
  if ( v31 )
    v33 = &cfstr_Kyesstring;
  else
    v33 = &cfstr_Knostring;
  objc_msgSend_ptr(v32, selRef_localizedStringForKey_value_table_, v33, &stru_100028108, 0LL);
  v34 = v5->serverIpAddressTextField;
  v35 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  v36 = objc_msgSend_ptr(v85, selRef_ipAddress);
  v35((void *)v34, selRef_setStringValue_, v36);
  v37 = v5->serverHostNameTextField;
  v38 = ((void *(*)(void *, const char *, ...))v35)(v85, selRef_hostName);
  v35((void *)v37, selRef_setStringValue_, v38);
  v39 = ((void *(*)(void *, const char *, ...))v35)(v85, selRef_serviceVersion);
  if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                          v39,
                          &msgRef_isEqualToString___objc_msgSend_fixup,
                          &cfstr_Searching___) )
  {
    v40 = v5->serverServiceVersTextField;
    v41 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    v42 = objc_msgSend_ptr(classRef_NSColor, selRef_blackColor);
    v43 = selRef_setTextColor_;
  }
  else
  {
    v44 = (unsigned __int64)objc_msgSend_ptr(v85, selRef_upToDate);
    v45 = v5->serverServiceVersTextField;
    if ( !v44 )
    {
      v47 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v48 = objc_msgSend_ptr(classRef_NSColor, selRef_redColor);
      v47((void *)v45, selRef_setTextColor_, v48);
      v49 = v5->serverServiceVersTextField;
      v50 = ((void *(*)(void *, const char *, ...))v47)(v85, selRef_serviceVersion);
      v51 = ((void *(*)(void *, const char *, ...))v47)(
              classRef_NSString,
              selRef_stringWithFormat_,
              &cfstr__UpdateAvailab,
              v50);
      v47((void *)v49, selRef_setStringValue_, v51);
      v30 = v85;
      goto LABEL_17;
    }
    v41 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    v46 = objc_msgSend_ptr(classRef_NSColor, selRef_blackColor);
    v41((void *)v45, selRef_setTextColor_, v46);
    v40 = v5->serverServiceVersTextField;
    v42 = ((void *(*)(void *, const char *, ...))v41)(v85, selRef_serviceVersion);
    v43 = selRef_setStringValue_;
  }
  v41((void *)v40, v43, v42);
LABEL_17:
  v52 = v5->serverStatusTextField;
  v53 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  v54 = objc_msgSend_ptr(v30, selRef_statusString);
  v53((void *)v52, selRef_setStringValue_, v54);
  v53((void *)v5->serverConnectedTextField, selRef_setStringValue_);
  v55 = ((void *(*)(void *, const char *, ...))v53)(v30, selRef_lastTransmission);
  v53(v55, selRef_timeIntervalSince1970);
  v56 = v5->serverLastTransTextField;
  if ( v3 == 0.0 )
  {
    v57 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v63 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
    v59 = selRef_localizedStringForKey_value_table_;
    v60 = &cfstr_Knotavailables;
    v62 = &stru_100028108;
    v61 = v63;
  }
  else
  {
    v57 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v58 = objc_msgSend_ptr(v30, selRef_lastTransmission);
    v59 = selRef_descriptionWithCalendarFormat_timeZone_locale_;
    v60 = &cfstr_ABEY1iMP;
    v61 = v58;
    v62 = 0LL;
  }
  v64 = v57(v61, v59, v60, v62, 0LL);
  v57((void *)v56, selRef_setStringValue_, v64);
  v65 = v5->serverNumUutsTextField;
  v66 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v67 = (unsigned __int64)objc_msgSend_ptr(v30, selRef_uutCount);
  v68 = v66(classRef_NSString, selRef_stringWithFormat_, &cfstr_D, v67);
  v66((void *)v65, selRef_setStringValue_, v68);
  v69 = v66(v30, selRef_networkInterface);
  v70 = v66(v69, selRef_componentsSeparatedByString_, &stru_1000284E8);
  LODWORD(v71) = msgRef_objectAtIndex___objc_msgSend_fixup(v70, &msgRef_objectAtIndex___objc_msgSend_fixup, 0LL);
  v72 = v71;
  if ( v5->loginStatus == 2 )
  {
    if ( (signed __int64)objc_msgSend_ptr(v30, selRef_numberOfInterfaces) < 2 )
    {
      v74 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      objc_msgSend_ptr((void *)v5->serverInterfaceTextField, selRef_setStringValue_, v72);
      v74((void *)v5->serverInterfaceTextField, selRef_setHidden_, 0LL);
      v74((void *)v5->serverInterfacePopUpButton, selRef_setHidden_, 1LL);
    }
    else
    {
      v73 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      objc_msgSend_ptr(v5, selRef_fillNetworkInterfacesPopUp_, v30);
      v73((void *)v5->serverInterfaceTextField, selRef_setHidden_, 1LL);
      v73((void *)v5->serverInterfacePopUpButton, selRef_setHidden_, 0LL);
    }
    v75 = objc_msgSend_ptr(v30, selRef_pendingInterface);
    LODWORD(v76) = msgRef_length__objc_msgSend_fixup(v75, &msgRef_length__objc_msgSend_fixup);
    v77 = v5->serverInterfaceChangeTextField;
    if ( v76 )
    {
      v78 = v30;
      v79 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v80 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v81 = v79(v80, selRef_localizedStringForKey_value_table_, &cfstr_Kinterfacechan, &stru_100028108, 0LL);
      v82 = v79(v78, selRef_pendingInterface);
      v83 = v79(classRef_NSString, selRef_stringWithFormat_, v81, v82);
      v79((void *)v77, selRef_setStringValue_, v83);
    }
    else
    {
      objc_msgSend_ptr((void *)v5->serverInterfaceChangeTextField, selRef_setStringValue_, &stru_100028108);
    }
  }
  else
  {
    v84 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    objc_msgSend_ptr((void *)v5->serverInterfaceTextField, selRef_setStringValue_, v71);
    v84((void *)v5->serverInterfaceTextField, selRef_setHidden_, 0LL);
    v84((void *)v5->serverInterfacePopUpButton, selRef_setHidden_, 1LL);
  }
  objc_msgSend_ptr((void *)v5->serverDiagsTable, selRef_reloadData);
  objc_msgSend_ptr((void *)v5->subViewGatewayOverview, selRef_setNeedsDisplay_, 1LL);
}
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 100026390: using guessed type char *selRef_setStringValue_;
// 1000263A0: using guessed type char *selRef_setTitle_;
// 1000263A8: using guessed type char *selRef_stringWithFormat_;
// 1000263F8: using guessed type char *selRef_setHidden_;
// 100026408: using guessed type char *selRef_setNeedsDisplay_;
// 100026590: using guessed type char *selRef_ipAddress;
// 1000265D0: using guessed type char *selRef_reloadData;
// 100026630: using guessed type char *selRef_componentsSeparatedByString_;
// 100026788: using guessed type char *selRef_hostName;
// 100026928: using guessed type char *selRef_status;
// 100026930: using guessed type char *selRef_pendingInterface;
// 100026940: using guessed type char *selRef_networkInterface;
// 100026A48: using guessed type char *selRef_setEnabled_;
// 100026A98: using guessed type char *selRef_isConnected;
// 100026AA0: using guessed type char *selRef_serviceVersion;
// 100026AA8: using guessed type char *selRef_blackColor;
// 100026AB0: using guessed type char *selRef_setTextColor_;
// 100026AB8: using guessed type char *selRef_upToDate;
// 100026AC0: using guessed type char *selRef_redColor;
// 100026AC8: using guessed type char *selRef_statusString;
// 100026AD0: using guessed type char *selRef_lastTransmission;
// 100026AD8: using guessed type char *selRef_timeIntervalSince1970;
// 100026AE0: using guessed type char *selRef_descriptionWithCalendarFormat_timeZone_locale_;
// 100026AE8: using guessed type char *selRef_uutCount;
// 100026AF0: using guessed type char *selRef_numberOfInterfaces;
// 100026AF8: using guessed type char *selRef_fillNetworkInterfacesPopUp_;
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 1000273B0: using guessed type void *classRef_NSBundle;
// 1000273C0: using guessed type void *classRef_NSString;
// 100027450: using guessed type void *classRef_NSColor;
// 1000284E8: using guessed type __CFString stru_1000284E8;
// 100028DC8: using guessed type __CFString cfstr_Kserverdisconn;
// 100028DE8: using guessed type __CFString cfstr_Kserverconnect;
// 100028E08: using guessed type __CFString cfstr_Kyesstring;
// 100028E28: using guessed type __CFString cfstr_Knostring;
// 100028E68: using guessed type __CFString cfstr__UpdateAvailab;
// 100028E88: using guessed type __CFString cfstr_ABEY1iMP;
// 100028EA8: using guessed type __CFString cfstr_Knotavailables;
// 100028EC8: using guessed type __CFString cfstr_D;
// 100028EE8: using guessed type __CFString cfstr_Kinterfacechan;

//----- (0000000100008D50) ----------------------------------------------------
// GMAppController - (void)fillNetworkInterfacesPopUp:(id) 
void __cdecl -[GMAppController fillNetworkInterfacesPopUp:](struct GMAppController *self, SEL a2, id a3)
{
  id v3; // r14@1
  void (*v4)(void *, const char *, ...); // r15@1
  void *v5; // rbx@1
  __int64 v6; // rax@2
  struct NSPopUpButton *v7; // rbx@3
  unsigned __int64 v8; // r15@4
  void *v9; // rax@5
  void *v10; // rbx@5
  struct NSPopUpButton *v11; // r13@5
  void (*v12)(void *, const char *, ...); // r14@5
  void *v13; // rax@5
  void *v14; // rax@5
  __int64 v15; // rax@5
  void *v16; // rbx@6
  void *v17; // rax@6
  unsigned __int64 v18; // rax@8
  void *v19; // rax@11
  void *v20; // [sp+8h] [bp-48h]@1
  id v21; // [sp+10h] [bp-40h]@4
  signed int v22; // [sp+1Ch] [bp-34h]@4

  v3 = a3;
  v4 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  v5 = objc_msgSend_ptr(a3, selRef_networkInterfaceList);
  v20 = v5;
  v4((void *)self->serverInterfacePopUpButton, selRef_removeAllItems);
  if ( v5 )
  {
    LODWORD(v6) = msgRef_count__objc_msgSend_fixup(v5, &msgRef_count__objc_msgSend_fixup);
    if ( !v6 )
    {
      v7 = self->serverInterfacePopUpButton;
LABEL_11:
      v19 = objc_msgSend_ptr(v3, selRef_networkInterface);
      objc_msgSend_ptr((void *)v7, selRef_selectItemWithTitle_, v19);
      return;
    }
    v21 = v3;
    v22 = -1;
    v8 = 0LL;
    do
    {
      LODWORD(v9) = msgRef_objectAtIndex___objc_msgSend_fixup(v5, &msgRef_objectAtIndex___objc_msgSend_fixup, v8);
      v10 = v9;
      v11 = self->serverInterfacePopUpButton;
      v12 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v13 = objc_msgSend_ptr(v9, selRef_description);
      v12((void *)v11, selRef_addItemWithTitle_, v13);
      v14 = ((void *(*)(void *, const char *, ...))v12)(v21, selRef_pendingInterface);
      LODWORD(v15) = msgRef_length__objc_msgSend_fixup(v14, &msgRef_length__objc_msgSend_fixup);
      if ( v15 )
      {
        v16 = ((void *(*)(void *, const char *, ...))v12)(v10, selRef_networkName);
        v17 = ((void *(*)(void *, const char *, ...))v12)(v21, selRef_pendingInterface);
        if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                                v16,
                                &msgRef_isEqualToString___objc_msgSend_fixup,
                                v17) )
          v22 = v8;
      }
      v5 = v20;
      LODWORD(v18) = msgRef_count__objc_msgSend_fixup(v20, &msgRef_count__objc_msgSend_fixup);
      ++v8;
    }
    while ( v8 < v18 );
    v7 = self->serverInterfacePopUpButton;
    if ( v22 < 0 )
    {
      v3 = v21;
      goto LABEL_11;
    }
    objc_msgSend_ptr((void *)self->serverInterfacePopUpButton, selRef_selectItemAtIndex_, v22);
  }
}
// 100026930: using guessed type char *selRef_pendingInterface;
// 100026940: using guessed type char *selRef_networkInterface;
// 100026B00: using guessed type char *selRef_networkInterfaceList;
// 100026B08: using guessed type char *selRef_removeAllItems;
// 100026B10: using guessed type char *selRef_description;
// 100026B18: using guessed type char *selRef_addItemWithTitle_;
// 100026B20: using guessed type char *selRef_networkName;
// 100026B28: using guessed type char *selRef_selectItemAtIndex_;
// 100026B30: using guessed type char *selRef_selectItemWithTitle_;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (0000000100008F21) ----------------------------------------------------
// GMAppController - (void)resetNetworkInterfacesPopUp:(id) 
void __cdecl -[GMAppController resetNetworkInterfacesPopUp:](struct GMAppController *self, SEL a2, id a3)
{
  objc_msgSend_ptr(self, selRef_fillNetworkInterfacesPopUp_, a3);
}
// 100026AF8: using guessed type char *selRef_fillNetworkInterfacesPopUp_;

//----- (0000000100008F33) ----------------------------------------------------
// GMAppController - (void)updateMachineOverview:(id) 
void __cdecl -[GMAppController updateMachineOverview:](struct GMAppController *self, SEL a2, id a3)
{
  id v3; // r14@1
  struct NSTextField *v4; // r15@1
  void *v5; // rax@1
  struct NSTextField *v6; // r15@1
  void *v7; // rax@1
  struct NSTextField *v8; // r15@1
  void *v9; // rax@1
  struct NSTextField *v10; // r15@1
  void *v11; // rax@1
  void *v12; // rax@1
  struct NSTextField *v13; // r15@1
  void *v14; // rax@1
  struct NSTextField *v15; // rbx@1
  void *v16; // rax@1

  v3 = a3;
  v4 = self->machineSerNumTextField;
  v5 = objc_msgSend_ptr(a3, selRef_serialNumber);
  objc_msgSend_ptr((void *)v4, selRef_setStringValue_, v5);
  v6 = self->machineModelTextField;
  v7 = objc_msgSend_ptr(v3, selRef_productModel);
  objc_msgSend_ptr((void *)v6, selRef_setStringValue_, v7);
  v8 = self->machineNameTextField;
  v9 = objc_msgSend_ptr(v3, selRef_appleCareName);
  objc_msgSend_ptr((void *)v8, selRef_setStringValue_, v9);
  v10 = self->machineCurrentDiagTextField;
  v11 = objc_msgSend_ptr(v3, selRef_currentDiag);
  v12 = objc_msgSend_ptr(classRef_NSString, selRef_stringWithFormat_, &cfstr__, v11);
  objc_msgSend_ptr((void *)v10, selRef_setStringValue_, v12);
  v13 = self->machineCurrentLogTextField;
  v14 = objc_msgSend_ptr(v3, selRef_currentLogPath);
  objc_msgSend_ptr((void *)v13, selRef_setStringValue_, v14);
  v15 = self->machineStatusTextField;
  v16 = objc_msgSend_ptr(v3, selRef_statusString);
  objc_msgSend_ptr((void *)v15, selRef_setStringValue_, v16);
}
// 100026390: using guessed type char *selRef_setStringValue_;
// 1000263A8: using guessed type char *selRef_stringWithFormat_;
// 100026708: using guessed type char *selRef_serialNumber;
// 100026AC8: using guessed type char *selRef_statusString;
// 100026B38: using guessed type char *selRef_productModel;
// 100026B40: using guessed type char *selRef_appleCareName;
// 100026B48: using guessed type char *selRef_currentDiag;
// 100026B50: using guessed type char *selRef_currentLogPath;
// 1000273C0: using guessed type void *classRef_NSString;
// 100028F28: using guessed type __CFString cfstr__;

//----- (0000000100009086) ----------------------------------------------------
// GMAppController - (void)updateSearchResultsView
void __cdecl -[GMAppController updateSearchResultsView](struct GMAppController *self, SEL a2)
{
  __int64 v2; // rax@0
  void (*v3)(void *, const char *, ...); // rbx@1
  struct NSOutlineView *v4; // r14@2
  void *v5; // rax@2
  __int64 v6; // rax@2
  void *v7; // rax@2

  v3 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  objc_msgSend_ptr((void *)self->machineLogTableView, selRef_deselectAll_, self, v2);
  v3((void *)self->outlineViewBrowser, selRef_reloadData);
  if ( (signed __int64)objc_msgSend_ptr(self->searchResults, selRef_numberOfUUTs) > 0 )
  {
    v4 = self->outlineViewBrowser;
    v5 = objc_msgSend_ptr(self->searchResults, selRef_uutList);
    LODWORD(v6) = msgRef_objectAtIndex___objc_msgSend_fixup(v5, &msgRef_objectAtIndex___objc_msgSend_fixup, 0LL);
    v7 = objc_msgSend_ptr(classRef_NSArray, selRef_arrayWithObjects_, v6, 0LL);
    objc_msgSend_ptr((void *)v4, selRef_selectItems_byExtendingSelection_, v7, 0LL);
  }
}
// 1000265D0: using guessed type char *selRef_reloadData;
// 100026778: using guessed type char *selRef_arrayWithObjects_;
// 100026958: using guessed type char *selRef_selectItems_byExtendingSelection_;
// 100026960: using guessed type char *selRef_numberOfUUTs;
// 100026968: using guessed type char *selRef_uutList;
// 100026B58: using guessed type char *selRef_deselectAll_;
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027410: using guessed type void *classRef_NSArray;

//----- (00000001000091B1) ----------------------------------------------------
// GMAppController - (void)updateMachineLogsView:(id) 
void __cdecl -[GMAppController updateMachineLogsView:](struct GMAppController *self, SEL a2, id a3)
{
  id v3; // r14@1
  void *(*v4)(void *, const char *, ...); // rbx@1
  void *v5; // rax@1
  void *v6; // r15@1
  struct NSTableView *v7; // rbx@2
  const char *v8; // rsi@2
  void *v9; // rdi@2
  void *v10; // rdx@2
  void *v11; // rax@3

  v3 = a3;
  v4 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v5 = objc_msgSend_ptr((void *)self->machineLogTableView, selRef_selectedRowIndexes);
  v6 = v4(v5, selRef_lastIndex);
  v4((void *)self->machineLogTableView, selRef_reloadData);
  if ( v6 == (void *)0xFFFFFFFF )
  {
    v7 = self->machineLogTableView;
    v8 = selRef_indexSetWithIndex_;
    v9 = classRef_NSIndexSet;
    v10 = 0LL;
LABEL_3:
    v11 = objc_msgSend_ptr(v9, v8, v10);
    objc_msgSend_ptr((void *)v7, selRef_selectRowIndexes_byExtendingSelection_, v11, 0LL);
    return;
  }
  if ( objc_msgSend_ptr(v3, selRef_numberOfLogs) > v6 )
  {
    v7 = self->machineLogTableView;
    v8 = selRef_indexSetWithIndex_;
    v9 = classRef_NSIndexSet;
    v10 = v6;
    goto LABEL_3;
  }
}
// 1000265D0: using guessed type char *selRef_reloadData;
// 100026B60: using guessed type char *selRef_selectedRowIndexes;
// 100026B68: using guessed type char *selRef_lastIndex;
// 100026B70: using guessed type char *selRef_indexSetWithIndex_;
// 100026B78: using guessed type char *selRef_selectRowIndexes_byExtendingSelection_;
// 100026B80: using guessed type char *selRef_numberOfLogs;
// 100027458: using guessed type void *classRef_NSIndexSet;

//----- (00000001000092DA) ----------------------------------------------------
// GMAppController - (void)clearTextView:(id) 
void __cdecl -[GMAppController clearTextView:](struct GMAppController *self, SEL a2, id a3)
{
  id v3; // rbx@1
  void *v4; // rax@1
  __int64 v5; // rax@1
  __int64 v6; // r14@1
  void *v7; // rax@1

  v3 = a3;
  v4 = objc_msgSend_ptr(a3, selRef_string);
  LODWORD(v5) = msgRef_length__objc_msgSend_fixup(v4, &msgRef_length__objc_msgSend_fixup);
  v6 = v5;
  v7 = objc_msgSend_ptr(classRef_NSString, selRef_stringWithFormat_, &stru_100028108);
  objc_msgSend_ptr(v3, selRef_replaceCharactersInRange_withString_, 0LL, v6, v7);
  objc_msgSend_ptr(v3, selRef_scrollRangeToVisible_, 0LL, 0LL);
}
// 1000263A8: using guessed type char *selRef_stringWithFormat_;
// 100026B88: using guessed type char *selRef_string;
// 100026B90: using guessed type char *selRef_replaceCharactersInRange_withString_;
// 100026B98: using guessed type char *selRef_scrollRangeToVisible_;
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000273C0: using guessed type void *classRef_NSString;

//----- (0000000100009357) ----------------------------------------------------
// GMAppController - (void)fillGatewayTextViewWithString:(id) 
void __cdecl -[GMAppController fillGatewayTextViewWithString:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  id v4; // r14@1
  void *(*v5)(void *, const char *, ...); // r15@1
  void *v6; // rax@1
  void *v7; // rax@1

  v4 = a3;
  v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v6 = objc_msgSend_ptr((void *)self->gatewayLogTextView, selRef_textStorage, v3);
  v7 = v5(v6, selRef_string);
  if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                           v7,
                           &msgRef_isEqualToString___objc_msgSend_fixup,
                           v4) )
    objc_msgSend_ptr(self, selRef_fillTextView_withString_, self->gatewayLogTextView, v4);
}
// 100026B88: using guessed type char *selRef_string;
// 100026BA0: using guessed type char *selRef_textStorage;
// 100026BA8: using guessed type char *selRef_fillTextView_withString_;
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (00000001000093DA) ----------------------------------------------------
// GMAppController - (void)fillServerTextViewWithString:(id) 
void __cdecl -[GMAppController fillServerTextViewWithString:](struct GMAppController *self, SEL a2, id a3)
{
  id v3; // r14@1
  void *(*v4)(void *, const char *, ...); // r15@1
  void *v5; // rax@1
  void *v6; // rbx@1
  void *v7; // rax@1
  void *v8; // r13@1
  void *v9; // rax@1
  void *v10; // r14@1
  void *v11; // rbx@1
  void *v12; // rax@1
  id v13; // [sp+10h] [bp-30h]@1

  v3 = a3;
  v13 = a3;
  v4 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v5 = objc_msgSend_ptr((void *)self->serverLogTextView, selRef_textStorage);
  v6 = v4(v5, selRef_string);
  v7 = v4(classRef_NSCharacterSet, selRef_whitespaceAndNewlineCharacterSet);
  v8 = v4(v6, selRef_componentsSeparatedByCharactersInSet_, v7);
  v9 = v4(classRef_NSCharacterSet, selRef_whitespaceAndNewlineCharacterSet);
  v10 = v4(v3, selRef_componentsSeparatedByCharactersInSet_, v9);
  v11 = v4(v8, selRef_componentsJoinedByString_, &stru_100028108);
  v12 = v4(v10, selRef_componentsJoinedByString_, &stru_100028108);
  if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                           v11,
                           &msgRef_isEqualToString___objc_msgSend_fixup,
                           v12) )
    objc_msgSend_ptr(self, selRef_fillTextView_withString_, self->serverLogTextView, v13);
}
// 100026B88: using guessed type char *selRef_string;
// 100026BA0: using guessed type char *selRef_textStorage;
// 100026BA8: using guessed type char *selRef_fillTextView_withString_;
// 100026BB0: using guessed type char *selRef_whitespaceAndNewlineCharacterSet;
// 100026BB8: using guessed type char *selRef_componentsSeparatedByCharactersInSet_;
// 100026BC0: using guessed type char *selRef_componentsJoinedByString_;
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027460: using guessed type void *classRef_NSCharacterSet;

//----- (00000001000094E8) ----------------------------------------------------
// GMAppController - (void)fillMachineTextViewWithString:(id) 
void __cdecl -[GMAppController fillMachineTextViewWithString:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  void *v4; // r14@1
  void *(*v5)(void *, const char *, ...); // rbx@1
  void *v6; // rax@1
  void *(*v7)(void *, const char *, ...); // r15@3
  void *v8; // rax@3
  void *v9; // rbx@3
  void *v10; // rax@3
  void *v11; // r12@3
  void *v12; // rax@3
  void *v13; // rbx@3
  void *v14; // rax@3
  void *v15; // r12@3
  void *v16; // rax@3
  void *v17; // r14@3
  void *v18; // r12@3
  void *v19; // rax@3
  struct NSTextView *v20; // rbx@4
  void *v21; // rax@4
  void *v22; // rax@4
  void *v23; // [sp+0h] [bp-30h]@3

  v4 = a3;
  v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v6 = objc_msgSend_ptr((void *)self->machineLogPopUpButton, selRef_selectedItem, v3);
  if ( !v5(v6, selRef_tag) )
    v4 = sub_1000130C5(v4);
  v7 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v8 = objc_msgSend_ptr((void *)self->machineLogTextView, selRef_textStorage, v4);
  v9 = v7(v8, selRef_string);
  v10 = v7((void *)self->machineLogSearchField, selRef_stringValue);
  v11 = sub_100012F74(v9, v10);
  v12 = v7((void *)self->machineLogSearchField, selRef_stringValue);
  v13 = sub_100012F74(v4, v12);
  v14 = v7(classRef_NSCharacterSet, selRef_whitespaceAndNewlineCharacterSet);
  v15 = v7(v11, selRef_componentsSeparatedByCharactersInSet_, v14);
  v16 = v7(classRef_NSCharacterSet, selRef_whitespaceAndNewlineCharacterSet);
  v17 = v7(v13, selRef_componentsSeparatedByCharactersInSet_, v16);
  v18 = v7(v15, selRef_componentsJoinedByString_, &stru_100028108);
  v19 = v7(v17, selRef_componentsJoinedByString_, &stru_100028108);
  if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                           v18,
                           &msgRef_isEqualToString___objc_msgSend_fixup,
                           v19) )
  {
    v20 = self->machineLogTextView;
    v21 = objc_msgSend_ptr((void *)self->machineLogSearchField, selRef_stringValue);
    v22 = sub_100012F74(v23, v21);
    objc_msgSend_ptr(self, selRef_fillTextView_withString_, v20, v22);
  }
}
// 100026410: using guessed type char *selRef_selectedItem;
// 100026418: using guessed type char *selRef_tag;
// 100026528: using guessed type char *selRef_stringValue;
// 100026B88: using guessed type char *selRef_string;
// 100026BA0: using guessed type char *selRef_textStorage;
// 100026BA8: using guessed type char *selRef_fillTextView_withString_;
// 100026BB0: using guessed type char *selRef_whitespaceAndNewlineCharacterSet;
// 100026BB8: using guessed type char *selRef_componentsSeparatedByCharactersInSet_;
// 100026BC0: using guessed type char *selRef_componentsJoinedByString_;
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027460: using guessed type void *classRef_NSCharacterSet;

//----- (00000001000096A0) ----------------------------------------------------
// GMAppController - (void)fillTextView:(id) withString:(id) 
void __cdecl -[GMAppController fillTextView:withString:](struct GMAppController *self, SEL a2, id a3, id a4)
{
  id v4; // r13@1
  id v5; // r15@1
  struct NSTextView *v6; // rdi@1
  __int64 v7; // rdx@1
  void *v8; // rax@1
  void *(*v9)(void *, const char *, ...); // rbx@3
  void *v10; // rax@3
  void *v11; // r12@3
  void *v12; // rax@3
  void *v13; // rax@3
  void *v14; // rax@3
  void *v15; // rax@3
  void *v16; // rbx@3
  void (*v17)(void *, const char *, ...); // r14@4
  void *v18; // rax@4
  void *v19; // rax@5
  void *v20; // r14@5
  void *(*v21)(void *, const char *, ...); // rbx@5
  void *v22; // rax@5
  void *v23; // rax@5
  void *v24; // rax@5
  void *v25; // r12@5
  void *v26; // rax@5
  void *v27; // r13@5
  const char *v28; // rax@5
  const char *v29; // r14@5
  double v30; // ST38_8@6
  double v31; // xmm0_8@6
  void *(*v32)(void *, const char *, ...); // rbx@8
  void *v33; // rax@8
  __int64 v34; // rax@8
  void *v35; // rax@8
  void *v36; // rax@8
  __int64 v37; // rax@8
  void (*v38)(void *, const char *, ...); // rbx@11
  void *v39; // rax@11
  __int64 v40; // rax@11
  void (*v41)(void *, const char *, ...); // rbx@13
  void *v42; // [sp+18h] [bp-B8h]@3
  __int64 v43; // [sp+20h] [bp-B0h]@3
  struct GMAppController *v44; // [sp+28h] [bp-A8h]@1
  double v45; // [sp+30h] [bp-A0h]@6
  double v46; // [sp+38h] [bp-98h]@6
  __int128 v47; // [sp+40h] [bp-90h]@6
  __int128 v48; // [sp+50h] [bp-80h]@7
  double v49; // [sp+58h] [bp-78h]@6
  __int128 v50; // [sp+60h] [bp-70h]@6
  __int128 v51; // [sp+70h] [bp-60h]@7
  double v52; // [sp+78h] [bp-58h]@6
  __int128 v53; // [sp+80h] [bp-50h]@6
  __int128 v54; // [sp+90h] [bp-40h]@7

  v4 = a4;
  v5 = a3;
  v44 = self;
  v6 = self->machineLogTextView;
  v7 = 0LL;
  v8 = 0LL;
  if ( (id)v6 == v5 )
    v8 = objc_msgSend_ptr((void *)v6, selRef_selectedRange, 0LL);
  v42 = v8;
  v43 = v7;
  v9 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v10 = objc_msgSend_ptr(
          classRef_NSFont,
          selRef_fontWithName_size_,
          &cfstr_Monaco,
          COERCE_DOUBLE(4621819117588971520LL));
  v11 = v9(classRef_NSMutableDictionary, selRef_dictionaryWithObject_forKey_, v10, *(_QWORD *)NSFontAttributeName_ptr);
  v12 = v9(classRef_NSColor, selRef_blackColor);
  v9(v11, selRef_setObject_forKey_, v12, *(_QWORD *)NSForegroundColorAttributeName_ptr);
  v13 = v9(classRef_NSParagraphStyle, selRef_defaultParagraphStyle);
  v14 = v9(v13, selRef_mutableCopy);
  LODWORD(v15) = msgRef_autorelease__objc_msgSend_fixup(v14, &msgRef_autorelease__objc_msgSend_fixup);
  v16 = v15;
  if ( v15 )
  {
    v17 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    v18 = objc_msgSend_ptr(classRef_NSArray, selRef_array);
    v17(v16, selRef_setTabStops_, v18);
    v17(v16, selRef_setDefaultTabInterval_, COERCE_DOUBLE(4628574517030027264LL));
    v17(v11, selRef_setObject_forKey_, v16, *(_QWORD *)NSParagraphStyleAttributeName_ptr);
  }
  LODWORD(v19) = msgRef_alloc__objc_msgSend_fixup(classRef_NSMutableAttributedString, &msgRef_alloc__objc_msgSend_fixup);
  v20 = v19;
  v21 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v22 = objc_msgSend_ptr(classRef_NSCharacterSet, selRef_whitespaceAndNewlineCharacterSet);
  v23 = v21(v4, selRef_stringByTrimmingCharactersInSet_, v22);
  v24 = v21(v20, selRef_initWithString_attributes_, v23, v11);
  msgRef_autorelease__objc_msgSend_fixup(v24, &msgRef_autorelease__objc_msgSend_fixup);
  v25 = v21(v5, selRef_textStorage);
  v26 = v21(v5, selRef_enclosingScrollView);
  v27 = v26;
  v28 = (const char *)v21(v26, selRef_contentView);
  v29 = v28;
  if ( v28 )
  {
    objc_msgSend_stret(&v53, v28, selRef_documentVisibleRect);
    v30 = *((double *)&v53 + 1);
    objc_msgSend_stret(&v50, v29, selRef_documentVisibleRect);
    v46 = v30 + v52;
    objc_msgSend_stret(&v47, v29, selRef_documentRect);
    v31 = v49;
    v45 = v49;
  }
  else
  {
    v54 = 0LL;
    v53 = 0LL;
    v51 = 0LL;
    v50 = 0LL;
    v48 = 0LL;
    v47 = 0LL;
    v45 = 0.0;
    v31 = 0.0;
    v46 = 0.0;
  }
  v32 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  objc_msgSend_ptr(v27, selRef_lineScroll);
  v33 = v32(v5, selRef_textStorage);
  LODWORD(v34) = msgRef_length__objc_msgSend_fixup(v33, &msgRef_length__objc_msgSend_fixup);
  v32(v25, selRef_replaceCharactersInRange_withAttributedString_, 0LL, v34);
  LODWORD(v35) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAttributedString, &msgRef_alloc__objc_msgSend_fixup);
  v36 = v32(v35, selRef_initWithString_, &stru_100028FA8);
  LODWORD(v37) = msgRef_autorelease__objc_msgSend_fixup(v36, &msgRef_autorelease__objc_msgSend_fixup);
  v32(v25, selRef_appendAttributedString_, v37);
  if ( v46 > v45 - v31 )
  {
    if ( (id)v44->machineLogTextView == v5 )
      objc_msgSend_ptr(v5, selRef_scrollRangeToVisible_, 0LL, 0LL);
    v38 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    v39 = objc_msgSend_ptr(v5, selRef_textStorage);
    LODWORD(v40) = msgRef_length__objc_msgSend_fixup(v39, &msgRef_length__objc_msgSend_fixup);
    v38(v5, selRef_scrollRangeToVisible_, v40, 0LL);
    v38(v27, selRef_display);
    v38((void *)v44->window, selRef_display);
    if ( v43 )
      objc_msgSend_ptr(v5, selRef_setSelectedRange_, v42);
  }
  v41 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  objc_msgSend_ptr(v27, selRef_display);
  v41((void *)v44->window, selRef_display);
}
// 100021040: using guessed type void *NSFontAttributeName_ptr;
// 100021048: using guessed type void *NSForegroundColorAttributeName_ptr;
// 100021050: using guessed type void *NSParagraphStyleAttributeName_ptr;
// 100026320: using guessed type char *selRef_enclosingScrollView;
// 100026348: using guessed type char *selRef_contentView;
// 100026598: using guessed type char *selRef_setObject_forKey_;
// 100026AA8: using guessed type char *selRef_blackColor;
// 100026B98: using guessed type char *selRef_scrollRangeToVisible_;
// 100026BA0: using guessed type char *selRef_textStorage;
// 100026BB0: using guessed type char *selRef_whitespaceAndNewlineCharacterSet;
// 100026BC8: using guessed type char *selRef_selectedRange;
// 100026BD0: using guessed type char *selRef_fontWithName_size_;
// 100026BD8: using guessed type char *selRef_dictionaryWithObject_forKey_;
// 100026BE0: using guessed type char *selRef_defaultParagraphStyle;
// 100026BE8: using guessed type char *selRef_mutableCopy;
// 100026BF0: using guessed type char *selRef_array;
// 100026BF8: using guessed type char *selRef_setTabStops_;
// 100026C00: using guessed type char *selRef_setDefaultTabInterval_;
// 100026C08: using guessed type char *selRef_stringByTrimmingCharactersInSet_;
// 100026C10: using guessed type char *selRef_initWithString_attributes_;
// 100026C18: using guessed type char *selRef_documentVisibleRect;
// 100026C20: using guessed type char *selRef_documentRect;
// 100026C28: using guessed type char *selRef_lineScroll;
// 100026C30: using guessed type char *selRef_replaceCharactersInRange_withAttributedString_;
// 100026C38: using guessed type char *selRef_initWithString_;
// 100026C40: using guessed type char *selRef_appendAttributedString_;
// 100026C48: using guessed type char *selRef_display;
// 100026C50: using guessed type char *selRef_setSelectedRange_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272C0: using guessed type int (__fastcall *msgRef_autorelease__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027408: using guessed type void *classRef_NSMutableDictionary;
// 100027410: using guessed type void *classRef_NSArray;
// 100027450: using guessed type void *classRef_NSColor;
// 100027460: using guessed type void *classRef_NSCharacterSet;
// 100027468: using guessed type void *classRef_NSFont;
// 100027470: using guessed type void *classRef_NSParagraphStyle;
// 100028F88: using guessed type __CFString cfstr_Monaco;
// 100028FA8: using guessed type __CFString stru_100028FA8;

//----- (0000000100009ABD) ----------------------------------------------------
// GMAppController - (void)showLoginSheet
void __cdecl -[GMAppController showLoginSheet](struct GMAppController *self, SEL a2)
{
  void (*v2)(void *, const char *, ...); // r14@3

  if ( objc_msgSend_ptr((void *)self->window, selRef_contentView) != (void *)self->subViewNoConnection )
  {
    msgRef_retain__objc_msgSend_fixup(self->mVerticalSplitView, &msgRef_retain__objc_msgSend_fixup);
    objc_msgSend_ptr((void *)self->window, selRef_setContentView_, self->subViewNoConnection);
  }
  v2 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  objc_msgSend_ptr((void *)self->noConnectionProgress, selRef_setHidden_, 1LL);
  v2((void *)self->noConnectionTextField, selRef_setHidden_, 1LL);
  v2(self->mVerticalSplitView, selRef_setNeedsDisplay_, 1LL);
  v2(
    *(void **)NSApp_ptr,
    selRef_beginSheet_modalForWindow_modalDelegate_didEndSelector_contextInfo_,
    self->loginSheet,
    self->window,
    self,
    selRef_loginSheetDidEnd_returnCode_contextInfo_,
    0LL);
}
// 100021038: using guessed type void *NSApp_ptr;
// 100026348: using guessed type char *selRef_contentView;
// 1000263F8: using guessed type char *selRef_setHidden_;
// 100026408: using guessed type char *selRef_setNeedsDisplay_;
// 1000269B8: using guessed type char *selRef_setContentView_;
// 100026C58: using guessed type char *selRef_loginSheetDidEnd_returnCode_contextInfo_;
// 100026C60: using guessed type char *selRef_beginSheet_modalForWindow_modalDelegate_didEndSelector_contextInfo_;
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100009BC5) ----------------------------------------------------
// GMAppController - (void)endLoginSheet:(id) 
void __cdecl -[GMAppController endLoginSheet:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  struct NSButton *v4; // r14@1
  void (*v5)(void *, const char *, ...); // r15@1

  v4 = (struct NSButton *)a3;
  v5 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  objc_msgSend_ptr((void *)self->loginSheet, selRef_orderOut_, v3);
  v5((void *)self->window, selRef_makeKeyAndOrderFront_, self);
  objc_msgSend_ptr(*(void **)NSApp_ptr, selRef_endSheet_returnCode_, self->loginSheet, self->loginLoginButton == v4);
}
// 100021038: using guessed type void *NSApp_ptr;
// 100026A78: using guessed type char *selRef_orderOut_;
// 100026C68: using guessed type char *selRef_makeKeyAndOrderFront_;
// 100026C70: using guessed type char *selRef_endSheet_returnCode_;

//----- (0000000100009C4E) ----------------------------------------------------
// GMAppController - (void)loginSheetDidEnd:(id) returnCode:(int) contextInfo:(void *) 
void __cdecl -[GMAppController loginSheetDidEnd:returnCode:contextInfo:](struct GMAppController *self, SEL a2, id a3, int a4, void *a5)
{
  if ( a4 == 1 )
    objc_msgSend_ptr(
      classRef_NSThread,
      selRef_detachNewThreadSelector_toTarget_withObject_,
      selRef_gatewayLogin,
      self,
      0LL);
  else
    objc_msgSend_ptr(*(void **)NSApp_ptr, selRef_terminate_, self, NSApp_ptr);
}
// 100021038: using guessed type void *NSApp_ptr;
// 100026480: using guessed type char *selRef_gatewayLogin;
// 100026558: using guessed type char *selRef_detachNewThreadSelector_toTarget_withObject_;
// 100026980: using guessed type char *selRef_terminate_;
// 100027400: using guessed type void *classRef_NSThread;

//----- (0000000100009C97) ----------------------------------------------------
// GMAppController - (void)setupBigTextView
void __cdecl -[GMAppController setupBigTextView](struct GMAppController *self, SEL a2)
{
  int v2; // er14@1
  const char *v3; // rax@1
  const char *v4; // rbx@1
  float v5; // xmm0_4@2
  float v6; // xmm2_4@2
  void *v7; // rax@4
  void (*v8)(void *, const char *, ...); // r12@4
  struct NSWindow_ClickWin *v9; // rbx@4
  void *v10; // rax@4
  void *v11; // rax@4
  struct NSWindow *v12; // rbx@4
  void *v13; // rax@4
  void *v14; // rax@4
  void *v15; // r14@4
  const char *v16; // rax@4
  void (*v17)(void *, const char *, ...); // rbx@7
  struct BigTextView *v18; // rsi@7
  float v19; // xmm2_4@8
  double v20; // xmm0_8@9
  struct BigTextView *v21; // rsi@10
  double v22; // xmm0_8@10
  float v23; // ST5C_4@11
  float v24; // xmm0_4@12
  void *v25; // [sp+30h] [bp-140h]@4
  void *v26; // [sp+38h] [bp-138h]@4
  double v27; // [sp+50h] [bp-120h]@4
  __int128 v28; // [sp+60h] [bp-110h]@9
  __int128 v29; // [sp+70h] [bp-100h]@9
  __int128 v30; // [sp+80h] [bp-F0h]@8
  __int128 v31; // [sp+90h] [bp-E0h]@8
  __int128 v32; // [sp+A0h] [bp-D0h]@5
  __int128 v33; // [sp+B0h] [bp-C0h]@6
  __int128 v34; // [sp+C0h] [bp-B0h]@4
  double v35; // [sp+D0h] [bp-A0h]@4
  double v36; // [sp+D8h] [bp-98h]@4
  __int128 v37; // [sp+E0h] [bp-90h]@4
  double v38; // [sp+F0h] [bp-80h]@4
  double v39; // [sp+F8h] [bp-78h]@4
  __int128 v40; // [sp+100h] [bp-70h]@2
  __int128 v41; // [sp+110h] [bp-60h]@3
  double v42; // [sp+118h] [bp-58h]@2
  __int128 v43; // [sp+120h] [bp-50h]@2
  __int128 v44; // [sp+130h] [bp-40h]@2

  v2 = CGWindowLevelForKey(14LL, a2);
  v3 = (const char *)objc_msgSend_ptr(classRef_NSScreen, selRef_mainScreen);
  v4 = v3;
  if ( v3 )
  {
    objc_msgSend_stret(&v43, v3, selRef_frame);
    v5 = *(double *)&v44;
    objc_msgSend_stret(&v40, v4, selRef_frame);
    v6 = v42;
  }
  else
  {
    v44 = 0LL;
    v43 = 0LL;
    v41 = 0LL;
    v40 = 0LL;
    v6 = 0.0;
    v5 = 0.0;
  }
  v37 = 0LL;
  v38 = v5;
  v27 = v6;
  v39 = v6;
  LODWORD(v7) = msgRef_alloc__objc_msgSend_fixup(classRef_NSWindow_ClickWin, &msgRef_alloc__objc_msgSend_fixup);
  v8 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  self->mClickWin = (struct NSWindow_ClickWin *)objc_msgSend_ptr(
                                                  v7,
                                                  selRef_initWithContentRect_styleMask_backing_defer_,
                                                  0LL,
                                                  2LL,
                                                  1LL,
                                                  0LL,
                                                  0LL,
                                                  v5,
                                                  v6);
  v8(self->mClickWin, selRef_setOpaque_, 0LL);
  v8(self->mClickWin, selRef_setAlphaValue_, COERCE_DOUBLE(4591870180066957722LL));
  v8(self->mClickWin, selRef_setLevel_, v2);
  v9 = self->mClickWin;
  v10 = ((void *(*)(void *, const char *, ...))v8)(classRef_NSColor, selRef_blueColor);
  v8(v9, selRef_setBackgroundColor_, v10);
  v8(self->mClickWin, selRef_setReleasedWhenClosed_, 0LL);
  v8(&cfstr_90, selRef_floatValue);
  v8(&cfstr_20, selRef_floatValue);
  v8(classRef_NSColor, selRef_blackColor);
  v25 = ((void *(*)(void *, const char *, ...))v8)(classRef_NSColor, selRef_whiteColor);
  v26 = ((void *(*)(void *, const char *, ...))v8)(classRef_NSColor, selRef_blackColor);
  v34 = 0LL;
  v35 = (float)((float)(-1.5881868e-23 * v5) / 100.0);
  v36 = (float)((float)((float)(-1.5881868e-23 * v5) * v6) / 100.0);
  LODWORD(v11) = msgRef_alloc__objc_msgSend_fixup(classRef_NSWindow, &msgRef_alloc__objc_msgSend_fixup);
  self->mPassFailOverlayWin = (struct NSWindow *)((void *(*)(void *, const char *, ...))v8)(
                                                   v11,
                                                   selRef_initWithContentRect_styleMask_backing_defer_,
                                                   0LL,
                                                   2LL,
                                                   1LL,
                                                   0LL,
                                                   0LL,
                                                   *(_QWORD *)&v35,
                                                   *(_QWORD *)&v36);
  v8((void *)self->mPassFailOverlayWin, selRef_setReleasedWhenClosed_, 0LL);
  v8((void *)self->mPassFailOverlayWin, selRef_setOpaque_, 0LL);
  v8((void *)self->mPassFailOverlayWin, selRef_setAlphaValue_, COERCE_DOUBLE(4607182418800017408LL));
  v8((void *)self->mPassFailOverlayWin, selRef_setLevel_, v2);
  v12 = self->mPassFailOverlayWin;
  v13 = ((void *(*)(void *, const char *, ...))v8)(classRef_NSColor, selRef_clearColor);
  v8((void *)v12, selRef_setBackgroundColor_, v13);
  LODWORD(v14) = msgRef_alloc__objc_msgSend_fixup(classRef_BigTextView, &msgRef_alloc__objc_msgSend_fixup);
  v15 = v14;
  v16 = (const char *)((void *(*)(void *, const char *, ...))v8)((void *)self->mPassFailOverlayWin, selRef_contentView);
  if ( v16 )
  {
    objc_msgSend_stret(&v32, v16, selRef_frame);
  }
  else
  {
    v33 = 0LL;
    v32 = 0LL;
  }
  v17 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  self->mPassFailOverlayView = (struct BigTextView *)objc_msgSend_ptr(
                                                       v15,
                                                       selRef_initWithFrame_,
                                                       (_QWORD)v32,
                                                       *((_QWORD *)&v32 + 1),
                                                       (_QWORD)v33,
                                                       *((_QWORD *)&v33 + 1));
  v17(self->mPassFailOverlayView, selRef_setClicktWindow_, self->mClickWin);
  v17(self->mClickWin, selRef_setBigTextWindow_, self->mPassFailOverlayWin);
  v17((void *)self->mPassFailOverlayWin, selRef_setContentView_, self->mPassFailOverlayView);
  v17(self->mPassFailOverlayView, selRef_setForegroundColor_, v25);
  v17(self->mPassFailOverlayView, selRef_setBackgroundColor_, v26);
  v17(self->mPassFailOverlayView, selRef_setShadowColor_);
  v17(self->mPassFailOverlayView, selRef_setAlpha_, COERCE_DOUBLE(1059263087LL));
  v18 = self->mPassFailOverlayView;
  if ( v18 )
  {
    objc_msgSend_stret(&v30, (const char *)v18, selRef_frame);
    v21 = self->mPassFailOverlayView;
    v22 = (v5 - *(double *)&v31) * 0.5;
    v19 = v22;
    if ( v21 )
    {
      v23 = v22;
      objc_msgSend_stret(&v28, (const char *)v21, selRef_frame);
      v19 = v23;
      v20 = *((double *)&v29 + 1);
      goto LABEL_12;
    }
  }
  else
  {
    v31 = 0LL;
    v30 = 0LL;
    v19 = v5 * 0.5;
  }
  v29 = 0LL;
  v28 = 0LL;
  v20 = 0.0;
LABEL_12:
  v24 = (v27 - v20) * 0.5;
  objc_msgSend_ptr((void *)self->mPassFailOverlayWin, selRef_setFrameOrigin_, v19, v24);
}
// 100015EC0: using guessed type int __fastcall CGWindowLevelForKey(_QWORD, _QWORD);
// 100026348: using guessed type char *selRef_contentView;
// 1000269B8: using guessed type char *selRef_setContentView_;
// 100026A10: using guessed type char *selRef_frame;
// 100026AA8: using guessed type char *selRef_blackColor;
// 100026C78: using guessed type char *selRef_mainScreen;
// 100026C80: using guessed type char *selRef_initWithContentRect_styleMask_backing_defer_;
// 100026C88: using guessed type char *selRef_setOpaque_;
// 100026C90: using guessed type char *selRef_setAlphaValue_;
// 100026C98: using guessed type char *selRef_setLevel_;
// 100026CA0: using guessed type char *selRef_blueColor;
// 100026CA8: using guessed type char *selRef_setBackgroundColor_;
// 100026CB0: using guessed type char *selRef_setReleasedWhenClosed_;
// 100026CB8: using guessed type char *selRef_floatValue;
// 100026CC0: using guessed type char *selRef_whiteColor;
// 100026CC8: using guessed type char *selRef_clearColor;
// 100026CD0: using guessed type char *selRef_initWithFrame_;
// 100026CD8: using guessed type char *selRef_setClicktWindow_;
// 100026CE0: using guessed type char *selRef_setBigTextWindow_;
// 100026CE8: using guessed type char *selRef_setForegroundColor_;
// 100026CF0: using guessed type char *selRef_setShadowColor_;
// 100026CF8: using guessed type char *selRef_setAlpha_;
// 100026D00: using guessed type char *selRef_setFrameOrigin_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027450: using guessed type void *classRef_NSColor;
// 100027488: using guessed type void *classRef_NSScreen;
// 100028FC8: using guessed type __CFString cfstr_90;
// 100028FE8: using guessed type __CFString cfstr_20;

//----- (000000010000A2A1) ----------------------------------------------------
// GMAppController - (void)showOverlayWindow:(id) 
void __cdecl -[GMAppController showOverlayWindow:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  id v4; // r14@1
  struct BigTextView *v5; // r15@1
  void *v6; // rax@1

  v4 = a3;
  v5 = self->mPassFailOverlayView;
  v6 = objc_msgSend_ptr(classRef_NSColor, selRef_redColor, v3);
  objc_msgSend_ptr(v5, selRef_setBackgroundColor_, v6);
  objc_msgSend_ptr(self->mPassFailOverlayView, selRef_setString_, v4);
  objc_msgSend_ptr(self->mClickWin, selRef_update);
  objc_msgSend_ptr(self->mClickWin, selRef_orderFront_, 0LL);
  objc_msgSend_ptr(self->mPassFailOverlayView, selRef_display);
  objc_msgSend_ptr((void *)self->mPassFailOverlayWin, selRef_update);
  objc_msgSend_ptr((void *)self->mPassFailOverlayWin, selRef_orderFront_, 0LL);
}
// 100026AC0: using guessed type char *selRef_redColor;
// 100026C48: using guessed type char *selRef_display;
// 100026CA8: using guessed type char *selRef_setBackgroundColor_;
// 100026D08: using guessed type char *selRef_setString_;
// 100026D10: using guessed type char *selRef_update;
// 100026D18: using guessed type char *selRef_orderFront_;
// 100027450: using guessed type void *classRef_NSColor;

//----- (000000010000A387) ----------------------------------------------------
// GMAppController - (void)showBigHonkingText:(id) 
void __cdecl -[GMAppController showBigHonkingText:](struct GMAppController *self, SEL a2, id a3)
{
  id v3; // rbx@1

  v3 = a3;
  if ( a3 )
  {
    msgRef_retain__objc_msgSend_fixup(a3, &msgRef_retain__objc_msgSend_fixup);
    objc_msgSend_ptr(
      self,
      selRef_performSelectorOnMainThread_withObject_waitUntilDone_,
      selRef_showOverlayWindow_,
      v3,
      0LL);
    msgRef_release__objc_msgSend_fixup(v3, &msgRef_release__objc_msgSend_fixup);
  }
}
// 100026470: using guessed type char *selRef_performSelectorOnMainThread_withObject_waitUntilDone_;
// 100026D20: using guessed type char *selRef_showOverlayWindow_;
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000A3E2) ----------------------------------------------------
// GMAppController - (void)applicationDidFinishLaunching:(id) 
void __cdecl -[GMAppController applicationDidFinishLaunching:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  struct NSOutlineView *v4; // r14@1
  void *v5; // rax@1
  struct NSOutlineView *v6; // rbx@1
  void *v7; // rax@1
  struct NSOutlineView *v8; // rbx@1
  void *v9; // rax@1

  v4 = self->outlineViewBrowser;
  v5 = objc_msgSend_ptr(classRef_NSArray, selRef_arrayWithObjects_, self->gateway, 0LL, v3);
  objc_msgSend_ptr((void *)v4, selRef_selectItems_byExtendingSelection_, v5, 0LL);
  v6 = self->outlineViewBrowser;
  v7 = objc_msgSend_ptr((void *)v6, selRef_itemAtRow_, 0LL);
  objc_msgSend_ptr((void *)v6, selRef_expandItem_, v7);
  v8 = self->outlineViewBrowser;
  v9 = objc_msgSend_ptr((void *)v8, selRef_itemAtRow_, 1LL);
  objc_msgSend_ptr((void *)v8, selRef_expandItem_, v9);
  objc_msgSend_ptr(self, selRef_showNoConnectionView);
  objc_msgSend_ptr(self, selRef_connectToGatewayController);
}
// 100026440: using guessed type char *selRef_itemAtRow_;
// 100026478: using guessed type char *selRef_showNoConnectionView;
// 1000264F0: using guessed type char *selRef_connectToGatewayController;
// 100026778: using guessed type char *selRef_arrayWithObjects_;
// 100026958: using guessed type char *selRef_selectItems_byExtendingSelection_;
// 100026D28: using guessed type char *selRef_expandItem_;
// 100027410: using guessed type void *classRef_NSArray;

//----- (000000010000A4C2) ----------------------------------------------------
// GMAppController - (uint64_t)applicationShouldTerminate:(id) 
uint64_t __cdecl -[GMAppController applicationShouldTerminate:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  uint64_t result; // rax@1
  char v5; // cl@2
  __int64 v6; // [sp-8h] [bp-10h]@1

  v6 = v3;
  result = 1LL;
  if ( self->currentSubView == self->subViewGatewaySettings )
  {
    v5 = (unsigned __int64)objc_msgSend_ptr((void *)self->gwSaveSettingsButton, selRef_isEnabled, v6);
    result = 1LL;
    if ( v5 )
    {
      self->showingSheet = 1;
      objc_msgSend_ptr(self, selRef_showSaveChangesAlert_, self);
      result = 0LL;
    }
  }
  return result;
}
// 100026A40: using guessed type char *selRef_isEnabled;
// 100026D30: using guessed type char *selRef_showSaveChangesAlert_;

//----- (000000010000A532) ----------------------------------------------------
// GMAppController - (void)applicationWillTerminate:(id) 
void __cdecl -[GMAppController applicationWillTerminate:](struct GMAppController *self, SEL a2, id a3)
{
  struct GMAppController *v3; // r15@1
  void (*v4)(void *, const char *, ...); // rbx@1
  void *v5; // rax@1
  void *v6; // r14@1
  void *v7; // rax@1
  __int64 v8; // rbx@1
  const char *v9; // rax@1
  void *v10; // rdi@4
  struct NSTimer *v11; // rdi@6
  __int128 v12; // [sp+0h] [bp-40h]@2
  __int128 v13; // [sp+10h] [bp-30h]@2

  v3 = self;
  self->monitorServers = 0;
  v4 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  v5 = objc_msgSend_ptr(classRef_NSNotificationCenter, selRef_defaultCenter, a3);
  v4(v5, selRef_removeObserver_, self);
  v6 = ((void *(*)(void *, const char *, ...))v4)(classRef_NSUserDefaults, selRef_standardUserDefaults);
  v7 = ((void *(*)(void *, const char *, ...))v4)(self->mVerticalSplitView, selRef_subviews);
  v8 = 0LL;
  LODWORD(v9) = msgRef_objectAtIndex___objc_msgSend_fixup(v7, &msgRef_objectAtIndex___objc_msgSend_fixup, 0LL);
  if ( v9 )
  {
    objc_msgSend_stret(&v12, v9, selRef_frame);
    v8 = (unsigned int)(signed int)floor(*(double *)&v13);
  }
  else
  {
    v13 = 0LL;
    v12 = 0LL;
  }
  objc_msgSend_ptr(
    v6,
    selRef_setInteger_forKey_,
    v8,
    &cfstr_Browserwidth,
    (_QWORD)v12,
    *((_QWORD *)&v12 + 1),
    (_QWORD)v13,
    *((_QWORD *)&v13 + 1));
  v10 = self->controllerServiceRef;
  if ( v10 )
    sub_1000120C7(v10, 0);
  v11 = v3->adrConnectionTimer;
  if ( v11 )
  {
    objc_msgSend_ptr((void *)v11, selRef_invalidate, (_QWORD)v12, *((_QWORD *)&v12 + 1));
    v3->adrConnectionTimer = 0LL;
  }
}
// 100026360: using guessed type char *selRef_standardUserDefaults;
// 1000269D0: using guessed type char *selRef_invalidate;
// 100026A10: using guessed type char *selRef_frame;
// 100026D38: using guessed type char *selRef_defaultCenter;
// 100026D40: using guessed type char *selRef_removeObserver_;
// 100026D48: using guessed type char *selRef_subviews;
// 100026D50: using guessed type char *selRef_setInteger_forKey_;
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 1000273A8: using guessed type void *classRef_NSUserDefaults;
// 1000274A8: using guessed type void *classRef_NSNotificationCenter;
// 100028148: using guessed type __CFString cfstr_Browserwidth;

//----- (000000010000A642) ----------------------------------------------------
// GMAppController - (void)controlTextDidChange:(id) 
void __cdecl -[GMAppController controlTextDidChange:](struct GMAppController *self, SEL a2, id a3)
{
  id v3; // rbx@1
  void (*v4)(void *, const char *, ...); // r14@2
  void *v5; // rax@2
  void *v6; // rbx@2
  void *v7; // rax@2
  void *v8; // rax@2
  void *v9; // rax@4
  __int64 v10; // rax@4
  struct NSOutlineView *v11; // rbx@5
  void *(*v12)(void *, const char *, ...); // r14@5
  void *v13; // rax@5
  void *v14; // r14@5
  __int64 v15; // rax@5
  void *(*v16)(void *, const char *, ...); // rbx@6
  void *v17; // rax@6
  void *v18; // rax@6
  const char *v19; // rsi@7
  void *(*v20)(void *, const char *, ...); // r12@8
  void *v21; // rbx@8
  void *v22; // rax@8
  void *v23; // rax@8
  struct NSOutlineView *v24; // rbx@11
  void *(*v25)(void *, const char *, ...); // r14@11
  void *v26; // rax@11
  void *v27; // r14@11
  __int64 v28; // rax@11
  void *(*v29)(void *, const char *, ...); // rbx@13
  void *v30; // rax@13
  void *v31; // r12@13
  void *v32; // rax@13
  void *v33; // rbx@13
  struct NSTextView *v34; // r14@15
  void (*v35)(void *, const char *, ...); // r12@15
  void *v36; // rax@15
  void *v37; // rax@15
  void *(*v38)(void *, const char *, ...); // r14@17
  void *v39; // rbx@17
  void *v40; // rax@17
  void *v41; // rax@18
  void *v42; // rax@19
  void *v43; // rax@20
  void *v44; // rax@21
  void *(*v45)(void *, const char *, ...); // r14@22
  void *v46; // rbx@22
  void *v47; // rax@22
  void *(*v48)(void *, const char *, ...); // r14@23
  void *v49; // rbx@23
  void *v50; // rax@23
  void *(*v51)(void *, const char *, ...); // r14@24
  void *v52; // rbx@24
  void *v53; // rax@24
  void *(*v54)(void *, const char *, ...); // r14@25
  void *v55; // rbx@25
  void *v56; // rax@25
  void *v57; // rax@26
  void *v58; // rax@27
  const char *v59; // rsi@28
  signed __int64 v60; // rdx@28

  v3 = a3;
  if ( objc_msgSend_ptr(a3, selRef_object) == (void *)self->gatewayLogSearchField )
  {
    v4 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    v5 = objc_msgSend_ptr(self->gateway, selRef_logContents);
    v4(self, selRef_fillGatewayTextViewWithString_, v5);
    v6 = ((void *(*)(void *, const char *, ...))v4)(self->gateway, selRef_logContents);
    v7 = ((void *(*)(void *, const char *, ...))v4)((void *)self->gatewayLogSearchField, selRef_stringValue);
    v8 = sub_100012F74(v6, v7);
    v4(self, selRef_fillGatewayTextViewWithString_, v8);
  }
  else if ( objc_msgSend_ptr(v3, selRef_object) == (void *)self->serverLogSearchField )
  {
    v9 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_allSelectedItems);
    LODWORD(v10) = msgRef_count__objc_msgSend_fixup(v9, &msgRef_count__objc_msgSend_fixup);
    if ( v10 )
    {
      v11 = self->outlineViewBrowser;
      v12 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v13 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_selectedRow);
      v14 = v12((void *)v11, selRef_itemAtRow_, v13);
      LODWORD(v15) = msgRef_self__objc_msgSend_fixup(classRef_GMServerInfo, &msgRef_self__objc_msgSend_fixup);
      if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                              v14,
                              &msgRef_isKindOfClass___objc_msgSend_fixup,
                              v15) )
      {
        v16 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
        v17 = objc_msgSend_ptr((void *)self->serverLogPopUpButton, selRef_selectedItem);
        v18 = v16(v17, selRef_title);
        if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                                v18,
                                &msgRef_isEqualToString___objc_msgSend_fixup,
                                &cfstr_Ast_unittest_l) )
          v19 = selRef_activityLogContents;
        else
          v19 = selRef_transactionLogContents;
        v20 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
        v21 = objc_msgSend_ptr(v14, v19);
        v22 = v20((void *)self->serverLogSearchField, selRef_stringValue);
        v23 = sub_100012F74(v21, v22);
        v20(self, selRef_fillServerTextViewWithString_, v23);
      }
    }
  }
  else if ( objc_msgSend_ptr(v3, selRef_object) == (void *)self->machineLogSearchField )
  {
    v24 = self->outlineViewBrowser;
    v25 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v26 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_selectedRow);
    v27 = v25((void *)v24, selRef_itemAtRow_, v26);
    LODWORD(v28) = msgRef_self__objc_msgSend_fixup(classRef_GMMachineInfo, &msgRef_self__objc_msgSend_fixup);
    if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                            v27,
                            &msgRef_isKindOfClass___objc_msgSend_fixup,
                            v28) )
    {
      if ( v27 )
      {
        v29 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
        v30 = objc_msgSend_ptr((void *)self->machineLogPopUpButton, selRef_selectedItem);
        v31 = v29(v30, selRef_tag);
        v32 = v29(v27, selRef_currentLog);
        v33 = v32;
        if ( !v31 )
          v33 = sub_1000130C5(v32);
        v34 = self->machineLogTextView;
        v35 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
        v36 = objc_msgSend_ptr((void *)self->machineLogSearchField, selRef_stringValue);
        v37 = sub_100012F74(v33, v36);
        v35(self, selRef_fillTextView_withString_, v34, v37);
      }
    }
  }
  if ( self->currentSubView == self->subViewGatewaySettings )
  {
    v38 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v39 = objc_msgSend_ptr((void *)self->gwSetNameTextField, selRef_stringValue);
    v40 = v38(self->gateway, selRef_name);
    if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                            v39,
                            &msgRef_isEqualToString___objc_msgSend_fixup,
                            v40)
      && (v41 = objc_msgSend_ptr((void *)self->gwSetAdminPassTextField, selRef_stringValue),
          (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v41,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             &stru_100028108))
      && (v42 = objc_msgSend_ptr((void *)self->gwVerifyAdminPassTextField, selRef_stringValue),
          (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v42,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             &stru_100028108))
      && (v43 = objc_msgSend_ptr((void *)self->gwSetUserPassTextField, selRef_stringValue),
          (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v43,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             &stru_100028108))
      && (v44 = objc_msgSend_ptr((void *)self->gwVerifyUserPassTextField, selRef_stringValue),
          (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v44,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             &stru_100028108))
      && (v45 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr,
          v46 = objc_msgSend_ptr((void *)self->gwSetRemoteIPTextField, selRef_stringValue),
          v47 = v45(self->gateway, selRef_appleIP),
          (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v46,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v47))
      && (v48 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr,
          v49 = objc_msgSend_ptr((void *)self->gwSetSiteIDTextField, selRef_stringValue),
          v50 = v48(self->gateway, selRef_siteID),
          (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v49,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v50))
      && (v51 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr,
          v52 = objc_msgSend_ptr((void *)self->gwSetShipToTextField, selRef_stringValue),
          v53 = v51(self->gateway, selRef_shipTo),
          (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v52,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v53))
      && (v54 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr,
          v55 = objc_msgSend_ptr((void *)self->gwSetACNameTextField, selRef_stringValue),
          v56 = v54(self->gateway, selRef_appleConnectName),
          (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v55,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v56))
      && (v57 = objc_msgSend_ptr((void *)self->gwSetACPassTextField, selRef_stringValue),
          (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v57,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             &stru_100028108))
      && (v58 = objc_msgSend_ptr((void *)self->gwVerifyACPassTextField, selRef_stringValue),
          (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v58,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             &stru_100028108)) )
    {
      v59 = selRef_enableSaveRevertState_;
      v60 = 0LL;
    }
    else
    {
      v59 = selRef_enableSaveRevertState_;
      v60 = 1LL;
    }
    objc_msgSend_ptr(self, v59, v60);
  }
}
// 100026410: using guessed type char *selRef_selectedItem;
// 100026418: using guessed type char *selRef_tag;
// 100026430: using guessed type char *selRef_allSelectedItems;
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 100026528: using guessed type char *selRef_stringValue;
// 100026628: using guessed type char *selRef_title;
// 100026680: using guessed type char *selRef_logContents;
// 100026690: using guessed type char *selRef_fillGatewayTextViewWithString_;
// 1000266C8: using guessed type char *selRef_activityLogContents;
// 1000266D0: using guessed type char *selRef_transactionLogContents;
// 1000266D8: using guessed type char *selRef_fillServerTextViewWithString_;
// 100026750: using guessed type char *selRef_currentLog;
// 100026780: using guessed type char *selRef_name;
// 1000268C8: using guessed type char *selRef_appleIP;
// 1000268D0: using guessed type char *selRef_siteID;
// 1000268D8: using guessed type char *selRef_shipTo;
// 1000268E0: using guessed type char *selRef_appleConnectName;
// 100026918: using guessed type char *selRef_enableSaveRevertState_;
// 100026BA8: using guessed type char *selRef_fillTextView_withString_;
// 100026D58: using guessed type char *selRef_object;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010000AC69) ----------------------------------------------------
// GMAppController - (void)observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void *) 
void __cdecl -[GMAppController observeValueForKeyPath:ofObject:change:context:](struct GMAppController *self, SEL a2, id a3, id a4, id a5, void *a6)
{
  void *(*v6)(void *, const char *, ...); // r14@2
  void *v7; // rax@2
  void *v8; // rax@2
  __int64 v9; // rax@2
  void *(*v10)(void *, const char *, ...); // r14@3
  void *v11; // rax@3
  void *v12; // rax@3
  void *v13; // rax@3
  void *v14; // r14@3
  unsigned int v15; // eax@5

  if ( !self->showingSheet )
  {
    v6 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v7 = objc_msgSend_ptr(self->navTabViewController, selRef_arrayController, a3, a4, a5, a6);
    v8 = v6(v7, selRef_selectedObjects);
    LODWORD(v9) = msgRef_count__objc_msgSend_fixup(v8, &msgRef_count__objc_msgSend_fixup);
    if ( v9 )
    {
      v10 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v11 = objc_msgSend_ptr(self->navTabViewController, selRef_arrayController);
      v12 = v10(v11, selRef_selectedObjects);
      LODWORD(v13) = msgRef_objectAtIndex___objc_msgSend_fixup(v12, &msgRef_objectAtIndex___objc_msgSend_fixup, 0LL);
      v14 = v13;
      if ( self->currentSubView == self->subViewGatewaySettings
        && (unsigned __int8)objc_msgSend_ptr((void *)self->gwSaveSettingsButton, selRef_isEnabled) )
      {
        self->showingSheet = 1;
        objc_msgSend_ptr(self, selRef_showSaveChangesAlert_, v14);
      }
      else
      {
        v15 = (unsigned __int64)objc_msgSend_ptr(v14, selRef_type);
        objc_msgSend_ptr(self, selRef_showSelectedTabView_, v15);
      }
    }
  }
}
// 1000263D8: using guessed type char *selRef_arrayController;
// 100026420: using guessed type char *selRef_type;
// 100026998: using guessed type char *selRef_showSelectedTabView_;
// 100026A40: using guessed type char *selRef_isEnabled;
// 100026D30: using guessed type char *selRef_showSaveChangesAlert_;
// 100026D60: using guessed type char *selRef_selectedObjects;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010000AD88) ----------------------------------------------------
// GMAppController - (void)outlineViewSelectionDidChange:(id) 
void __cdecl -[GMAppController outlineViewSelectionDidChange:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  struct GMAppController *v4; // r15@1
  struct NSOutlineView *v5; // rax@1
  struct NSOutlineView *v6; // rdi@1
  void *v7; // rax@2
  __int64 v8; // rax@2
  struct NSOutlineView *v9; // rbx@2
  void *(*v10)(void *, const char *, ...); // r14@3
  void *v11; // rax@3
  void *v12; // r14@3
  __int64 v13; // rax@3
  signed __int64 v14; // rax@4
  __int64 v15; // rax@6
  __int64 v16; // rax@8
  void (*v17)(void *, const char *, ...); // rbx@9
  void *(*v18)(void *, const char *, ...); // rbx@10
  void *v19; // rax@10
  void *v20; // rax@10
  __int64 v21; // rax@10
  __int64 v22; // rdx@10
  void *(*v23)(void *, const char *, ...); // rbx@11
  void *v24; // rax@11
  void *v25; // rax@11
  void *v26; // rax@11
  void *v27; // rax@13

  v4 = self;
  v5 = (struct NSOutlineView *)objc_msgSend_ptr(a3, selRef_object, v3);
  v6 = self->outlineViewBrowser;
  if ( v5 != v6 )
    return;
  v7 = objc_msgSend_ptr((void *)v6, selRef_allSelectedItems);
  LODWORD(v8) = msgRef_count__objc_msgSend_fixup(v7, &msgRef_count__objc_msgSend_fixup);
  v9 = v4->outlineViewBrowser;
  if ( !v8 )
  {
    v27 = objc_msgSend_ptr(classRef_NSArray, selRef_arrayWithObjects_, v4->gateway, 0LL);
    objc_msgSend_ptr((void *)v9, selRef_selectItems_byExtendingSelection_, v27, 0LL);
    return;
  }
  v10 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v11 = objc_msgSend_ptr((void *)v4->outlineViewBrowser, selRef_selectedRow);
  v12 = v10((void *)v9, selRef_itemAtRow_, v11);
  LODWORD(v13) = msgRef_self__objc_msgSend_fixup(classRef_GMGatewayInfo, &msgRef_self__objc_msgSend_fixup);
  if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(v12, &msgRef_isKindOfClass___objc_msgSend_fixup, v13) )
  {
    v14 = 712LL;
  }
  else
  {
    LODWORD(v15) = msgRef_self__objc_msgSend_fixup(classRef_GMServerInfo, &msgRef_self__objc_msgSend_fixup);
    if ( !(unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                             v12,
                             &msgRef_isKindOfClass___objc_msgSend_fixup,
                             v15) )
    {
      LODWORD(v16) = msgRef_self__objc_msgSend_fixup(classRef_GMMachineInfo, &msgRef_self__objc_msgSend_fixup);
      if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                              v12,
                              &msgRef_isKindOfClass___objc_msgSend_fixup,
                              v16) )
      {
        v17 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
        objc_msgSend_ptr(v4->navTabViewController, selRef_setTabs_, v4->machineNavTabList);
        v17(v4, selRef_addRequest_, 13LL);
      }
      goto LABEL_10;
    }
    v14 = 720LL;
  }
  objc_msgSend_ptr(v4->navTabViewController, selRef_setTabs_, *(_QWORD *)&v4->NSObject_opaque[v14]);
LABEL_10:
  v18 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  objc_msgSend_ptr(v4, selRef_adjustTabView);
  v19 = v18(v4->navTabViewController, selRef_arrayController);
  v20 = v18(v19, selRef_selectedObjects);
  LODWORD(v21) = msgRef_count__objc_msgSend_fixup(v20, &msgRef_count__objc_msgSend_fixup);
  v22 = 0LL;
  if ( v21 )
  {
    v23 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v24 = objc_msgSend_ptr(v4->navTabViewController, selRef_arrayController, 0LL);
    v25 = v23(v24, selRef_selectedObjects);
    LODWORD(v26) = msgRef_objectAtIndex___objc_msgSend_fixup(v25, &msgRef_objectAtIndex___objc_msgSend_fixup, 0LL);
    v22 = (unsigned int)v23(v26, selRef_type);
  }
  objc_msgSend_ptr(v4, selRef_showSelectedTabView_, v22);
}
// 1000263D0: using guessed type char *selRef_setTabs_;
// 1000263D8: using guessed type char *selRef_arrayController;
// 100026420: using guessed type char *selRef_type;
// 100026430: using guessed type char *selRef_allSelectedItems;
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 100026778: using guessed type char *selRef_arrayWithObjects_;
// 100026910: using guessed type char *selRef_addRequest_;
// 100026958: using guessed type char *selRef_selectItems_byExtendingSelection_;
// 100026998: using guessed type char *selRef_showSelectedTabView_;
// 100026D58: using guessed type char *selRef_object;
// 100026D60: using guessed type char *selRef_selectedObjects;
// 100026D68: using guessed type char *selRef_adjustTabView;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027410: using guessed type void *classRef_NSArray;

//----- (000000010000AFF5) ----------------------------------------------------
// GMAppController - (void)tableViewSelectionDidChange:(id) 
void __cdecl -[GMAppController tableViewSelectionDidChange:](struct GMAppController *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  struct GMAppController *v4; // rbx@1
  struct NSTableView *v5; // rax@1
  struct NSTableView *v6; // rdi@1
  void *v7; // rax@2
  __int64 v8; // rax@2

  v4 = self;
  v5 = (struct NSTableView *)objc_msgSend_ptr(a3, selRef_object, v3);
  v6 = self->machineLogTableView;
  if ( v5 == v6 )
  {
    v7 = objc_msgSend_ptr((void *)v6, selRef_selectedRowIndexes);
    LODWORD(v8) = msgRef_count__objc_msgSend_fixup(v7, &msgRef_count__objc_msgSend_fixup);
    if ( v8 )
      objc_msgSend_ptr(v4, selRef_addRequest_, 14LL);
    else
      objc_msgSend_ptr(v4, selRef_clearTextView_, v4->machineLogTextView);
  }
}
// 1000263C0: using guessed type char *selRef_clearTextView_;
// 100026910: using guessed type char *selRef_addRequest_;
// 100026B60: using guessed type char *selRef_selectedRowIndexes;
// 100026D58: using guessed type char *selRef_object;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000B083) ----------------------------------------------------
// GMAppController - (char)validateMenuItem:(id) 
char __cdecl -[GMAppController validateMenuItem:](struct GMAppController *self, SEL a2, id a3)
{
  id v3; // r14@1
  struct NSView *v4; // rax@2
  bool v5; // cl@2
  __int64 v6; // rdx@7
  char v7; // al@9
  int v8; // eax@12
  __int64 v9; // rdx@12
  struct NSOutlineView *v10; // rbx@13
  void *(*v11)(void *, const char *, ...); // r14@13
  void *v12; // rax@13
  void *v13; // rax@13
  char *v14; // rax@14
  __int64 v15; // rdx@14
  int v16; // eax@15
  __int64 v17; // rdx@15
  struct NSOutlineView *v18; // rbx@16
  void *(*v19)(void *, const char *, ...); // r14@16
  void *v20; // rax@16
  void *v21; // rax@16
  void *v22; // rbx@16
  int v23; // eax@16
  __int64 v24; // rdx@16
  int v25; // eax@17

  v3 = a3;
  if ( objc_msgSend_ptr(a3, selRef_action) == selRef_saveLogAs_
    || objc_msgSend_ptr(v3, selRef_action) == selRef_printLog_ )
  {
    v4 = self->currentSubView;
    v5 = 1;
    if ( v4 == self->subViewGatewayLogs )
      return v5;
    v5 = 1;
    if ( v4 == self->subViewServerLogs )
      return v5;
    v5 = 1;
    if ( v4 == self->subViewMachineLogs )
      return v5;
    return 0;
  }
  if ( objc_msgSend_ptr(v3, selRef_action) == selRef_searchForUut_ )
  {
    v5 = 0;
    if ( self->loginStatus )
    {
      v7 = (unsigned __int64)objc_msgSend_ptr((void *)self->gwSaveSettingsButton, selRef_isEnabled, v6);
      v5 = 0;
      if ( !v7 )
        v5 = 1;
    }
    return v5;
  }
  if ( objc_msgSend_ptr(v3, selRef_action) != selRef_removeServer_ )
  {
    v14 = (char *)objc_msgSend_ptr(v3, selRef_action);
    v5 = 1;
    if ( v14 != selRef_disconnectServer_ )
      return v5;
    v16 = (unsigned __int64)objc_msgSend_ptr(self, selRef_browserSelectionType, v15);
    v5 = 0;
    if ( v16 != 3 )
      return v5;
    v18 = self->outlineViewBrowser;
    v19 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v20 = objc_msgSend_ptr((void *)v18, selRef_selectedRow, v17);
    v21 = v19((void *)v18, selRef_itemAtRow_, v20);
    v22 = v21;
    v23 = (unsigned __int64)v19(v21, selRef_status);
    v5 = 1;
    if ( !v23 )
      return v5;
    v25 = (unsigned __int64)objc_msgSend_ptr(v22, selRef_status, v24);
    v5 = 1;
    if ( v25 == 2 )
      return v5;
    return 0;
  }
  v8 = (unsigned __int64)objc_msgSend_ptr(self, selRef_browserSelectionType);
  v5 = 0;
  if ( v8 == 3 )
  {
    v10 = self->outlineViewBrowser;
    v11 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v12 = objc_msgSend_ptr((void *)v10, selRef_selectedRow, v9);
    v13 = v11((void *)v10, selRef_itemAtRow_, v12);
    v5 = (unsigned int)v11(v13, selRef_status) == 3;
  }
  return v5;
}
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 1000264E8: using guessed type char *selRef_browserSelectionType;
// 100026928: using guessed type char *selRef_status;
// 100026A40: using guessed type char *selRef_isEnabled;
// 100026D70: using guessed type char *selRef_action;
// 100026D78: using guessed type char *selRef_saveLogAs_;
// 100026D80: using guessed type char *selRef_printLog_;
// 100026D88: using guessed type char *selRef_searchForUut_;
// 100026D90: using guessed type char *selRef_removeServer_;
// 100026D98: using guessed type char *selRef_disconnectServer_;

//----- (000000010000B273) ----------------------------------------------------
// GMAppController - (int)numberOfRowsInTableView:(id) 
int __cdecl -[GMAppController numberOfRowsInTableView:](struct GMAppController *self, SEL a2, id a3)
{
  struct NSOutlineView *v3; // rbx@2
  void *(*v4)(void *, const char *, ...); // r14@2
  void *v5; // rax@2
  void *v6; // rbx@2
  __int64 v7; // rax@2
  char v8; // cl@2
  int result; // eax@2
  const char *v10; // rsi@3
  void *v11; // rax@5
  __int64 v12; // rax@5
  __int64 v13; // rcx@5
  struct NSOutlineView *v14; // rbx@6
  void *(*v15)(void *, const char *, ...); // r14@6
  void *v16; // rax@6
  __int64 v17; // rax@6
  char v18; // cl@6

  if ( (id)self->serverDiagsTable == a3 )
  {
    v3 = self->outlineViewBrowser;
    v4 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v5 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_selectedRow);
    v6 = v4((void *)v3, selRef_itemAtRow_, v5);
    LODWORD(v7) = msgRef_self__objc_msgSend_fixup(classRef_GMServerInfo, &msgRef_self__objc_msgSend_fixup);
    v8 = msgRef_isKindOfClass___objc_msgSend_fixup(v6, &msgRef_isKindOfClass___objc_msgSend_fixup, v7);
    result = 0;
    if ( !v8 )
      return result;
    v10 = selRef_numberOfApps;
    return (unsigned __int64)objc_msgSend_ptr(v6, v10);
  }
  result = 0;
  if ( (id)self->machineLogTableView == a3 )
  {
    v11 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_allSelectedItems);
    LODWORD(v12) = msgRef_count__objc_msgSend_fixup(v11, &msgRef_count__objc_msgSend_fixup);
    v13 = v12;
    result = 0;
    if ( v13 )
    {
      v14 = self->outlineViewBrowser;
      v15 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v16 = objc_msgSend_ptr((void *)v14, selRef_selectedRow);
      v6 = v15((void *)v14, selRef_itemAtRow_, v16);
      LODWORD(v17) = msgRef_self__objc_msgSend_fixup(classRef_GMMachineInfo, &msgRef_self__objc_msgSend_fixup);
      v18 = msgRef_isKindOfClass___objc_msgSend_fixup(v6, &msgRef_isKindOfClass___objc_msgSend_fixup, v17);
      result = 0;
      if ( v18 )
      {
        v10 = selRef_numberOfLogs;
        return (unsigned __int64)objc_msgSend_ptr(v6, v10);
      }
    }
  }
  return result;
}
// 100026430: using guessed type char *selRef_allSelectedItems;
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 100026B80: using guessed type char *selRef_numberOfLogs;
// 100026DA0: using guessed type char *selRef_numberOfApps;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010000B3B6) ----------------------------------------------------
// GMAppController - (id)tableView:(id) objectValueForTableColumn:(id) row:(int) 
id __cdecl -[GMAppController tableView:objectValueForTableColumn:row:](struct GMAppController *self, SEL a2, id a3, id a4, int a5)
{
  __int64 v5; // rax@0
  __int64 v6; // r14@1
  struct NSTableView *v7; // r15@1
  void *v8; // r12@1
  struct NSOutlineView *v9; // rbx@2
  void *(*v10)(void *, const char *, ...); // r13@2
  void *v11; // rax@2
  void *v12; // rax@2
  void *v13; // r15@2
  void *v14; // rax@2
  __int64 v15; // rax@2
  __int64 v16; // rbx@2
  int (__fastcall **v17)(_QWORD, _QWORD, _QWORD); // rsi@3
  __CFString *v18; // rdx@3
  id result; // rax@4
  void *(*v20)(void *, const char *, ...); // rbx@5
  void *v21; // rax@5
  char v22; // cl@10
  char *v23; // rcx@11
  struct NSOutlineView *v24; // rbx@17
  void *(*v25)(void *, const char *, ...); // r15@17
  void *v26; // rax@17
  void *v27; // rbx@17
  __int64 v28; // rax@17
  char v29; // cl@17
  void *v30; // rcx@19
  void *v31; // rax@20
  void *v32; // rax@20
  void *v33; // rbx@20
  const char *v34; // rsi@21
  char v35; // cl@26

  LODWORD(v6) = a5;
  v7 = (struct NSTableView *)a3;
  v8 = objc_msgSend_ptr(a4, selRef_identifier, v5);
  if ( self->serverDiagsTable == v7 )
  {
    v9 = self->outlineViewBrowser;
    v10 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v11 = objc_msgSend_ptr((void *)v9, selRef_selectedRow);
    v12 = v10((void *)v9, selRef_itemAtRow_, v11);
    v13 = v12;
    v14 = v10(v12, selRef_diagAppList);
    v6 = (signed int)v6;
    LODWORD(v15) = msgRef_objectAtIndex___objc_msgSend_fixup(
                     v14,
                     &msgRef_objectAtIndex___objc_msgSend_fixup,
                     (signed int)v6);
    v16 = v15;
    if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                            v8,
                            &msgRef_isEqualToString___objc_msgSend_fixup,
                            &cfstr__application) )
    {
      v17 = &msgRef_objectForKey___objc_msgSend_fixup;
      v18 = (__CFString *)&cfstr_Diagnosticname;
      goto LABEL_4;
    }
    if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                            v8,
                            &msgRef_isEqualToString___objc_msgSend_fixup,
                            &cfstr__version) )
    {
      v17 = &msgRef_objectForKey___objc_msgSend_fixup;
      v18 = &cfstr_Diagnosticvers;
      goto LABEL_4;
    }
    if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                            v8,
                            &msgRef_isEqualToString___objc_msgSend_fixup,
                            &cfstr__environment) )
    {
      v17 = &msgRef_objectForKey___objc_msgSend_fixup;
      v18 = &cfstr_Diagnosticenvi;
LABEL_4:
      LODWORD(result) = msgRef_objectForKey___objc_msgSend_fixup(v16, v17, v18);
      if ( !result )
      {
LABEL_5:
        v20 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
        v21 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
        result = (id)v20(v21, selRef_localizedStringForKey_value_table_, &cfstr_Kunknownstring, &stru_100028108, 0LL);
      }
      return result;
    }
    v22 = msgRef_isEqualToString___objc_msgSend_fixup(v8, &msgRef_isEqualToString___objc_msgSend_fixup, &cfstr__status);
    result = 0LL;
    if ( v22 )
    {
      v23 = (char *)objc_msgSend_ptr(v13, selRef_statusOfDiagAtIndex_, v6) - 1;
      result = (id)&cfstr_Current;
      switch ( v23 )
      {
        case 1uLL:
          result = (id)&cfstr_Missing;
          break;
        case 2uLL:
          result = (id)&cfstr_Optional;
          break;
        case 3uLL:
          result = (id)&cfstr_Unsupported;
          break;
        case 4uLL:
          result = (id)&cfstr_Duplicate;
          break;
        case 0uLL:
          return result;
        default:
          goto LABEL_5;
      }
    }
  }
  else
  {
    result = 0LL;
    if ( self->machineLogTableView == v7 )
    {
      v24 = self->outlineViewBrowser;
      v25 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v26 = objc_msgSend_ptr((void *)v24, selRef_selectedRow);
      v27 = v25((void *)v24, selRef_itemAtRow_, v26);
      LODWORD(v28) = msgRef_self__objc_msgSend_fixup(classRef_GMMachineInfo, &msgRef_self__objc_msgSend_fixup);
      v29 = msgRef_isKindOfClass___objc_msgSend_fixup(v27, &msgRef_isKindOfClass___objc_msgSend_fixup, v28);
      result = 0LL;
      if ( v29 )
      {
        if ( v27 )
        {
          v30 = objc_msgSend_ptr(v27, selRef_numberOfLogs);
          v6 = (signed int)v6;
          result = 0LL;
          if ( (signed int)v6 < (signed __int64)v30 )
          {
            v31 = objc_msgSend_ptr(v27, selRef_logList);
            LODWORD(v32) = msgRef_objectAtIndex___objc_msgSend_fixup(
                             v31,
                             &msgRef_objectAtIndex___objc_msgSend_fixup,
                             v6);
            v33 = v32;
            if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                                    v8,
                                    &msgRef_isEqualToString___objc_msgSend_fixup,
                                    &cfstr__testdate) )
            {
              v34 = selRef_testDate;
            }
            else if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                                         v8,
                                         &msgRef_isEqualToString___objc_msgSend_fixup,
                                         &cfstr__diagnostic) )
            {
              v34 = selRef_toolName;
            }
            else if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                                         v8,
                                         &msgRef_isEqualToString___objc_msgSend_fixup,
                                         &cfstr__version) )
            {
              v34 = selRef_toolVersion;
            }
            else
            {
              v35 = msgRef_isEqualToString___objc_msgSend_fixup(
                      v8,
                      &msgRef_isEqualToString___objc_msgSend_fixup,
                      &cfstr__opcode);
              result = 0LL;
              if ( !v35 )
                return result;
              v34 = selRef_opCode;
            }
            result = (id)objc_msgSend_ptr(v33, v34);
          }
        }
      }
    }
  }
  return result;
}
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 100026720: using guessed type char *selRef_logList;
// 100026B80: using guessed type char *selRef_numberOfLogs;
// 100026DA8: using guessed type char *selRef_identifier;
// 100026DB0: using guessed type char *selRef_diagAppList;
// 100026DB8: using guessed type char *selRef_statusOfDiagAtIndex_;
// 100026DC0: using guessed type char *selRef_testDate;
// 100026DC8: using guessed type char *selRef_toolName;
// 100026DD0: using guessed type char *selRef_toolVersion;
// 100026DD8: using guessed type char *selRef_opCode;
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 1000273B0: using guessed type void *classRef_NSBundle;
// 100029048: using guessed type __CFString cfstr_Kunknownstring;
// 100029088: using guessed type __CFString cfstr_Diagnosticvers;
// 1000290C8: using guessed type __CFString cfstr_Diagnosticenvi;
// 100029108: using guessed type __CFString cfstr_Current;
// 100029128: using guessed type __CFString cfstr_Missing;
// 100029148: using guessed type __CFString cfstr_Optional;
// 100029168: using guessed type __CFString cfstr_Unsupported;
// 100029188: using guessed type __CFString cfstr_Duplicate;

//----- (000000010000B72C) ----------------------------------------------------
// GMAppController - (void)tableView:(id) willDisplayCell:(id) forTableColumn:(id) row:(int64_t) 
void __cdecl -[GMAppController tableView:willDisplayCell:forTableColumn:row:](struct GMAppController *self, SEL a2, id a3, id a4, id a5, int64_t a6)
{
  int64_t v6; // r15@1
  struct NSOutlineView *v7; // rbx@2
  void *(*v8)(void *, const char *, ...); // r14@2
  void *v9; // rax@2
  void *v10; // r13@2
  void *v11; // rbx@2
  const char *v12; // rsi@3
  void *(*v13)(void *, const char *, ...); // r14@6
  struct NSTableView *v14; // rbx@7
  void *v15; // rax@9
  void *v16; // [sp+0h] [bp-30h]@2

  v6 = a6;
  if ( (id)self->serverDiagsTable == a3 )
  {
    v7 = self->outlineViewBrowser;
    v8 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v9 = objc_msgSend_ptr((void *)self->outlineViewBrowser, selRef_selectedRow, a3, a4);
    v10 = v8((void *)v7, selRef_itemAtRow_, v9);
    v11 = v8(classRef_NSColor, selRef_blackColor);
    switch ( v8(v10, selRef_statusOfDiagAtIndex_, v6) )
    {
      case 3uLL:
        v12 = selRef_orangeColor;
        goto LABEL_5;
      case 2uLL:
      case 4uLL:
      case 5uLL:
        v12 = selRef_redColor;
LABEL_5:
        v11 = objc_msgSend_ptr(classRef_NSColor, v12);
        break;
      default:
        break;
    }
    v13 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    objc_msgSend_ptr(v16, selRef_setTextColor_, v11);
    if ( (unsigned __int8)v13((void *)self->serverDiagsTable, selRef_isRowSelected_, v6) )
    {
      v14 = self->serverDiagsTable;
      if ( (void *)v14 == objc_msgSend_ptr((void *)self->window, selRef_firstResponder) )
      {
        v15 = objc_msgSend_ptr(classRef_NSColor, selRef_whiteColor);
        objc_msgSend_ptr(v16, selRef_setTextColor_, v15);
      }
    }
  }
}
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 100026AA8: using guessed type char *selRef_blackColor;
// 100026AB0: using guessed type char *selRef_setTextColor_;
// 100026AC0: using guessed type char *selRef_redColor;
// 100026CC0: using guessed type char *selRef_whiteColor;
// 100026DB8: using guessed type char *selRef_statusOfDiagAtIndex_;
// 100026DE0: using guessed type char *selRef_orangeColor;
// 100026DE8: using guessed type char *selRef_isRowSelected_;
// 100026DF0: using guessed type char *selRef_firstResponder;
// 100027450: using guessed type void *classRef_NSColor;

//----- (000000010000B89C) ----------------------------------------------------
// GMAppController - (void)splitView:(id) resizeSubviewsWithOldSize:(struct CGSize) 
// local variable allocation has failed, the output may be wrong!
void __cdecl -[GMAppController splitView:resizeSubviewsWithOldSize:](struct GMAppController *self, SEL a2, id a3, struct CGSize a4)
{
  const char *v4; // r15@1
  void *v5; // r14@1
  double v6; // ST28_8@2
  double v7; // xmm1_8@2
  double v8; // xmm0_8@2
  float v9; // xmm0_4@5
  float v10; // xmm0_4@5
  const char *v11; // rax@5
  char *v12; // r12@5
  __int128 *v13; // rbx@6
  __int64 v14; // rax@8
  const char *v15; // rax@8
  char *v16; // r14@8
  __int128 *v17; // rbx@9
  __int64 v18; // rax@11
  double v19; // [sp+30h] [bp-D0h]@1
  float v20; // [sp+30h] [bp-D0h]@5
  double v21; // [sp+38h] [bp-C8h]@1
  __int128 v22; // [sp+40h] [bp-C0h]@9
  __int128 v23; // [sp+50h] [bp-B0h]@10
  __int128 v24; // [sp+60h] [bp-A0h]@6
  __int128 v25; // [sp+70h] [bp-90h]@7
  __int64 v26; // [sp+80h] [bp-80h]@8
  __int64 v27; // [sp+88h] [bp-78h]@8
  double v28; // [sp+90h] [bp-70h]@8
  double v29; // [sp+98h] [bp-68h]@8
  __int128 v30; // [sp+A0h] [bp-60h]@2
  __int128 v31; // [sp+B0h] [bp-50h]@3
  double v32; // [sp+B8h] [bp-48h]@2
  __int128 v33; // [sp+C0h] [bp-40h]@2
  __int128 v34; // [sp+D0h] [bp-30h]@2

  v19 = a4.var1;
  v21 = a4.var0;
  v4 = (const char *)a3;
  v5 = objc_msgSend_ptr(a3, selRef_subviews);
  if ( v4 )
  {
    objc_msgSend_stret(&v33, v4, selRef_frame);
    v6 = *(double *)&v34;
    objc_msgSend_stret(&v30, v4, selRef_frame);
    v7 = v6;
    v8 = v32;
  }
  else
  {
    v34 = 0LL;
    v33 = 0LL;
    v31 = 0LL;
    v30 = 0LL;
    v8 = 0.0;
    v7 = 0.0;
  }
  if ( (const char *)self->mVerticalSplitView == v4 )
  {
    v9 = v8 - v19;
    v20 = v9;
    v10 = v7 - v21;
    LODWORD(v11) = msgRef_objectAtIndex___objc_msgSend_fixup(v5, &msgRef_objectAtIndex___objc_msgSend_fixup, 0LL);
    v12 = (char *)v11;
    if ( v11 )
    {
      v13 = &v24;
      objc_msgSend_stret(&v24, v11, selRef_frame);
    }
    else
    {
      v25 = 0LL;
      v24 = 0LL;
      v13 = &v24;
    }
    v29 = *((double *)v13 + 3);
    v28 = *((double *)v13 + 2);
    v14 = *(_QWORD *)v13;
    v27 = *((_QWORD *)v13 + 1);
    v26 = v14;
    v7 = v20;
    v29 = v29 + v20;
    objc_msgSend_ptr(v12, selRef_setFrame_, v14, v27, *(_QWORD *)&v28, *(_QWORD *)&v29);
    LODWORD(v15) = msgRef_objectAtIndex___objc_msgSend_fixup(v5, &msgRef_objectAtIndex___objc_msgSend_fixup, 1LL);
    v16 = (char *)v15;
    if ( v15 )
    {
      v17 = &v22;
      objc_msgSend_stret(&v22, v15, selRef_frame);
    }
    else
    {
      v23 = 0LL;
      v22 = 0LL;
      v17 = &v22;
    }
    v29 = *((double *)v17 + 3);
    v28 = *((double *)v17 + 2);
    v18 = *(_QWORD *)v17;
    v27 = *((_QWORD *)v17 + 1);
    v26 = v18;
    v28 = v10 + v28;
    v8 = v7 + v29;
    v29 = v7 + v29;
    objc_msgSend_ptr(v16, selRef_setFrame_, v18, v27, *(_QWORD *)&v28, *(_QWORD *)&v29);
  }
  objc_msgSend_ptr((void *)v4, selRef_adjustSubviews, v8, v7);
}
// 10000B89C: fragmented variable at xmm1_8:xmm0_8.16 may be wrong
// 1000262F0: using guessed type char *selRef_setFrame_;
// 100026378: using guessed type char *selRef_adjustSubviews;
// 100026A10: using guessed type char *selRef_frame;
// 100026D48: using guessed type char *selRef_subviews;
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010000BB15) ----------------------------------------------------
// GMAppController - (double)splitView:(id) constrainMinCoordinate:(double) ofSubviewAt:(int64_t) 
double __cdecl -[GMAppController splitView:constrainMinCoordinate:ofSubviewAt:](struct GMAppController *self, SEL a2, id a3, double a4, int64_t a5)
{
  return 130.0;
}

//----- (000000010000BB23) ----------------------------------------------------
// GMAppController - (double)splitView:(id) constrainMaxCoordinate:(double) ofSubviewAt:(int64_t) 
double __cdecl -[GMAppController splitView:constrainMaxCoordinate:ofSubviewAt:](struct GMAppController *self, SEL a2, id a3, double a4, int64_t a5)
{
  return a4 + -500.0;
}

//----- (000000010000BB31) ----------------------------------------------------
// GMAppController - (id)outlineView:(id) child:(int64_t) ofItem:(id) 
id __cdecl -[GMAppController outlineView:child:ofItem:](struct GMAppController *self, SEL a2, id a3, int64_t a4, id a5)
{
  __int64 v5; // rax@0
  id v6; // r15@1
  int64_t v7; // r14@1
  id result; // rax@1
  __int64 v9; // rax@6
  struct GMGatewayInfo *v10; // rdi@7
  const char *v11; // rsi@7
  __int64 v12; // rax@8
  __int64 v13; // rax@9
  char v14; // cl@9
  void *v15; // rcx@10
  __int64 v16; // [sp-8h] [bp-20h]@1

  v16 = v5;
  v6 = a5;
  v7 = a4;
  result = 0LL;
  if ( (id)self->outlineViewBrowser == a3 )
  {
    if ( !a5 )
    {
      if ( a4 )
        result = (id)self->searchResults;
      else
        result = (id)self->gateway;
      return result;
    }
    LODWORD(v9) = msgRef_self__objc_msgSend_fixup(classRef_GMGatewayInfo, &msgRef_self__objc_msgSend_fixup);
    if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(v6, &msgRef_isKindOfClass___objc_msgSend_fixup, v9) )
    {
      v10 = self->gateway;
      v11 = selRef_serverAtIndex_;
      return (id)objc_msgSend_ptr(v10, v11, v7, v16);
    }
    LODWORD(v12) = msgRef_self__objc_msgSend_fixup(classRef_GMSearchResults, &msgRef_self__objc_msgSend_fixup);
    if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(v6, &msgRef_isKindOfClass___objc_msgSend_fixup, v12)
      || (LODWORD(v13) = msgRef_self__objc_msgSend_fixup(classRef_GMServerInfo, &msgRef_self__objc_msgSend_fixup),
          v14 = msgRef_isKindOfClass___objc_msgSend_fixup(v6, &msgRef_isKindOfClass___objc_msgSend_fixup, v13),
          result = 0LL,
          v14) )
    {
      v15 = objc_msgSend_ptr(v6, selRef_numberOfUUTs, v16);
      result = 0LL;
      if ( (signed __int64)v15 > 0 )
      {
        v11 = selRef_uutAtIndex_;
        v10 = (struct GMGatewayInfo *)v6;
        return (id)objc_msgSend_ptr(v10, v11, v7, v16);
      }
    }
  }
  return result;
}
// 1000265A0: using guessed type char *selRef_serverAtIndex_;
// 100026960: using guessed type char *selRef_numberOfUUTs;
// 100026DF8: using guessed type char *selRef_uutAtIndex_;
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010000BC52) ----------------------------------------------------
// GMAppController - (char)outlineView:(id) isItemExpandable:(id) 
char __cdecl -[GMAppController outlineView:isItemExpandable:](struct GMAppController *self, SEL a2, id a3, id a4)
{
  id v4; // rbx@1
  bool v5; // cl@1
  __int64 v6; // rax@2
  char v7; // al@2
  __int64 v8; // rax@3

  v4 = a4;
  v5 = 0;
  if ( (id)self->outlineViewBrowser == a3 )
  {
    LODWORD(v6) = msgRef_self__objc_msgSend_fixup(classRef_GMMachineInfo, &msgRef_self__objc_msgSend_fixup);
    v7 = msgRef_isKindOfClass___objc_msgSend_fixup(v4, &msgRef_isKindOfClass___objc_msgSend_fixup, v6);
    v5 = 0;
    if ( !v7 )
    {
      LODWORD(v8) = msgRef_self__objc_msgSend_fixup(classRef_GMServerInfo, &msgRef_self__objc_msgSend_fixup);
      v5 = (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                              v4,
                              &msgRef_isKindOfClass___objc_msgSend_fixup,
                              v8) == 0;
    }
  }
  return v5;
}
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010000BCCD) ----------------------------------------------------
// GMAppController - (int64_t)outlineView:(id) numberOfChildrenOfItem:(id) 
int64_t __cdecl -[GMAppController outlineView:numberOfChildrenOfItem:](struct GMAppController *self, SEL a2, id a3, id a4)
{
  id v4; // rbx@1
  int64_t result; // rax@1
  __int64 v6; // rax@3
  struct GMGatewayInfo *v7; // rdi@4
  const char *v8; // rsi@4
  __int64 v9; // rax@5
  __int64 v10; // rax@8
  char v11; // cl@8

  v4 = a4;
  result = 0LL;
  if ( (id)self->outlineViewBrowser == a3 )
  {
    result = 2LL;
    if ( a4 )
    {
      LODWORD(v6) = msgRef_self__objc_msgSend_fixup(classRef_GMGatewayInfo, &msgRef_self__objc_msgSend_fixup);
      if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                              v4,
                              &msgRef_isKindOfClass___objc_msgSend_fixup,
                              v6) )
      {
        v7 = self->gateway;
        v8 = selRef_numberOfServers;
        return (int64_t)objc_msgSend_ptr(v7, v8);
      }
      LODWORD(v9) = msgRef_self__objc_msgSend_fixup(classRef_GMSearchResults, &msgRef_self__objc_msgSend_fixup);
      if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                              v4,
                              &msgRef_isKindOfClass___objc_msgSend_fixup,
                              v9)
        || (LODWORD(v10) = msgRef_self__objc_msgSend_fixup(classRef_GMServerInfo, &msgRef_self__objc_msgSend_fixup),
            v11 = msgRef_isKindOfClass___objc_msgSend_fixup(v4, &msgRef_isKindOfClass___objc_msgSend_fixup, v10),
            result = 0LL,
            v11) )
      {
        v8 = selRef_numberOfUUTs;
        v7 = (struct GMGatewayInfo *)v4;
        return (int64_t)objc_msgSend_ptr(v7, v8);
      }
    }
  }
  return result;
}
// 100026960: using guessed type char *selRef_numberOfUUTs;
// 1000269C0: using guessed type char *selRef_numberOfServers;
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010000BDAD) ----------------------------------------------------
// GMAppController - (id)outlineView:(id) objectValueForTableColumn:(id) byItem:(id) 
id __cdecl -[GMAppController outlineView:objectValueForTableColumn:byItem:](struct GMAppController *self, SEL a2, id a3, id a4, id a5)
{
  __int64 v5; // rax@0
  id v6; // r15@1
  struct NSOutlineView *v7; // r14@1
  void *v8; // rcx@1
  id result; // rax@1
  char v10; // cl@2
  __int64 v11; // rax@3
  __int64 v12; // rax@5
  __int64 v13; // rax@7
  void *(*v14)(void *, const char *, ...); // r13@8
  int v15; // er12@8
  void *v16; // rbx@8
  __int64 v17; // r8@8
  __CFString *v18; // rdx@9
  __int64 v19; // rax@12
  char v20; // cl@12
  void *v21; // rax@14

  v6 = a5;
  v7 = (struct NSOutlineView *)a3;
  v8 = objc_msgSend_ptr(a4, selRef_identifier, v5);
  result = 0LL;
  if ( self->outlineViewBrowser == v7 )
  {
    v10 = msgRef_isEqualToString___objc_msgSend_fixup(v8, &msgRef_isEqualToString___objc_msgSend_fixup, &cfstr__label);
    result = 0LL;
    if ( v10 )
    {
      LODWORD(v11) = msgRef_self__objc_msgSend_fixup(classRef_GMGatewayInfo, &msgRef_self__objc_msgSend_fixup);
      if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                              v6,
                              &msgRef_isKindOfClass___objc_msgSend_fixup,
                              v11) )
      {
        result = (id)&cfstr_DiagnosticGate;
      }
      else
      {
        LODWORD(v12) = msgRef_self__objc_msgSend_fixup(classRef_GMSearchResults, &msgRef_self__objc_msgSend_fixup);
        if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                                v6,
                                &msgRef_isKindOfClass___objc_msgSend_fixup,
                                v12) )
        {
          result = (id)&cfstr_SearchResults;
        }
        else
        {
          LODWORD(v13) = msgRef_self__objc_msgSend_fixup(classRef_GMServerInfo, &msgRef_self__objc_msgSend_fixup);
          if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                                  v6,
                                  &msgRef_isKindOfClass___objc_msgSend_fixup,
                                  v13) )
          {
            v14 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
            v15 = (unsigned __int64)objc_msgSend_ptr(v6, selRef_uutCount);
            v16 = v14(v6, selRef_hostName);
            v17 = (unsigned int)v14(v6, selRef_uutCount);
            if ( v15 == 1 )
              v18 = &cfstr__DUnit;
            else
              v18 = &cfstr__DUnits;
            result = (id)objc_msgSend_ptr(classRef_NSString, selRef_stringWithFormat_, v18, v16, v17);
          }
          else
          {
            LODWORD(v19) = msgRef_self__objc_msgSend_fixup(classRef_GMMachineInfo, &msgRef_self__objc_msgSend_fixup);
            v20 = msgRef_isKindOfClass___objc_msgSend_fixup(v6, &msgRef_isKindOfClass___objc_msgSend_fixup, v19);
            result = 0LL;
            if ( v20 )
            {
              v21 = objc_msgSend_ptr(v6, selRef_serialNumber);
              result = (id)objc_msgSend_ptr(classRef_NSString, selRef_stringWithFormat_, &cfstr__, v21);
            }
          }
        }
      }
    }
  }
  return result;
}
// 1000263A8: using guessed type char *selRef_stringWithFormat_;
// 100026708: using guessed type char *selRef_serialNumber;
// 100026788: using guessed type char *selRef_hostName;
// 100026AE8: using guessed type char *selRef_uutCount;
// 100026DA8: using guessed type char *selRef_identifier;
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 1000273C0: using guessed type void *classRef_NSString;
// 100028F28: using guessed type __CFString cfstr__;
// 100029228: using guessed type __CFString cfstr_DiagnosticGate;
// 100029248: using guessed type __CFString cfstr_SearchResults;
// 100029268: using guessed type __CFString cfstr__DUnit;
// 100029288: using guessed type __CFString cfstr__DUnits;

//----- (000000010000BFA0) ----------------------------------------------------
// GMAppController - (void)outlineView:(id) willDisplayCell:(id) forTableColumn:(id) item:(id) 
void __cdecl -[GMAppController outlineView:willDisplayCell:forTableColumn:item:](struct GMAppController *self, SEL a2, id a3, id a4, id a5, id a6)
{
  id v6; // r12@1
  id v7; // r14@1
  struct NSOutlineView *v8; // r15@1
  void *v9; // rax@1
  __int64 v10; // rax@3
  __int64 v11; // rax@4
  __int64 v12; // rax@5
  const char *v13; // rsi@7
  void *v14; // rdi@7
  __CFString *v15; // rdx@7
  void *v16; // rax@12
  __int64 v17; // rax@12
  __int64 v18; // rax@14

  v6 = a6;
  v7 = a4;
  v8 = (struct NSOutlineView *)a3;
  v9 = objc_msgSend_ptr(a5, selRef_identifier);
  if ( self->outlineViewBrowser == v8
    && (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                          v9,
                          &msgRef_isEqualToString___objc_msgSend_fixup,
                          &cfstr__label) )
  {
    LODWORD(v10) = msgRef_self__objc_msgSend_fixup(classRef_GMGatewayInfo, &msgRef_self__objc_msgSend_fixup);
    if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(v6, &msgRef_isKindOfClass___objc_msgSend_fixup, v10)
      || (LODWORD(v11) = msgRef_self__objc_msgSend_fixup(classRef_GMSearchResults, &msgRef_self__objc_msgSend_fixup),
          (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                             v6,
                             &msgRef_isKindOfClass___objc_msgSend_fixup,
                             v11)) )
    {
      objc_msgSend_ptr(v7, selRef_setImage_, 0LL);
    }
    else
    {
      LODWORD(v12) = msgRef_self__objc_msgSend_fixup(classRef_GMServerInfo, &msgRef_self__objc_msgSend_fixup);
      if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                              v6,
                              &msgRef_isKindOfClass___objc_msgSend_fixup,
                              v12) )
      {
        if ( (unsigned int)objc_msgSend_ptr(v6, selRef_status) )
        {
          if ( (unsigned int)objc_msgSend_ptr(v6, selRef_status) == 1 )
          {
            v13 = selRef_imageNamed_;
            v14 = classRef_NSImage;
            v15 = &cfstr_Server_disconn;
          }
          else
          {
            v13 = selRef_imageNamed_;
            v14 = classRef_NSImage;
            if ( (unsigned int)objc_msgSend_ptr(v6, selRef_status) == 2 )
              v15 = &cfstr_Server_offline;
            else
              v15 = &cfstr_Server_down_pn;
          }
        }
        else
        {
          v13 = selRef_imageNamed_;
          v14 = classRef_NSImage;
          v15 = &cfstr_Server_connect;
        }
LABEL_12:
        v16 = objc_msgSend_ptr(v14, v13, v15);
        LODWORD(v17) = msgRef_retain__objc_msgSend_fixup(v16, &msgRef_retain__objc_msgSend_fixup);
        objc_msgSend_ptr(v7, selRef_setImage_, v17);
        return;
      }
      LODWORD(v18) = msgRef_self__objc_msgSend_fixup(classRef_GMMachineInfo, &msgRef_self__objc_msgSend_fixup);
      if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(
                              v6,
                              &msgRef_isKindOfClass___objc_msgSend_fixup,
                              v18) )
      {
        if ( (unsigned int)objc_msgSend_ptr(v6, selRef_status) == 1 )
        {
          v13 = selRef_imageNamed_;
          v14 = classRef_NSImage;
          v15 = &cfstr_Uut_online_png;
        }
        else
        {
          v13 = selRef_imageNamed_;
          v14 = classRef_NSImage;
          if ( (unsigned int)objc_msgSend_ptr(v6, selRef_status) == 2 )
            v15 = &cfstr_Uut_running_pn;
          else
            v15 = &cfstr_Uut_offline_pn;
        }
        goto LABEL_12;
      }
    }
  }
}
// 100026928: using guessed type char *selRef_status;
// 100026A68: using guessed type char *selRef_imageNamed_;
// 100026A90: using guessed type char *selRef_setImage_;
// 100026DA8: using guessed type char *selRef_identifier;
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027448: using guessed type void *classRef_NSImage;
// 1000292A8: using guessed type __CFString cfstr_Server_connect;
// 1000292C8: using guessed type __CFString cfstr_Server_disconn;
// 1000292E8: using guessed type __CFString cfstr_Server_offline;
// 100029308: using guessed type __CFString cfstr_Server_down_pn;
// 100029328: using guessed type __CFString cfstr_Uut_online_png;
// 100029348: using guessed type __CFString cfstr_Uut_running_pn;
// 100029368: using guessed type __CFString cfstr_Uut_offline_pn;

//----- (000000010000C1FA) ----------------------------------------------------
// GMAppController - (char)outlineView:(id) shouldSelectItem:(id) 
char __cdecl -[GMAppController outlineView:shouldSelectItem:](struct GMAppController *self, SEL a2, id a3, id a4)
{
  id v4; // r14@1
  __int64 v5; // rax@3
  char v6; // al@3
  char v7; // al@5

  v4 = a4;
  LOBYTE(a4) = 0;
  if ( !self->showingSheet )
  {
    LOBYTE(a4) = 1;
    if ( (id)self->outlineViewBrowser == a3 )
    {
      LODWORD(v5) = msgRef_self__objc_msgSend_fixup(classRef_GMSearchResults, &msgRef_self__objc_msgSend_fixup);
      v6 = msgRef_isKindOfClass___objc_msgSend_fixup(v4, &msgRef_isKindOfClass___objc_msgSend_fixup, v5);
      LOBYTE(a4) = 0;
      if ( !v6 )
      {
        LOBYTE(a4) = 1;
        if ( self->currentSubView == self->subViewGatewaySettings )
        {
          v7 = (unsigned __int64)objc_msgSend_ptr((void *)self->gwSaveSettingsButton, selRef_isEnabled, 304LL);
          LOBYTE(a4) = 1;
          if ( v7 )
          {
            self->showingSheet = 1;
            objc_msgSend_ptr(self, selRef_showSaveChangesAlert_, v4, a4);
            LOBYTE(a4) = 0;
          }
        }
      }
    }
  }
  return (char)a4;
}
// 100026A40: using guessed type char *selRef_isEnabled;
// 100026D30: using guessed type char *selRef_showSaveChangesAlert_;
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010000C2BA) ----------------------------------------------------
// GMAppController - (id)outlineView:(id) toolTipForCell:(id) rect:(struct CGRect *) tableColumn:(id) item:(id) mouseLocation:(struct CGPoint) 
id __cdecl -[GMAppController outlineView:toolTipForCell:rect:tableColumn:item:mouseLocation:](struct GMAppController *self, SEL a2, id a3, id a4, struct CGRect *a5, id a6, id a7, struct CGPoint a8)
{
  __int64 v8; // rax@0
  id result; // rax@1
  __int64 v10; // rax@2
  void *(*v11)(void *, const char *, ...); // r13@3
  void *v12; // r15@3
  void *v13; // r12@3
  void *v14; // rax@3
  __CFString *v15; // rdx@3
  const char *v16; // rsi@3
  void *v17; // rdi@3
  void *v18; // rcx@3
  void *v19; // r8@3
  __int64 v20; // rax@4
  char v21; // cl@4
  void *v22; // r12@5
  void *v23; // rbx@5
  __int64 v24; // [sp-8h] [bp-30h]@1

  v24 = v8;
  result = 0LL;
  if ( (id)self->outlineViewBrowser == a3 )
  {
    LODWORD(v10) = msgRef_self__objc_msgSend_fixup(classRef_GMGatewayInfo, &msgRef_self__objc_msgSend_fixup);
    if ( (unsigned __int8)msgRef_isKindOfClass___objc_msgSend_fixup(a7, &msgRef_isKindOfClass___objc_msgSend_fixup, v10) )
    {
      v11 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v12 = objc_msgSend_ptr(self->gateway, selRef_name, v24);
      v13 = v11(self->gateway, selRef_controllerName);
      v14 = v11(self->gateway, selRef_version);
      v15 = &cfstr_Name_Controlle;
      v16 = selRef_stringWithFormat_;
      v17 = classRef_NSString;
      v18 = v12;
      v19 = v13;
    }
    else
    {
      LODWORD(v20) = msgRef_self__objc_msgSend_fixup(classRef_GMServerInfo, &msgRef_self__objc_msgSend_fixup);
      v21 = msgRef_isKindOfClass___objc_msgSend_fixup(a7, &msgRef_isKindOfClass___objc_msgSend_fixup, v20);
      result = 0LL;
      if ( !v21 )
        return result;
      v11 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      v22 = objc_msgSend_ptr(a7, selRef_ipAddress, v24);
      v23 = v11(a7, selRef_statusString);
      v14 = v11(a7, selRef_serviceVersion);
      v15 = &cfstr_Ip_Status_Vers;
      v16 = selRef_stringWithFormat_;
      v17 = classRef_NSString;
      v18 = v22;
      v19 = v23;
    }
    result = (id)v11(v17, v16, v15, v18, v19, v14);
  }
  return result;
}
// 1000263A8: using guessed type char *selRef_stringWithFormat_;
// 100026590: using guessed type char *selRef_ipAddress;
// 100026780: using guessed type char *selRef_name;
// 100026A58: using guessed type char *selRef_version;
// 100026A60: using guessed type char *selRef_controllerName;
// 100026AA0: using guessed type char *selRef_serviceVersion;
// 100026AC8: using guessed type char *selRef_statusString;
// 100027300: using guessed type int (__fastcall *msgRef_self__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027310: using guessed type int (__fastcall *msgRef_isKindOfClass___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 1000273C0: using guessed type void *classRef_NSString;
// 100029388: using guessed type __CFString cfstr_Name_Controlle;
// 1000293A8: using guessed type __CFString cfstr_Ip_Status_Vers;

//----- (000000010000C414) ----------------------------------------------------
// GMSplitView - (id)init
id __cdecl -[GMSplitView init](struct GMSplitView *self, SEL a2)
{
  struct objc_object *v2; // rax@1
  struct objc_object *v3; // rbx@1
  struct GMSplitView *v5; // [sp+8h] [bp-18h]@1
  void *v6; // [sp+10h] [bp-10h]@1

  v5 = self;
  v6 = classRef_GMSplitView;
  v2 = (struct objc_object *)objc_msgSendSuper2(&v5, selRef_init);
  v3 = v2;
  if ( v2 )
    objc_msgSend_ptr(v2, selRef_commonInit);
  return v3;
}
// 1000262B8: using guessed type char *selRef_init;
// 100026E00: using guessed type char *selRef_commonInit;
// 100027530: using guessed type void *classRef_GMSplitView;

//----- (000000010000C45E) ----------------------------------------------------
// GMSplitView - (id)initWithCoder:(id) 
id __cdecl -[GMSplitView initWithCoder:](struct GMSplitView *self, SEL a2, id a3)
{
  struct objc_object *v3; // rax@1
  struct objc_object *v4; // rbx@1
  struct GMSplitView *v6; // [sp+8h] [bp-18h]@1
  void *v7; // [sp+10h] [bp-10h]@1

  v6 = self;
  v7 = classRef_GMSplitView;
  v3 = (struct objc_object *)objc_msgSendSuper2(&v6, selRef_initWithCoder_, a3);
  v4 = v3;
  if ( v3 )
    objc_msgSend_ptr(v3, selRef_commonInit);
  return v4;
}
// 100026E00: using guessed type char *selRef_commonInit;
// 100026E08: using guessed type char *selRef_initWithCoder_;
// 100027530: using guessed type void *classRef_GMSplitView;

//----- (000000010000C4A8) ----------------------------------------------------
// GMSplitView - (id)initWithFrame:(struct CGRect) 
id __cdecl -[GMSplitView initWithFrame:](struct GMSplitView *self, SEL a2, struct CGRect a3)
{
  struct objc_object *v3; // rax@1
  struct objc_object *v4; // rbx@1
  struct GMSplitView *v6; // [sp+28h] [bp-18h]@1
  void *v7; // [sp+30h] [bp-10h]@1

  v6 = self;
  v7 = classRef_GMSplitView;
  v3 = (struct objc_object *)objc_msgSendSuper2(
                               &v6,
                               selRef_initWithFrame_,
                               *(_QWORD *)&a3.var0.var0,
                               *(_QWORD *)&a3.var0.var1,
                               *(_QWORD *)&a3.var1.var0,
                               *(_QWORD *)&a3.var1.var1);
  v4 = v3;
  if ( v3 )
    objc_msgSend_ptr(v3, selRef_commonInit);
  return v4;
}
// 100026CD0: using guessed type char *selRef_initWithFrame_;
// 100026E00: using guessed type char *selRef_commonInit;
// 100027530: using guessed type void *classRef_GMSplitView;

//----- (000000010000C515) ----------------------------------------------------
// GMSplitView - (void)commonInit
void __cdecl -[GMSplitView commonInit](struct GMSplitView *self, SEL a2)
{
  __int64 v2; // xmm0_8@0
  __int64 v3; // xmm1_8@0
  void (*v4)(void *, const char *, ...); // r15@1
  void *v5; // rax@1
  void *v6; // r14@1

  v4 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  self->mHandleImage = (struct NSImage *)objc_msgSend_ptr(classRef_NSImage, selRef_imageNamed_, &cfstr_Splitview_hand);
  LODWORD(v5) = msgRef_alloc__objc_msgSend_fixup(classRef_GMSplitViewHandleImageView, &msgRef_alloc__objc_msgSend_fixup);
  v6 = v5;
  v4((void *)self->mHandleImage, selRef_size);
  v4((void *)self->mHandleImage, selRef_size);
  self->mHandleView = (struct GMSplitViewHandleImageView *)((void *(*)(void *, const char *, ...))v4)(
                                                             v6,
                                                             selRef_initWithFrame_,
                                                             0LL,
                                                             0LL,
                                                             v2,
                                                             v3);
  v4(self->mHandleView, selRef_setImage_, self->mHandleImage);
}
// 100026A68: using guessed type char *selRef_imageNamed_;
// 100026A90: using guessed type char *selRef_setImage_;
// 100026CD0: using guessed type char *selRef_initWithFrame_;
// 100026E10: using guessed type char *selRef_size;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027448: using guessed type void *classRef_NSImage;
// 1000293C8: using guessed type __CFString cfstr_Splitview_hand;

//----- (000000010000C611) ----------------------------------------------------
// GMSplitView - (struct CGPoint)dividerOrigin
struct CGPoint __cdecl -[GMSplitView dividerOrigin](struct GMSplitView *self, SEL a2)
{
  double v2; // xmm0_8@1
  double v3; // xmm1_8@1
  struct CGPoint result; // xmm1_8:xmm0_8@2

  v2 = self->mDividerOrigin.var0;
  v3 = self->mDividerOrigin.var1;
  result.var0 = v2;
  result.var1 = v3;
  return result;
}

//----- (000000010000C629) ----------------------------------------------------
// GMSplitView - (double)dividerThickness
double __cdecl -[GMSplitView dividerThickness](struct GMSplitView *self, SEL a2)
{
  return 1.0;
}

//----- (000000010000C637) ----------------------------------------------------
// GMSplitView - (void)placeDragHandleInSubview:(id) 
void __cdecl -[GMSplitView placeDragHandleInSubview:](struct GMSplitView *self, SEL a2, id a3)
{
  const char *v3; // rbx@1
  void (*v4)(void *, const char *, ...); // r14@1
  struct GMSplitViewHandleImageView *v5; // r14@1
  struct GMSplitViewHandleImageView *v6; // rsi@2
  double v7; // xmm0_8@2
  double v8; // xmm1_8@5
  void (*v9)(void *, const char *, ...); // rbx@7
  __int128 v10; // [sp+10h] [bp-60h]@5
  __int128 v11; // [sp+20h] [bp-50h]@5
  __int128 v12; // [sp+30h] [bp-40h]@2
  __int128 v13; // [sp+40h] [bp-30h]@2

  v3 = (const char *)a3;
  v4 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  objc_msgSend_ptr(a3, selRef_addSubview_, self->mHandleView);
  v4(self->mHandleView, selRef_setSplitView_, self);
  v5 = self->mHandleView;
  if ( v3 )
  {
    objc_msgSend_stret(&v12, v3, selRef_visibleRect);
    v6 = self->mHandleView;
    v7 = *(double *)&v13;
  }
  else
  {
    v13 = 0LL;
    v12 = 0LL;
    v7 = 0.0;
    v6 = v5;
  }
  if ( v6 )
  {
    objc_msgSend_stret(&v10, (const char *)v6, selRef_frame);
    v8 = *(double *)&v11;
  }
  else
  {
    v11 = 0LL;
    v10 = 0LL;
    v8 = 0.0;
  }
  v9 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  objc_msgSend_ptr(v5, selRef_setFrameOrigin_, v7 - v8, COERCE_DOUBLE(0LL));
  v9(self->mHandleView, selRef_setAutoresizingMask_, 1LL);
}
// 1000262F8: using guessed type char *selRef_addSubview_;
// 100026340: using guessed type char *selRef_setAutoresizingMask_;
// 100026A10: using guessed type char *selRef_frame;
// 100026D00: using guessed type char *selRef_setFrameOrigin_;
// 100026E18: using guessed type char *selRef_setSplitView_;
// 100026E20: using guessed type char *selRef_visibleRect;

//----- (000000010000C73C) ----------------------------------------------------
// GMSplitView - (void)drawDividerInRect:(struct CGRect) 
void __cdecl -[GMSplitView drawDividerInRect:](struct GMSplitView *self, SEL a2, struct CGRect a3)
{
  void *(*v3)(void *, const char *, ...); // r12@1
  void *v4; // r14@1
  void *v5; // rbx@1
  void *v6; // rax@1
  void (*v7)(void *, const char *, ...); // rbx@2
  void *v8; // rax@2
  __int64 v9; // rax@2
  __int64 v10; // rax@3
  struct CGPoint v11; // [sp+0h] [bp-50h]@1
  __int64 v12; // [sp+10h] [bp-40h]@1
  __int64 v13; // [sp+18h] [bp-38h]@1
  __int64 v14; // [sp+28h] [bp-28h]@1

  v14 = *(_QWORD *)__stack_chk_guard_ptr;
  v3 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  objc_msgSend_ptr(classRef_NSGraphicsContext, selRef_saveGraphicsState);
  v4 = v3(classRef_NSGraphicsContext, selRef_currentContext);
  self->mDividerOrigin.var1 = a3.var0.var1;
  self->mDividerOrigin.var0 = a3.var0.var0;
  v11 = a3.var0;
  v12 = *(_QWORD *)&a3.var0.var0;
  *(double *)&v13 = a3.var0.var1 + a3.var1.var1;
  v5 = v3(
         classRef_NSBezierPath,
         selRef_bezierPath,
         *(_QWORD *)&a3.var0.var0,
         *(_QWORD *)&a3.var0.var1,
         *(_QWORD *)&a3.var0.var0,
         a3.var0.var1 + a3.var1.var1);
  v3(
    v5,
    selRef_appendBezierPathWithPoints_count_,
    &v11,
    2LL,
    *(_QWORD *)&a3.var0.var0,
    *(_QWORD *)&a3.var0.var1,
    *(_QWORD *)&a3.var0.var0,
    a3.var0.var1 + a3.var1.var1);
  v3(
    v5,
    selRef_setLineWidth_,
    COERCE_DOUBLE(4607182418800017408LL),
    *(_QWORD *)&v11.var0,
    *(_QWORD *)&v11.var1,
    v12,
    v13);
  v6 = v3(classRef_NSColor, selRef_lightGrayColor, *(_QWORD *)&v11.var0, *(_QWORD *)&v11.var1, v12, v13);
  v3(v6, selRef_set, *(_QWORD *)&v11.var0, *(_QWORD *)&v11.var1, v12, v13);
  v3(v4, selRef_setShouldAntialias_, 0LL, *(_QWORD *)&v11.var0, *(_QWORD *)&v11.var1, v12, v13);
  v3(v5, selRef_stroke, *(_QWORD *)&v11.var0, *(_QWORD *)&v11.var1, v12, v13);
  if ( !v3(self->mHandleView, selRef_superview, *(_QWORD *)&v11.var0, *(_QWORD *)&v11.var1, v12, v13) )
  {
    v7 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    v8 = objc_msgSend_ptr(self, selRef_subviews, *(_QWORD *)&v11.var0, *(_QWORD *)&v11.var1, v12, v13);
    LODWORD(v9) = msgRef_objectAtIndex___objc_msgSend_fixup(v8, &msgRef_objectAtIndex___objc_msgSend_fixup, 0LL);
    v7(self, selRef_placeDragHandleInSubview_, v9, *(_QWORD *)&v11.var0, *(_QWORD *)&v11.var1, v12, v13);
  }
  objc_msgSend_ptr(
    classRef_NSGraphicsContext,
    selRef_restoreGraphicsState,
    *(_QWORD *)&v11.var0,
    *(_QWORD *)&v11.var1,
    v12,
    v13);
  v10 = *(_QWORD *)__stack_chk_guard_ptr;
}
// 100021088: using guessed type void *__stack_chk_guard_ptr;
// 100026D48: using guessed type char *selRef_subviews;
// 100026E28: using guessed type char *selRef_saveGraphicsState;
// 100026E30: using guessed type char *selRef_currentContext;
// 100026E38: using guessed type char *selRef_bezierPath;
// 100026E40: using guessed type char *selRef_appendBezierPathWithPoints_count_;
// 100026E48: using guessed type char *selRef_setLineWidth_;
// 100026E50: using guessed type char *selRef_lightGrayColor;
// 100026E58: using guessed type char *selRef_set;
// 100026E60: using guessed type char *selRef_setShouldAntialias_;
// 100026E68: using guessed type char *selRef_stroke;
// 100026E70: using guessed type char *selRef_superview;
// 100026E78: using guessed type char *selRef_placeDragHandleInSubview_;
// 100026E80: using guessed type char *selRef_restoreGraphicsState;
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027450: using guessed type void *classRef_NSColor;
// 1000274B8: using guessed type void *classRef_NSGraphicsContext;
// 1000274C0: using guessed type void *classRef_NSBezierPath;

//----- (000000010000C8BE) ----------------------------------------------------
// GMSplitView - (void)dealloc
void __cdecl -[GMSplitView dealloc](struct GMSplitView *self, SEL a2)
{
  struct GMSplitView *v2; // [sp+8h] [bp-18h]@1
  void *v3; // [sp+10h] [bp-10h]@1

  msgRef_release__objc_msgSend_fixup(self->mHandleView, &msgRef_release__objc_msgSend_fixup);
  v2 = self;
  v3 = classRef_GMSplitView;
  objc_msgSendSuper2(&v2, selRef_dealloc);
}
// 1000262D8: using guessed type char *selRef_dealloc;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027530: using guessed type void *classRef_GMSplitView;

//----- (000000010000C908) ----------------------------------------------------
// GMSplitViewHandleImageView - (id)initWithFrame:(struct CGRect) 
id __cdecl -[GMSplitViewHandleImageView initWithFrame:](struct GMSplitViewHandleImageView *self, SEL a2, struct CGRect a3)
{
  id result; // rax@1
  struct GMSplitViewHandleImageView *v4; // [sp+20h] [bp-10h]@1
  void *v5; // [sp+28h] [bp-8h]@1

  v4 = self;
  v5 = classRef_GMSplitViewHandleImageView_0;
  result = (id)objc_msgSendSuper2(
                 &v4,
                 selRef_initWithFrame_,
                 *(_QWORD *)&a3.var0.var0,
                 *(_QWORD *)&a3.var0.var1,
                 *(_QWORD *)&a3.var1.var0,
                 *(_QWORD *)&a3.var1.var1,
                 self,
                 classRef_GMSplitViewHandleImageView_0);
  if ( result )
    result[24].isa = 0LL;
  return result;
}
// 100026CD0: using guessed type char *selRef_initWithFrame_;
// 100027538: using guessed type void *classRef_GMSplitViewHandleImageView_0;

//----- (000000010000C96C) ----------------------------------------------------
// GMSplitViewHandleImageView - (void)resetCursorRects
void __cdecl -[GMSplitViewHandleImageView resetCursorRects](struct GMSplitViewHandleImageView *self, SEL a2)
{
  void (*v2)(void *, const char *, ...); // r14@4
  void *v3; // rax@4
  __int128 v4; // [sp+20h] [bp-30h]@2
  __int128 v5; // [sp+30h] [bp-20h]@3

  if ( self )
  {
    objc_msgSend_stret(&v4, (const char *)self, selRef_visibleRect);
  }
  else
  {
    v5 = 0LL;
    v4 = 0LL;
  }
  v2 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  v3 = objc_msgSend_ptr(classRef_NSCursor, selRef_resizeLeftRightCursor);
  v2(self, selRef_addCursorRect_cursor_, v3, (_QWORD)v4, *((_QWORD *)&v4 + 1), (_QWORD)v5, *((_QWORD *)&v5 + 1));
}
// 1000262B0: using guessed type char *selRef_addCursorRect_cursor_;
// 100026E20: using guessed type char *selRef_visibleRect;
// 100026E88: using guessed type char *selRef_resizeLeftRightCursor;
// 100027378: using guessed type void *classRef_NSCursor;

//----- (000000010000C9F3) ----------------------------------------------------
// GMSplitViewHandleImageView - (void)setSplitView:(id) 
void __cdecl -[GMSplitViewHandleImageView setSplitView:](struct GMSplitViewHandleImageView *self, SEL a2, id a3)
{
  self->mSplitView = (struct GMSplitView *)a3;
}

//----- (000000010000CA04) ----------------------------------------------------
// GMSplitViewHandleImageView - (void)mouseDown:(id) 
void __cdecl -[GMSplitViewHandleImageView mouseDown:](struct GMSplitViewHandleImageView *self, SEL a2, id a3)
{
  double v3; // xmm0_8@0
  double v4; // xmm1_8@0
  id v5; // rbx@1
  void *v6; // ST20_8@1
  void *v7; // ST18_8@1
  void *v8; // r14@1
  void *v9; // r13@1
  void *v10; // rax@1

  v5 = a3;
  objc_msgSend_ptr(a3, selRef_locationInWindow);
  objc_msgSend_ptr(self->mSplitView, selRef_dividerOrigin);
  v6 = objc_msgSend_ptr(v5, selRef_type);
  v7 = objc_msgSend_ptr(v5, selRef_modifierFlags);
  objc_msgSend_ptr(v5, selRef_timestamp);
  objc_msgSend_ptr(v5, selRef_windowNumber);
  objc_msgSend_ptr(v5, selRef_context);
  v8 = objc_msgSend_ptr(v5, selRef_eventNumber);
  v9 = objc_msgSend_ptr(v5, selRef_clickCount);
  objc_msgSend_ptr(v5, selRef_pressure);
  v10 = objc_msgSend_ptr(
          classRef_NSEvent,
          selRef_mouseEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_clickCount_pressure_,
          v6,
          v7,
          v3,
          v4,
          v3,
          v3,
          v8,
          v9);
  objc_msgSend_ptr(self->mSplitView, selRef_mouseDown_, v10);
}
// 100026420: using guessed type char *selRef_type;
// 100026E90: using guessed type char *selRef_locationInWindow;
// 100026E98: using guessed type char *selRef_dividerOrigin;
// 100026EA0: using guessed type char *selRef_modifierFlags;
// 100026EA8: using guessed type char *selRef_timestamp;
// 100026EB0: using guessed type char *selRef_windowNumber;
// 100026EB8: using guessed type char *selRef_context;
// 100026EC0: using guessed type char *selRef_eventNumber;
// 100026EC8: using guessed type char *selRef_clickCount;
// 100026ED0: using guessed type char *selRef_pressure;
// 100026ED8: using guessed type char *selRef_mouseEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_clickCount_pressure_;
// 100026EE0: using guessed type char *selRef_mouseDown_;
// 1000274C8: using guessed type void *classRef_NSEvent;

//----- (000000010000CB5F) ----------------------------------------------------
// GMSplitViewHandleImageView - (void)mouseDragged:(id) 
void __cdecl -[GMSplitViewHandleImageView mouseDragged:](struct GMSplitViewHandleImageView *self, SEL a2, id a3)
{
  objc_msgSend_ptr(self->mSplitView, selRef_mouseDragged_, a3);
}
// 100026EE8: using guessed type char *selRef_mouseDragged_;

//----- (000000010000CB7C) ----------------------------------------------------
// GMSplitViewHandleImageView - (void)mouseUp:(id) 
void __cdecl -[GMSplitViewHandleImageView mouseUp:](struct GMSplitViewHandleImageView *self, SEL a2, id a3)
{
  double v3; // xmm0_8@0
  double v4; // xmm1_8@0
  id v5; // rbx@1
  void *v6; // ST20_8@1
  void *v7; // ST18_8@1
  void *v8; // r14@1
  void *v9; // r13@1
  void *v10; // rax@1

  v5 = a3;
  objc_msgSend_ptr(a3, selRef_locationInWindow);
  objc_msgSend_ptr(self->mSplitView, selRef_dividerOrigin);
  v6 = objc_msgSend_ptr(v5, selRef_type);
  v7 = objc_msgSend_ptr(v5, selRef_modifierFlags);
  objc_msgSend_ptr(v5, selRef_timestamp);
  objc_msgSend_ptr(v5, selRef_windowNumber);
  objc_msgSend_ptr(v5, selRef_context);
  v8 = objc_msgSend_ptr(v5, selRef_eventNumber);
  v9 = objc_msgSend_ptr(v5, selRef_clickCount);
  objc_msgSend_ptr(v5, selRef_pressure);
  v10 = objc_msgSend_ptr(
          classRef_NSEvent,
          selRef_mouseEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_clickCount_pressure_,
          v6,
          v7,
          v3,
          v4,
          v3,
          v3,
          v8,
          v9);
  objc_msgSend_ptr(self->mSplitView, selRef_mouseUp_, v10);
}
// 100026420: using guessed type char *selRef_type;
// 100026E90: using guessed type char *selRef_locationInWindow;
// 100026E98: using guessed type char *selRef_dividerOrigin;
// 100026EA0: using guessed type char *selRef_modifierFlags;
// 100026EA8: using guessed type char *selRef_timestamp;
// 100026EB0: using guessed type char *selRef_windowNumber;
// 100026EB8: using guessed type char *selRef_context;
// 100026EC0: using guessed type char *selRef_eventNumber;
// 100026EC8: using guessed type char *selRef_clickCount;
// 100026ED0: using guessed type char *selRef_pressure;
// 100026ED8: using guessed type char *selRef_mouseEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_clickCount_pressure_;
// 100026EF0: using guessed type char *selRef_mouseUp_;
// 1000274C8: using guessed type void *classRef_NSEvent;

//----- (000000010000CCD8) ----------------------------------------------------
// GMNavigationTab - (id)initWithType:(int) 
id __cdecl -[GMNavigationTab initWithType:](struct GMNavigationTab *self, SEL a2, int a3)
{
  int v3; // ebx@1
  struct objc_object *v4; // rax@1
  struct objc_object *v5; // r14@1
  int (__fastcall **v6)(_QWORD, _QWORD); // rbx@3
  void *v7; // rax@3
  const char *v8; // rsi@3
  void *v9; // rdi@3
  __CFString *v10; // rdx@3
  void *v11; // rax@4
  void *v12; // rax@5
  void *v13; // rax@6
  void *v14; // rax@7
  void *v15; // rax@8
  void *v16; // rax@8
  struct GMNavigationTab *v18; // [sp+0h] [bp-20h]@1
  void *v19; // [sp+8h] [bp-18h]@1

  v3 = a3;
  v18 = self;
  v19 = classRef_GMNavigationTab_0;
  v4 = (struct objc_object *)objc_msgSendSuper2(&v18, selRef_init, self, classRef_GMNavigationTab_0);
  v5 = v4;
  if ( v4 )
  {
    LOBYTE(v4[1].isa) = 0;
    HIDWORD(v4[1].isa) = v3;
    switch ( v3 )
    {
      case 0:
        v6 = &msgRef_retain__objc_msgSend_fixup;
        LODWORD(v7) = msgRef_retain__objc_msgSend_fixup(&cfstr_Overview, &msgRef_retain__objc_msgSend_fixup);
        v5[3].isa = v7;
        v8 = selRef_imageNamed_;
        v9 = classRef_NSImage;
        v10 = &cfstr_Toolbar_info_p;
        goto LABEL_8;
      case 1:
        v6 = &msgRef_retain__objc_msgSend_fixup;
        LODWORD(v11) = msgRef_retain__objc_msgSend_fixup(&cfstr_Logs, &msgRef_retain__objc_msgSend_fixup);
        v5[3].isa = v11;
        v8 = selRef_imageNamed_;
        v9 = classRef_NSImage;
        v10 = &cfstr_Toolbar_logs_p;
        goto LABEL_8;
      case 2:
        v6 = &msgRef_retain__objc_msgSend_fixup;
        LODWORD(v12) = msgRef_retain__objc_msgSend_fixup(&cfstr_Reports, &msgRef_retain__objc_msgSend_fixup);
        v5[3].isa = v12;
        v8 = selRef_imageNamed_;
        v9 = classRef_NSImage;
        v10 = &cfstr_Toolbar_report;
        goto LABEL_8;
      case 3:
        v6 = &msgRef_retain__objc_msgSend_fixup;
        LODWORD(v13) = msgRef_retain__objc_msgSend_fixup(&cfstr_Uuts, &msgRef_retain__objc_msgSend_fixup);
        v5[3].isa = v13;
        v8 = selRef_imageNamed_;
        v9 = classRef_NSImage;
        v10 = &cfstr_Toolbar_uuts_p;
        goto LABEL_8;
      case 4:
        v6 = &msgRef_retain__objc_msgSend_fixup;
        LODWORD(v14) = msgRef_retain__objc_msgSend_fixup(&cfstr_Settings, &msgRef_retain__objc_msgSend_fixup);
        v5[3].isa = v14;
        v8 = selRef_imageNamed_;
        v9 = classRef_NSImage;
        v10 = &cfstr_Toolbar_settin;
LABEL_8:
        v15 = objc_msgSend_ptr(v9, v8, v10, v18, v19);
        LODWORD(v16) = msgRef_retain__objc_msgSend_fixup(v15, v6);
        v5[2].isa = v16;
        break;
      default:
        return v5;
    }
  }
  return v5;
}
// 1000262B8: using guessed type char *selRef_init;
// 100026A68: using guessed type char *selRef_imageNamed_;
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027448: using guessed type void *classRef_NSImage;
// 100027540: using guessed type void *classRef_GMNavigationTab_0;
// 100029408: using guessed type __CFString cfstr_Toolbar_info_p;
// 100029448: using guessed type __CFString cfstr_Toolbar_logs_p;
// 100029488: using guessed type __CFString cfstr_Toolbar_report;
// 1000294C8: using guessed type __CFString cfstr_Toolbar_uuts_p;
// 100029508: using guessed type __CFString cfstr_Toolbar_settin;

//----- (000000010000CEA0) ----------------------------------------------------
// GMNavigationTab - (void)dealloc
void __cdecl -[GMNavigationTab dealloc](struct GMNavigationTab *self, SEL a2)
{
  __int64 v2; // [sp+0h] [bp-20h]@1
  void *v3; // [sp+8h] [bp-18h]@1

  msgRef_release__objc_msgSend_fixup(self->icon, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->label, &msgRef_release__objc_msgSend_fixup);
  v3 = classRef_GMNavigationTab_0;
  objc_msgSendSuper2(&v2, selRef_dealloc, self, classRef_GMNavigationTab_0);
}
// 1000262D8: using guessed type char *selRef_dealloc;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027540: using guessed type void *classRef_GMNavigationTab_0;

//----- (000000010000CF05) ----------------------------------------------------
// GMNavigationTab - (char)isSelected
char __cdecl -[GMNavigationTab isSelected](struct GMNavigationTab *self, SEL a2)
{
  return self->isSelected;
}

//----- (000000010000CF16) ----------------------------------------------------
// GMNavigationTab - (void)setIsSelected:(char) 
void __cdecl -[GMNavigationTab setIsSelected:](struct GMNavigationTab *self, SEL a2, char a3)
{
  self->isSelected = a3;
}

//----- (000000010000CF26) ----------------------------------------------------
// GMNavigationTab - (int)type
int __cdecl -[GMNavigationTab type](struct GMNavigationTab *self, SEL a2)
{
  return self->type;
}

//----- (000000010000CF36) ----------------------------------------------------
// GMNavigationTab - (void)setType:(int) 
void __cdecl -[GMNavigationTab setType:](struct GMNavigationTab *self, SEL a2, int a3)
{
  self->type = a3;
}

//----- (000000010000CF46) ----------------------------------------------------
// GMNavigationTab - (id)icon
id __cdecl -[GMNavigationTab icon](struct GMNavigationTab *self, SEL a2)
{
  return (id)self->icon;
}

//----- (000000010000CF57) ----------------------------------------------------
// GMNavigationTab - (void)setIcon:(id) 
void __cdecl -[GMNavigationTab setIcon:](struct GMNavigationTab *self, SEL a2, id a3)
{
  struct NSImage *v3; // r14@1

  v3 = (struct NSImage *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->icon, &msgRef_release__objc_msgSend_fixup);
  self->icon = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000CF9C) ----------------------------------------------------
// GMNavigationTab - (id)label
id __cdecl -[GMNavigationTab label](struct GMNavigationTab *self, SEL a2)
{
  return (id)self->label;
}

//----- (000000010000CFAD) ----------------------------------------------------
// GMNavigationTab - (void)setLabel:(id) 
void __cdecl -[GMNavigationTab setLabel:](struct GMNavigationTab *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->label, &msgRef_release__objc_msgSend_fixup);
  self->label = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000CFF2) ----------------------------------------------------
// GMNavigationTab - (id)description
id __cdecl -[GMNavigationTab description](struct GMNavigationTab *self, SEL a2)
{
  return (id)self->label;
}

//----- (000000010000D003) ----------------------------------------------------
// IconViewBox - (id)hitTest:(struct CGPoint) 
id __cdecl -[IconViewBox hitTest:](struct IconViewBox *self, SEL a2, struct CGPoint a3)
{
  return 0LL;
}

//----- (000000010000D00B) ----------------------------------------------------
// GMNavTabViewController - (void)awakeFromNib
void __cdecl -[GMNavTabViewController awakeFromNib](struct GMNavTabViewController *self, SEL a2)
{
  ;
}

//----- (000000010000D011) ----------------------------------------------------
// GMNavTabViewController - (void)dealloc
void __cdecl -[GMNavTabViewController dealloc](struct GMNavTabViewController *self, SEL a2)
{
  struct GMNavTabViewController *v2; // [sp+0h] [bp-10h]@1
  void *v3; // [sp+8h] [bp-8h]@1

  v2 = self;
  v3 = classRef_GMNavTabViewController_0;
  objc_msgSendSuper2(&v2, selRef_dealloc, self, classRef_GMNavTabViewController_0);
}
// 1000262D8: using guessed type char *selRef_dealloc;
// 100027548: using guessed type void *classRef_GMNavTabViewController_0;

//----- (000000010000D03E) ----------------------------------------------------
// GMNavTabViewController - (id)collectionView
id __cdecl -[GMNavTabViewController collectionView](struct GMNavTabViewController *self, SEL a2)
{
  return (id)self->collectionView;
}

//----- (000000010000D04F) ----------------------------------------------------
// GMNavTabViewController - (id)arrayController
id __cdecl -[GMNavTabViewController arrayController](struct GMNavTabViewController *self, SEL a2)
{
  return (id)self->arrayController;
}

//----- (000000010000D060) ----------------------------------------------------
// GMNavTabViewController - (id)tabs
id __cdecl -[GMNavTabViewController tabs](struct GMNavTabViewController *self, SEL a2)
{
  return (id)self->tabs;
}

//----- (000000010000D071) ----------------------------------------------------
// GMNavTabViewController - (void)setTabs:(id) 
void __cdecl -[GMNavTabViewController setTabs:](struct GMNavTabViewController *self, SEL a2, id a3)
{
  struct NSMutableArray *v3; // r14@1

  v3 = (struct NSMutableArray *)a3;
  if ( (id)self->tabs != a3 )
  {
    msgRef_retain__objc_msgSend_fixup(a3, &msgRef_retain__objc_msgSend_fixup);
    msgRef_release__objc_msgSend_fixup(self->tabs, &msgRef_release__objc_msgSend_fixup);
    self->tabs = v3;
  }
}
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000D0C3) ----------------------------------------------------
// GMNavTabViewController - (void)resetSelected
void __cdecl -[GMNavTabViewController resetSelected](struct GMNavTabViewController *self, SEL a2)
{
  void *(*v2)(void *, const char *, ...); // rbx@1
  void *v3; // r15@1
  void *v4; // rbx@1
  __int64 v5; // r13@2
  unsigned __int64 v6; // r14@3
  __int64 v7; // rax@8
  char v8; // [sp+0h] [bp-F0h]@1
  __int128 v9; // [sp+80h] [bp-70h]@1
  __int128 v10; // [sp+90h] [bp-60h]@1
  __int128 v11; // [sp+A0h] [bp-50h]@1
  __int128 v12; // [sp+B0h] [bp-40h]@1
  __int64 v13; // [sp+C0h] [bp-30h]@1

  v13 = *(_QWORD *)__stack_chk_guard_ptr;
  v12 = 0LL;
  v11 = 0LL;
  v10 = 0LL;
  v9 = 0LL;
  v2 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v3 = objc_msgSend_ptr(self, selRef_tabs);
  v4 = v2(v3, selRef_countByEnumeratingWithState_objects_count_, &v9, &v8, 16LL);
  if ( v4 )
  {
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0LL;
      do
      {
        if ( *(_QWORD *)v10 != v5 )
          objc_enumerationMutation(v3);
        objc_msgSend_ptr(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v6++), selRef_setIsSelected_, 0LL);
      }
      while ( v6 < (unsigned __int64)v4 );
      v4 = objc_msgSend_ptr(v3, selRef_countByEnumeratingWithState_objects_count_, &v9, &v8, 16LL);
    }
    while ( v4 );
  }
  v7 = *(_QWORD *)__stack_chk_guard_ptr;
}
// 100015EDE: using guessed type int __fastcall objc_enumerationMutation(_QWORD);
// 100021088: using guessed type void *__stack_chk_guard_ptr;
// 100026570: using guessed type char *selRef_countByEnumeratingWithState_objects_count_;
// 100026A18: using guessed type char *selRef_tabs;
// 100026EF8: using guessed type char *selRef_setIsSelected_;

//----- (000000010000D1BD) ----------------------------------------------------
// GMGatewayInfo - (id)init
id __cdecl -[GMGatewayInfo init](struct GMGatewayInfo *self, SEL a2)
{
  _BYTE *v2; // rbx@1
  __int64 v3; // rax@2
  __int64 v4; // rax@2
  __int64 v5; // rax@2
  __int64 v6; // rax@2
  __int64 v7; // rax@2
  __int64 v8; // rax@2
  __int64 v9; // rax@2
  __int64 v10; // rax@2
  __int64 v11; // rax@2
  __int64 v12; // rax@2
  __int64 v13; // rax@2
  __int64 v14; // rax@2
  __int64 v15; // rax@2
  void *v16; // rax@2
  __int64 v17; // rax@2
  struct GMGatewayInfo *v19; // [sp+8h] [bp-28h]@1
  void *v20; // [sp+10h] [bp-20h]@1

  v19 = self;
  v20 = classRef_GMGatewayInfo_0;
  v2 = objc_msgSendSuper2(&v19, selRef_init);
  if ( v2 )
  {
    v2[8] = 0;
    LODWORD(v3) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 2) = v3;
    LODWORD(v4) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 3) = v4;
    LODWORD(v5) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 4) = v5;
    LODWORD(v6) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 5) = v6;
    LODWORD(v7) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 6) = v7;
    LODWORD(v8) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 7) = v8;
    LODWORD(v9) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 8) = v9;
    LODWORD(v10) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 9) = v10;
    LODWORD(v11) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 10) = v11;
    LODWORD(v12) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 11) = v12;
    LODWORD(v13) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 12) = v13;
    LODWORD(v14) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 13) = v14;
    LODWORD(v15) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 14) = v15;
    v16 = objc_msgSend_ptr(classRef_NSMutableArray, selRef_array);
    LODWORD(v17) = msgRef_retain__objc_msgSend_fixup(v16, &msgRef_retain__objc_msgSend_fixup);
    *((_QWORD *)v2 + 15) = v17;
  }
  return (id)v2;
}
// 1000262B8: using guessed type char *selRef_init;
// 100026BF0: using guessed type char *selRef_array;
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027390: using guessed type void *classRef_NSMutableArray;
// 100027550: using guessed type void *classRef_GMGatewayInfo_0;

//----- (000000010000D372) ----------------------------------------------------
// GMGatewayInfo - (void)dealloc
void __cdecl -[GMGatewayInfo dealloc](struct GMGatewayInfo *self, SEL a2)
{
  __int64 v2; // [sp+0h] [bp-20h]@1
  void *v3; // [sp+8h] [bp-18h]@1

  msgRef_release__objc_msgSend_fixup(self->name, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->version, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->controllerIP, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->controllerName, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->logPath, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->adminPass, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->userPass, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->appleIP, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->siteID, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->shipTo, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->appleConnectName, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->appleConnectPass, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->logContents, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->serverList, &msgRef_release__objc_msgSend_fixup);
  v3 = classRef_GMGatewayInfo_0;
  objc_msgSendSuper2(&v2, selRef_dealloc, self, classRef_GMGatewayInfo_0);
}
// 1000262D8: using guessed type char *selRef_dealloc;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027550: using guessed type void *classRef_GMGatewayInfo_0;

//----- (000000010000D4C7) ----------------------------------------------------
// GMGatewayInfo - (char)updateFromGatewayStatusDict:(id) 
char __cdecl -[GMGatewayInfo updateFromGatewayStatusDict:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  id v3; // r15@1
  __int64 v4; // rax@1
  __int64 v5; // r14@1
  __int64 v6; // rax@1
  __int64 v7; // rax@1
  __int64 v8; // rax@1
  __int64 v9; // rax@1
  __int64 v10; // rax@1
  __int64 v11; // rax@1
  __int64 v12; // rax@1
  __int64 v13; // rax@1
  __int64 v14; // rbx@1
  char v15; // r15@1
  void *v16; // rax@2
  __int64 v17; // r14@5
  void *v18; // rax@6
  void *v19; // rax@9
  void *v20; // rax@12
  void *v21; // rax@15
  void *v22; // rax@18
  void *v23; // rax@21
  void *v24; // rax@24
  void *v25; // rax@27
  __int64 v27; // [sp+8h] [bp-68h]@1
  __int64 v28; // [sp+18h] [bp-58h]@1
  __int64 v29; // [sp+20h] [bp-50h]@1
  __int64 v30; // [sp+28h] [bp-48h]@1
  __int64 v31; // [sp+30h] [bp-40h]@1
  __int64 v32; // [sp+38h] [bp-38h]@1
  __int64 v33; // [sp+40h] [bp-30h]@1

  v3 = a3;
  LODWORD(v4) = msgRef_objectForKey___objc_msgSend_fixup(
                  a3,
                  &msgRef_objectForKey___objc_msgSend_fixup,
                  &cfstr_Gatewayversion);
  v5 = v4;
  LODWORD(v6) = msgRef_objectForKey___objc_msgSend_fixup(
                  v3,
                  &msgRef_objectForKey___objc_msgSend_fixup,
                  &cfstr_Gatewayip);
  v27 = v6;
  LODWORD(v7) = msgRef_objectForKey___objc_msgSend_fixup(
                  v3,
                  &msgRef_objectForKey___objc_msgSend_fixup,
                  &cfstr_Gatewayhostnam);
  v33 = v7;
  LODWORD(v8) = msgRef_objectForKey___objc_msgSend_fixup(
                  v3,
                  &msgRef_objectForKey___objc_msgSend_fixup,
                  &cfstr_Gatewayidentif);
  v28 = v8;
  LODWORD(v9) = msgRef_objectForKey___objc_msgSend_fixup(
                  v3,
                  &msgRef_objectForKey___objc_msgSend_fixup,
                  &cfstr_Gatewaylogpa_1);
  v29 = v9;
  LODWORD(v10) = msgRef_objectForKey___objc_msgSend_fixup(
                   v3,
                   &msgRef_objectForKey___objc_msgSend_fixup,
                   &cfstr_Appleip_1);
  v30 = v10;
  LODWORD(v11) = msgRef_objectForKey___objc_msgSend_fixup(
                   v3,
                   &msgRef_objectForKey___objc_msgSend_fixup,
                   &cfstr_Siteid_1);
  v31 = v11;
  LODWORD(v12) = msgRef_objectForKey___objc_msgSend_fixup(
                   v3,
                   &msgRef_objectForKey___objc_msgSend_fixup,
                   &cfstr_Shipto_1);
  v32 = v12;
  LODWORD(v13) = msgRef_objectForKey___objc_msgSend_fixup(
                   v3,
                   &msgRef_objectForKey___objc_msgSend_fixup,
                   &cfstr_Appleconnectid);
  v14 = v13;
  v15 = 0;
  if ( v5 )
  {
    v16 = objc_msgSend_ptr(self, selRef_version);
    v15 = 0;
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v5,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v16) )
    {
      objc_msgSend_ptr(self, selRef_setVersion_, v5);
      v15 = 1;
    }
  }
  if ( v27 )
  {
    v18 = objc_msgSend_ptr(self, selRef_controllerIP);
    v17 = v33;
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v27,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v18) )
    {
      objc_msgSend_ptr(self, selRef_setControllerIP_, v27);
      v15 = 1;
    }
  }
  else
  {
    v17 = v33;
  }
  if ( v17 )
  {
    v19 = objc_msgSend_ptr(self, selRef_controllerName);
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v17,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v19) )
    {
      objc_msgSend_ptr(self, selRef_setControllerName_, v17);
      v15 = 1;
    }
  }
  if ( v28 )
  {
    v20 = objc_msgSend_ptr(self, selRef_name);
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v28,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v20) )
    {
      objc_msgSend_ptr(self, selRef_setName_, v28);
      v15 = 1;
    }
  }
  if ( v29 )
  {
    v21 = objc_msgSend_ptr(self, selRef_logPath);
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v29,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v21) )
    {
      objc_msgSend_ptr(self, selRef_setLogPath_, v29);
      v15 = 1;
    }
  }
  if ( v30 )
  {
    v22 = objc_msgSend_ptr(self, selRef_appleIP);
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v30,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v22) )
    {
      objc_msgSend_ptr(self, selRef_setAppleIP_, v30);
      v15 = 1;
    }
  }
  if ( v31 )
  {
    v23 = objc_msgSend_ptr(self, selRef_siteID);
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v31,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v23) )
    {
      objc_msgSend_ptr(self, selRef_setSiteID_, v31);
      v15 = 1;
    }
  }
  if ( v32 )
  {
    v24 = objc_msgSend_ptr(self, selRef_shipTo);
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v32,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v24) )
    {
      objc_msgSend_ptr(self, selRef_setShipTo_, v32);
      v15 = 1;
    }
  }
  if ( v14 )
  {
    v25 = objc_msgSend_ptr(self, selRef_appleConnectName);
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v14,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v25) )
    {
      objc_msgSend_ptr(self, selRef_setAppleConnectName_, v14);
      v15 = 1;
    }
  }
  return v15;
}
// 100026650: using guessed type char *selRef_controllerIP;
// 100026658: using guessed type char *selRef_logPath;
// 100026780: using guessed type char *selRef_name;
// 1000268B0: using guessed type char *selRef_setName_;
// 1000268C8: using guessed type char *selRef_appleIP;
// 1000268D0: using guessed type char *selRef_siteID;
// 1000268D8: using guessed type char *selRef_shipTo;
// 1000268E0: using guessed type char *selRef_appleConnectName;
// 1000268E8: using guessed type char *selRef_setAppleIP_;
// 1000268F0: using guessed type char *selRef_setSiteID_;
// 1000268F8: using guessed type char *selRef_setShipTo_;
// 100026900: using guessed type char *selRef_setAppleConnectName_;
// 100026A58: using guessed type char *selRef_version;
// 100026A60: using guessed type char *selRef_controllerName;
// 100026F00: using guessed type char *selRef_setVersion_;
// 100026F08: using guessed type char *selRef_setControllerIP_;
// 100026F10: using guessed type char *selRef_setControllerName_;
// 100026F18: using guessed type char *selRef_setLogPath_;
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010000D847) ----------------------------------------------------
// GMGatewayInfo - (char)controllerConnected
char __cdecl -[GMGatewayInfo controllerConnected](struct GMGatewayInfo *self, SEL a2)
{
  return self->controllerConnected;
}

//----- (000000010000D858) ----------------------------------------------------
// GMGatewayInfo - (void)setControllerConnected:(char) 
void __cdecl -[GMGatewayInfo setControllerConnected:](struct GMGatewayInfo *self, SEL a2, char a3)
{
  self->controllerConnected = a3;
}

//----- (000000010000D868) ----------------------------------------------------
// GMGatewayInfo - (id)name
id __cdecl -[GMGatewayInfo name](struct GMGatewayInfo *self, SEL a2)
{
  return (id)self->name;
}

//----- (000000010000D879) ----------------------------------------------------
// GMGatewayInfo - (void)setName:(id) 
void __cdecl -[GMGatewayInfo setName:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->name, &msgRef_release__objc_msgSend_fixup);
  self->name = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000D8BE) ----------------------------------------------------
// GMGatewayInfo - (id)version
id __cdecl -[GMGatewayInfo version](struct GMGatewayInfo *self, SEL a2)
{
  return (id)self->version;
}

//----- (000000010000D8CF) ----------------------------------------------------
// GMGatewayInfo - (void)setVersion:(id) 
void __cdecl -[GMGatewayInfo setVersion:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->version, &msgRef_release__objc_msgSend_fixup);
  self->version = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000D914) ----------------------------------------------------
// GMGatewayInfo - (id)controllerIP
id __cdecl -[GMGatewayInfo controllerIP](struct GMGatewayInfo *self, SEL a2)
{
  return (id)self->controllerIP;
}

//----- (000000010000D925) ----------------------------------------------------
// GMGatewayInfo - (void)setControllerIP:(id) 
void __cdecl -[GMGatewayInfo setControllerIP:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->controllerIP, &msgRef_release__objc_msgSend_fixup);
  self->controllerIP = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000D96A) ----------------------------------------------------
// GMGatewayInfo - (id)controllerName
id __cdecl -[GMGatewayInfo controllerName](struct GMGatewayInfo *self, SEL a2)
{
  return (id)self->controllerName;
}

//----- (000000010000D97B) ----------------------------------------------------
// GMGatewayInfo - (void)setControllerName:(id) 
void __cdecl -[GMGatewayInfo setControllerName:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->controllerName, &msgRef_release__objc_msgSend_fixup);
  self->controllerName = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000D9C0) ----------------------------------------------------
// GMGatewayInfo - (id)logPath
id __cdecl -[GMGatewayInfo logPath](struct GMGatewayInfo *self, SEL a2)
{
  return (id)self->logPath;
}

//----- (000000010000D9D1) ----------------------------------------------------
// GMGatewayInfo - (void)setLogPath:(id) 
void __cdecl -[GMGatewayInfo setLogPath:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->logPath, &msgRef_release__objc_msgSend_fixup);
  self->logPath = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000DA16) ----------------------------------------------------
// GMGatewayInfo - (id)adminPass
id __cdecl -[GMGatewayInfo adminPass](struct GMGatewayInfo *self, SEL a2)
{
  return (id)self->adminPass;
}

//----- (000000010000DA27) ----------------------------------------------------
// GMGatewayInfo - (void)setAdminPass:(id) 
void __cdecl -[GMGatewayInfo setAdminPass:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->adminPass, &msgRef_release__objc_msgSend_fixup);
  self->adminPass = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000DA6C) ----------------------------------------------------
// GMGatewayInfo - (id)userPass
id __cdecl -[GMGatewayInfo userPass](struct GMGatewayInfo *self, SEL a2)
{
  return (id)self->userPass;
}

//----- (000000010000DA7D) ----------------------------------------------------
// GMGatewayInfo - (void)setUserPass:(id) 
void __cdecl -[GMGatewayInfo setUserPass:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->userPass, &msgRef_release__objc_msgSend_fixup);
  self->userPass = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000DAC2) ----------------------------------------------------
// GMGatewayInfo - (id)appleIP
id __cdecl -[GMGatewayInfo appleIP](struct GMGatewayInfo *self, SEL a2)
{
  return (id)self->appleIP;
}

//----- (000000010000DAD3) ----------------------------------------------------
// GMGatewayInfo - (void)setAppleIP:(id) 
void __cdecl -[GMGatewayInfo setAppleIP:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->appleIP, &msgRef_release__objc_msgSend_fixup);
  self->appleIP = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000DB18) ----------------------------------------------------
// GMGatewayInfo - (id)siteID
id __cdecl -[GMGatewayInfo siteID](struct GMGatewayInfo *self, SEL a2)
{
  return (id)self->siteID;
}

//----- (000000010000DB29) ----------------------------------------------------
// GMGatewayInfo - (void)setSiteID:(id) 
void __cdecl -[GMGatewayInfo setSiteID:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->siteID, &msgRef_release__objc_msgSend_fixup);
  self->siteID = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000DB6E) ----------------------------------------------------
// GMGatewayInfo - (id)shipTo
id __cdecl -[GMGatewayInfo shipTo](struct GMGatewayInfo *self, SEL a2)
{
  return (id)self->shipTo;
}

//----- (000000010000DB7F) ----------------------------------------------------
// GMGatewayInfo - (void)setShipTo:(id) 
void __cdecl -[GMGatewayInfo setShipTo:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->shipTo, &msgRef_release__objc_msgSend_fixup);
  self->shipTo = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000DBC4) ----------------------------------------------------
// GMGatewayInfo - (id)appleConnectName
id __cdecl -[GMGatewayInfo appleConnectName](struct GMGatewayInfo *self, SEL a2)
{
  return (id)self->appleConnectName;
}

//----- (000000010000DBD5) ----------------------------------------------------
// GMGatewayInfo - (void)setAppleConnectName:(id) 
void __cdecl -[GMGatewayInfo setAppleConnectName:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->appleConnectName, &msgRef_release__objc_msgSend_fixup);
  self->appleConnectName = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000DC1A) ----------------------------------------------------
// GMGatewayInfo - (id)appleConnectPass
id __cdecl -[GMGatewayInfo appleConnectPass](struct GMGatewayInfo *self, SEL a2)
{
  return (id)self->appleConnectPass;
}

//----- (000000010000DC2B) ----------------------------------------------------
// GMGatewayInfo - (void)setAppleConnectPass:(id) 
void __cdecl -[GMGatewayInfo setAppleConnectPass:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->appleConnectPass, &msgRef_release__objc_msgSend_fixup);
  self->appleConnectPass = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000DC70) ----------------------------------------------------
// GMGatewayInfo - (id)logContents
id __cdecl -[GMGatewayInfo logContents](struct GMGatewayInfo *self, SEL a2)
{
  return (id)self->logContents;
}

//----- (000000010000DC81) ----------------------------------------------------
// GMGatewayInfo - (void)setLogContents:(id) 
void __cdecl -[GMGatewayInfo setLogContents:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->logContents, &msgRef_release__objc_msgSend_fixup);
  self->logContents = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000DCC6) ----------------------------------------------------
// GMGatewayInfo - (void)appendLogContents:(id) 
void __cdecl -[GMGatewayInfo appendLogContents:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  __int64 v3; // rax@0

  self->logContents = (struct NSString *)objc_msgSend_ptr(self->logContents, selRef_stringByAppendingString_, a3, v3);
}
// 100026688: using guessed type char *selRef_stringByAppendingString_;

//----- (000000010000DCF9) ----------------------------------------------------
// GMGatewayInfo - (id)serverList
id __cdecl -[GMGatewayInfo serverList](struct GMGatewayInfo *self, SEL a2)
{
  return (id)self->serverList;
}

//----- (000000010000DD0A) ----------------------------------------------------
// GMGatewayInfo - (id)settingsDict
id __cdecl -[GMGatewayInfo settingsDict](struct GMGatewayInfo *self, SEL a2)
{
  __int64 v2; // rax@0
  void *(*v3)(void *, const char *, ...); // r15@1
  void *v4; // r14@1
  void *v5; // rax@1
  void *v6; // rax@1
  __int64 v7; // rax@1
  void *v8; // rax@3
  __int64 v9; // rax@3
  void (*v10)(void *, const char *, ...); // r15@5
  void *v11; // rax@5
  __int64 v12; // rax@5

  v3 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v4 = objc_msgSend_ptr(classRef_NSMutableDictionary, selRef_dictionaryWithCapacity_, 1LL, v2);
  v5 = v3(classRef_NSNumber, selRef_numberWithBool_, 1LL);
  v3(v4, selRef_setObject_forKey_, v5, &cfstr_Setconfigurati);
  v3(v4, selRef_setObject_forKey_, self->name, &cfstr_Gatewayidentif);
  v6 = v3(self, selRef_adminPass);
  LODWORD(v7) = msgRef_length__objc_msgSend_fixup(v6, &msgRef_length__objc_msgSend_fixup);
  if ( v7 )
    objc_msgSend_ptr(v4, selRef_setObject_forKey_, self->adminPass, &cfstr_Adminpassword);
  v8 = objc_msgSend_ptr(self, selRef_userPass);
  LODWORD(v9) = msgRef_length__objc_msgSend_fixup(v8, &msgRef_length__objc_msgSend_fixup);
  if ( v9 )
    objc_msgSend_ptr(v4, selRef_setObject_forKey_, self->userPass, &cfstr_Techpassword);
  v10 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  objc_msgSend_ptr(v4, selRef_setObject_forKey_, self->appleIP, &cfstr_Appleip_1);
  v10(v4, selRef_setObject_forKey_, self->siteID, &cfstr_Siteid_1);
  v10(v4, selRef_setObject_forKey_, self->shipTo, &cfstr_Shipto_1);
  v10(v4, selRef_setObject_forKey_, self->appleConnectName, &cfstr_Appleconnectid);
  v11 = ((void *(*)(void *, const char *, ...))v10)(self, selRef_appleConnectPass);
  LODWORD(v12) = msgRef_length__objc_msgSend_fixup(v11, &msgRef_length__objc_msgSend_fixup);
  if ( v12 )
    objc_msgSend_ptr(v4, selRef_setObject_forKey_, self->appleConnectPass, &cfstr_Appleconnect_1);
  return (id)objc_msgSend_ptr((void *)classRef_NSDictionary, selRef_dictionaryWithDictionary_, v4);
}
// 100026568: using guessed type char *selRef_dictionaryWithCapacity_;
// 100026598: using guessed type char *selRef_setObject_forKey_;
// 100026618: using guessed type char *selRef_numberWithBool_;
// 100026760: using guessed type char *selRef_dictionaryWithDictionary_;
// 100026F20: using guessed type char *selRef_adminPass;
// 100026F28: using guessed type char *selRef_userPass;
// 100026F30: using guessed type char *selRef_appleConnectPass;
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000273D8: using guessed type void *classRef_NSNumber;
// 100027408: using guessed type void *classRef_NSMutableDictionary;
// 100029648: using guessed type __CFString cfstr_Setconfigurati;
// 100029668: using guessed type __CFString cfstr_Adminpassword;
// 100029688: using guessed type __CFString cfstr_Techpassword;
// 1000296A8: using guessed type __CFString cfstr_Appleconnect_1;

//----- (000000010000DEF6) ----------------------------------------------------
// GMGatewayInfo - (uint64_t)logIndex
uint64_t __cdecl -[GMGatewayInfo logIndex](struct GMGatewayInfo *self, SEL a2)
{
  uint64_t result; // rax@1

  LODWORD(result) = msgRef_length__objc_msgSend_fixup(self->logContents, &msgRef_length__objc_msgSend_fixup);
  return result;
}
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000DF16) ----------------------------------------------------
// GMGatewayInfo - (int)authenticationStatus
int __cdecl -[GMGatewayInfo authenticationStatus](struct GMGatewayInfo *self, SEL a2)
{
  __int64 v2; // rax@0
  __int64 v3; // rax@1
  unsigned __int64 v4; // rbx@1
  void *(*v5)(void *, const char *, ...); // r12@1
  unsigned __int64 v6; // rax@3
  unsigned __int64 v7; // rcx@3
  int result; // eax@3
  void *v9; // rax@4
  void *v10; // r14@4
  void *v11; // rax@4
  void *v12; // rax@4
  void *(*v13)(void *, const char *, ...); // r15@5
  void *v14; // rbx@5
  void *v15; // r14@5
  unsigned int v16; // eax@5
  void *v17; // rax@5
  __int64 v18; // rax@8
  char v19; // cl@9
  int v20; // ecx@11
  int v21; // ecx@12
  int v22; // ecx@13
  int v23; // ecx@14
  int v24; // ecx@15
  int v25; // ecx@16
  int v26; // ecx@17
  int v27; // ecx@18
  __int64 v28; // [sp-8h] [bp-30h]@1

  v28 = v2;
  LODWORD(v3) = msgRef_count__objc_msgSend_fixup(self->serverList, &msgRef_count__objc_msgSend_fixup);
  NSLog(&cfstr_GatewaymgrNumS, v3);
  v4 = 0LL;
  v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  while ( 1 )
  {
    LODWORD(v6) = msgRef_count__objc_msgSend_fixup(self->serverList, &msgRef_count__objc_msgSend_fixup);
    v7 = v6;
    result = 1;
    if ( v4 >= v7 )
      return result;
    LODWORD(v9) = msgRef_objectAtIndex___objc_msgSend_fixup(
                    self->serverList,
                    &msgRef_objectAtIndex___objc_msgSend_fixup,
                    v4);
    v10 = v9;
    v11 = v5(v9, selRef_ipAddress, v28);
    v12 = v5(v11, selRef_UTF8String);
    NSLog(&cfstr_GatewaymgrServ, v12);
    if ( !(unsigned __int8)v5(v10, selRef_isConnected) )
      break;
    ++v4;
  }
  v13 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v14 = objc_msgSend_ptr(v10, selRef_lastAuthError);
  v15 = v13(v10, selRef_lastAuthErrorString);
  v16 = (unsigned __int64)v13(v14, selRef_intValue);
  NSLog(&cfstr_GatewaymgrLast, v16);
  v17 = v13(v15, selRef_UTF8String);
  NSLog(&cfstr_GatewaymgrLa_1, v17);
  if ( !v14 )
    return 11;
  if ( (unsigned int)objc_msgSend_ptr(v14, selRef_intValue) )
  {
    v20 = (unsigned __int64)objc_msgSend_ptr(v14, selRef_intValue);
    result = 6;
    if ( v20 == 8 )
      return result;
    v21 = (unsigned __int64)objc_msgSend_ptr(v14, selRef_intValue);
    result = 6;
    if ( v21 == 31 )
      return result;
    v22 = (unsigned __int64)objc_msgSend_ptr(v14, selRef_intValue);
    result = 7;
    if ( v22 == 11 )
      return result;
    v23 = (unsigned __int64)objc_msgSend_ptr(v14, selRef_intValue);
    result = 8;
    if ( v23 == 9 )
      return result;
    v24 = (unsigned __int64)objc_msgSend_ptr(v14, selRef_intValue);
    result = 9;
    if ( v24 == 10 )
      return result;
    v25 = (unsigned __int64)objc_msgSend_ptr(v14, selRef_intValue);
    result = 10;
    if ( v25 == 1 )
      return result;
    v26 = (unsigned __int64)objc_msgSend_ptr(v14, selRef_intValue);
    result = 13;
    if ( v26 == 3 )
      return result;
    v27 = (unsigned __int64)objc_msgSend_ptr(v14, selRef_intValue);
    result = 12;
    if ( v27 == 30 )
      return result;
    return 11;
  }
  result = 0;
  if ( v15 )
  {
    LODWORD(v18) = msgRef_length__objc_msgSend_fixup(v15, &msgRef_length__objc_msgSend_fixup);
    if ( !v18
      || (v19 = msgRef_isEqualToString___objc_msgSend_fixup(
                  v15,
                  &msgRef_isEqualToString___objc_msgSend_fixup,
                  &cfstr_Authenticating),
          result = 0,
          v19) )
    {
      result = 2;
    }
  }
  return result;
}
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 100026450: using guessed type char *selRef_intValue;
// 100026520: using guessed type char *selRef_UTF8String;
// 100026590: using guessed type char *selRef_ipAddress;
// 100026A98: using guessed type char *selRef_isConnected;
// 100026F38: using guessed type char *selRef_lastAuthError;
// 100026F40: using guessed type char *selRef_lastAuthErrorString;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 1000296C8: using guessed type __CFString cfstr_GatewaymgrNumS;
// 1000296E8: using guessed type __CFString cfstr_GatewaymgrServ;
// 100029708: using guessed type __CFString cfstr_GatewaymgrLast;
// 100029728: using guessed type __CFString cfstr_GatewaymgrLa_1;

//----- (000000010000E1B3) ----------------------------------------------------
// GMGatewayInfo - (int64_t)numberOfServers
int64_t __cdecl -[GMGatewayInfo numberOfServers](struct GMGatewayInfo *self, SEL a2)
{
  int64_t result; // rax@1

  LODWORD(result) = msgRef_count__objc_msgSend_fixup(self->serverList, &msgRef_count__objc_msgSend_fixup);
  return result;
}
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000E1D3) ----------------------------------------------------
// GMGatewayInfo - (id)serverAtIndex:(int64_t) 
id __cdecl -[GMGatewayInfo serverAtIndex:](struct GMGatewayInfo *self, SEL a2, int64_t a3)
{
  id result; // rax@1

  LODWORD(result) = msgRef_objectAtIndex___objc_msgSend_fixup(
                      self->serverList,
                      &msgRef_objectAtIndex___objc_msgSend_fixup,
                      a3);
  return result;
}
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010000E1F3) ----------------------------------------------------
// GMGatewayInfo - (void)addServer:(id) 
void __cdecl -[GMGatewayInfo addServer:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  objc_msgSend_ptr((void *)self->serverList, selRef_addObject_, a3);
}
// 1000262D0: using guessed type char *selRef_addObject_;

//----- (000000010000E210) ----------------------------------------------------
// GMGatewayInfo - (void)removeServerAtIndex:(int64_t) 
void __cdecl -[GMGatewayInfo removeServerAtIndex:](struct GMGatewayInfo *self, SEL a2, int64_t a3)
{
  objc_msgSend_ptr((void *)self->serverList, selRef_removeObjectAtIndex_, a3);
}
// 100026428: using guessed type char *selRef_removeObjectAtIndex_;

//----- (000000010000E22D) ----------------------------------------------------
// GMGatewayInfo - (void)removeAllServers
void __cdecl -[GMGatewayInfo removeAllServers](struct GMGatewayInfo *self, SEL a2)
{
  objc_msgSend_ptr((void *)self->serverList, selRef_removeAllObjects);
}
// 100026970: using guessed type char *selRef_removeAllObjects;

//----- (000000010000E24A) ----------------------------------------------------
// GMGatewayInfo - (int64_t)indexOfServerWithIP:(id) 
int64_t __cdecl -[GMGatewayInfo indexOfServerWithIP:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  id v4; // r14@1
  struct GMGatewayInfo *v5; // r15@1
  struct NSMutableArray *v6; // rdi@1
  int64_t result; // rax@1
  unsigned __int64 i; // rbx@3
  unsigned __int64 v9; // rax@5
  unsigned __int64 v10; // rcx@5
  void *v11; // rax@6
  void *v12; // rax@6
  __int64 v13; // [sp-8h] [bp-30h]@1

  v13 = v3;
  v4 = a3;
  v5 = self;
  v6 = self->serverList;
  result = 0x7FFFFFFFFFFFFFFFLL;
  if ( v6 && a3 )
  {
    for ( i = 0LL; ; ++i )
    {
      LODWORD(v9) = msgRef_count__objc_msgSend_fixup(v6, &msgRef_count__objc_msgSend_fixup);
      v10 = v9;
      result = 0x7FFFFFFFFFFFFFFFLL;
      if ( i >= v10 )
        break;
      LODWORD(v11) = msgRef_objectAtIndex___objc_msgSend_fixup(
                       v5->serverList,
                       &msgRef_objectAtIndex___objc_msgSend_fixup,
                       i);
      v12 = objc_msgSend_ptr(v11, selRef_ipAddress, v13);
      if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                              v12,
                              &msgRef_isEqualToString___objc_msgSend_fixup,
                              v4) )
        return i;
      v6 = v5->serverList;
    }
  }
  return result;
}
// 100026590: using guessed type char *selRef_ipAddress;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010000E30C) ----------------------------------------------------
// GMGatewayInfo - (id)serverWithHostName:(id) 
id __cdecl -[GMGatewayInfo serverWithHostName:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  id v4; // r14@1
  struct GMGatewayInfo *v5; // rbx@1
  struct NSMutableArray *v6; // rdi@1
  struct objc_object *v7; // r13@1
  unsigned __int64 i; // r12@3
  struct objc_object *v9; // rax@4
  void *v10; // rax@4
  unsigned __int64 v11; // rax@6
  __int64 v13; // [sp-8h] [bp-30h]@1

  v13 = v3;
  v4 = a3;
  v5 = self;
  v6 = self->serverList;
  v7 = 0LL;
  if ( v6 && a3 )
  {
    for ( i = 0LL; ; ++i )
    {
      LODWORD(v11) = msgRef_count__objc_msgSend_fixup(v6, &msgRef_count__objc_msgSend_fixup);
      if ( i >= v11 )
        break;
      LODWORD(v9) = msgRef_objectAtIndex___objc_msgSend_fixup(
                      v5->serverList,
                      &msgRef_objectAtIndex___objc_msgSend_fixup,
                      i);
      v7 = v9;
      v10 = objc_msgSend_ptr(v9, selRef_hostName, v13);
      if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                              v10,
                              &msgRef_isEqualToString___objc_msgSend_fixup,
                              v4) )
        return v7;
      v6 = v5->serverList;
    }
    v7 = 0LL;
  }
  return v7;
}
// 100026788: using guessed type char *selRef_hostName;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010000E3BA) ----------------------------------------------------
// GMGatewayInfo - (id)uutWithSerialNumber:(id) 
id __cdecl -[GMGatewayInfo uutWithSerialNumber:](struct GMGatewayInfo *self, SEL a2, id a3)
{
  struct NSMutableArray *v3; // rdi@1
  struct objc_object *v4; // r14@1
  char *v5; // r14@3
  void *(*v6)(void *, const char *, ...); // r15@3
  unsigned __int64 i; // rbx@3
  void *v8; // rax@4
  void *v9; // r13@4
  signed __int64 v10; // rbx@4
  const char *v11; // r12@4
  void *v12; // rax@5
  unsigned __int64 v13; // rax@5
  void *v14; // rax@6
  struct objc_object *v15; // rax@6
  void *v16; // rax@6
  unsigned __int64 v17; // rax@9
  struct GMGatewayInfo *v19; // [sp+0h] [bp-40h]@1
  id v20; // [sp+8h] [bp-38h]@2
  unsigned __int64 v21; // [sp+10h] [bp-30h]@4

  v19 = self;
  v3 = self->serverList;
  v4 = 0LL;
  if ( v3 )
  {
    v20 = a3;
    if ( a3 )
    {
      v5 = selRef_uutList;
      v6 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      for ( i = 0LL; ; i = v21 + 1 )
      {
        LODWORD(v17) = msgRef_count__objc_msgSend_fixup(v3, &msgRef_count__objc_msgSend_fixup);
        if ( i >= v17 )
          break;
        v21 = i;
        LODWORD(v8) = msgRef_objectAtIndex___objc_msgSend_fixup(
                        v19->serverList,
                        &msgRef_objectAtIndex___objc_msgSend_fixup,
                        i);
        v9 = v8;
        v10 = -1LL;
        v11 = v5;
        while ( 1 )
        {
          v12 = objc_msgSend_ptr(v9, v11, v19);
          LODWORD(v13) = msgRef_count__objc_msgSend_fixup(v12, &msgRef_count__objc_msgSend_fixup);
          if ( ++v10 >= v13 )
            break;
          v14 = v6(v9, v11);
          LODWORD(v15) = msgRef_objectAtIndex___objc_msgSend_fixup(v14, &msgRef_objectAtIndex___objc_msgSend_fixup, v21);
          v4 = v15;
          v16 = v6(v15, selRef_serialNumber);
          if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                                  v16,
                                  &msgRef_isEqualToString___objc_msgSend_fixup,
                                  v20) )
          {
            if ( v4 )
              return v4;
            break;
          }
        }
        v5 = (char *)v11;
        v3 = v19->serverList;
      }
      v4 = 0LL;
    }
  }
  return v4;
}
// 100026708: using guessed type char *selRef_serialNumber;
// 100026968: using guessed type char *selRef_uutList;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010000E4EC) ----------------------------------------------------
// GMServerInfo - (id)init
id __cdecl -[GMServerInfo init](struct GMServerInfo *self, SEL a2)
{
  struct objc_object *v2; // rax@1
  struct objc_object *v3; // rbx@1
  void *v4; // rax@2
  void *v5; // rax@2
  void *v6; // rax@2
  void *v7; // rax@2
  void *v8; // rax@2
  void *(*v9)(void *, const char *, ...); // r13@2
  void *v10; // rax@2
  void *v11; // rax@2
  void *v12; // rax@2
  void *v13; // rax@2
  void *v14; // rax@2
  void *v15; // rax@2
  void *v16; // rax@2
  void *v17; // rax@2
  void *v18; // rax@2
  void *v19; // rax@2
  void *v20; // rax@2
  void *v21; // rax@2
  void *v22; // rax@2
  void *v23; // rax@2
  void *v24; // rax@2
  void *v25; // rax@2
  void *v26; // rax@2
  void *v27; // rax@2
  void *v28; // rax@2
  struct GMServerInfo *v30; // [sp+8h] [bp-38h]@1
  void *v31; // [sp+10h] [bp-30h]@1

  v30 = self;
  v31 = classRef_GMServerInfo_0;
  v2 = (struct objc_object *)objc_msgSendSuper2(&v30, selRef_init);
  v3 = v2;
  if ( v2 )
  {
    LOBYTE(v2[1].isa) = 0;
    BYTE1(v2[1].isa) = 1;
    BYTE2(v2[1].isa) = 0;
    HIDWORD(v2[1].isa) = 3;
    LODWORD(v2[2].isa) = 0;
    LODWORD(v4) = msgRef_retain__objc_msgSend_fixup(&cfstr_0_0_0_0, &msgRef_retain__objc_msgSend_fixup);
    v3[3].isa = v4;
    LODWORD(v5) = msgRef_retain__objc_msgSend_fixup(&cfstr_Searching___, &msgRef_retain__objc_msgSend_fixup);
    v3[4].isa = v5;
    LODWORD(v6) = msgRef_retain__objc_msgSend_fixup(&cfstr_Searching___, &msgRef_retain__objc_msgSend_fixup);
    v3[5].isa = v6;
    LODWORD(v7) = msgRef_retain__objc_msgSend_fixup(&cfstr_Searching___, &msgRef_retain__objc_msgSend_fixup);
    v3[6].isa = v7;
    LODWORD(v8) = msgRef_retain__objc_msgSend_fixup(&cfstr_Searching___, &msgRef_retain__objc_msgSend_fixup);
    v9 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v3[7].isa = v8;
    v10 = v9(classRef_NSNumber, selRef_numberWithInteger_, 0LL);
    LODWORD(v11) = msgRef_retain__objc_msgSend_fixup(v10, &msgRef_retain__objc_msgSend_fixup);
    v3[8].isa = v11;
    LODWORD(v12) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v3[9].isa = v12;
    LODWORD(v13) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v3[10].isa = v13;
    LODWORD(v14) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v3[11].isa = v14;
    LODWORD(v15) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v3[12].isa = v15;
    LODWORD(v16) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v3[13].isa = v16;
    v17 = v9(classRef_NSDate, selRef_dateWithTimeIntervalSinceNow_, COERCE_DOUBLE(0LL));
    LODWORD(v18) = msgRef_retain__objc_msgSend_fixup(v17, &msgRef_retain__objc_msgSend_fixup);
    v3[14].isa = v18;
    LODWORD(v19) = msgRef_retain__objc_msgSend_fixup(&cfstr_Searching___, &msgRef_retain__objc_msgSend_fixup);
    v3[15].isa = v19;
    LODWORD(v20) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v3[16].isa = v20;
    v21 = v9(classRef_NSArray, selRef_array);
    LODWORD(v22) = msgRef_retain__objc_msgSend_fixup(v21, &msgRef_retain__objc_msgSend_fixup);
    v3[17].isa = v22;
    v23 = v9(classRef_NSNumber, selRef_numberWithInteger_, 0LL);
    LODWORD(v24) = msgRef_retain__objc_msgSend_fixup(v23, &msgRef_retain__objc_msgSend_fixup);
    v3[18].isa = v24;
    v3[19].isa = 0LL;
    v25 = v9(classRef_NSArray, selRef_array);
    LODWORD(v26) = msgRef_retain__objc_msgSend_fixup(v25, &msgRef_retain__objc_msgSend_fixup);
    v3[20].isa = v26;
    v27 = v9(classRef_NSMutableArray, selRef_array);
    LODWORD(v28) = msgRef_retain__objc_msgSend_fixup(v27, &msgRef_retain__objc_msgSend_fixup);
    v3[21].isa = v28;
  }
  return v3;
}
// 1000262B8: using guessed type char *selRef_init;
// 1000265C0: using guessed type char *selRef_numberWithInteger_;
// 100026BF0: using guessed type char *selRef_array;
// 100026F48: using guessed type char *selRef_dateWithTimeIntervalSinceNow_;
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027390: using guessed type void *classRef_NSMutableArray;
// 1000273D8: using guessed type void *classRef_NSNumber;
// 100027410: using guessed type void *classRef_NSArray;
// 1000274D0: using guessed type void *classRef_NSDate;
// 100027558: using guessed type void *classRef_GMServerInfo_0;

//----- (000000010000E7B2) ----------------------------------------------------
// GMServerInfo - (id)initWithServerDict:(id) 
id __cdecl -[GMServerInfo initWithServerDict:](struct GMServerInfo *self, SEL a2, id a3)
{
  id v3; // r14@1
  void *v4; // rax@1
  void *v5; // r12@1
  __int64 v6; // rax@2
  __int64 v7; // r15@2
  void *v8; // rax@2
  void *v9; // rbx@2
  __int64 v10; // rax@2
  __int64 v11; // rax@2
  __int64 v12; // rax@2
  void *v13; // rax@2
  void *v14; // rax@2
  __int64 v15; // rax@2
  __int64 v16; // rax@2
  void *v17; // rax@2
  __int64 v18; // rax@2
  __int64 v19; // rax@2
  __int64 v20; // r13@2
  void (*v21)(void *, const char *, ...); // r14@5
  char v22; // al@5
  void (*v23)(void *, const char *, ...); // r14@13
  char v24; // al@13
  void (*v25)(void *, const char *, ...); // r14@15
  unsigned int v26; // eax@15
  void (*v27)(void *, const char *, ...); // r14@21
  unsigned int v28; // eax@21
  void *v29; // rax@29
  __int64 v30; // rax@30
  __int64 v32; // [sp+8h] [bp-78h]@2
  __int64 v33; // [sp+10h] [bp-70h]@2
  __int64 v34; // [sp+18h] [bp-68h]@2
  void *v35; // [sp+20h] [bp-60h]@2
  void *v36; // [sp+28h] [bp-58h]@2
  __int64 v37; // [sp+30h] [bp-50h]@2
  void *v38; // [sp+38h] [bp-48h]@2
  __int64 v39; // [sp+40h] [bp-40h]@2
  __int64 v40; // [sp+48h] [bp-38h]@2

  v3 = a3;
  LODWORD(v4) = msgRef_alloc__objc_msgSend_fixup(classRef_GMServerInfo, &msgRef_alloc__objc_msgSend_fixup);
  v5 = objc_msgSend_ptr(v4, selRef_init);
  if ( v5 )
  {
    LODWORD(v6) = msgRef_objectForKey___objc_msgSend_fixup(
                    v3,
                    &msgRef_objectForKey___objc_msgSend_fixup,
                    &cfstr_Activitylogp_1);
    v7 = v6;
    LODWORD(v8) = msgRef_objectForKey___objc_msgSend_fixup(
                    v3,
                    &msgRef_objectForKey___objc_msgSend_fixup,
                    &cfstr_Connectedtoapp);
    v9 = v8;
    LODWORD(v10) = msgRef_objectForKey___objc_msgSend_fixup(v3, &msgRef_objectForKey___objc_msgSend_fixup, &cfstr_Error);
    v32 = v10;
    LODWORD(v11) = msgRef_objectForKey___objc_msgSend_fixup(
                     v3,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Errorstring);
    v33 = v11;
    LODWORD(v12) = msgRef_objectForKey___objc_msgSend_fixup(
                     v3,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Lasttransmis_1);
    v34 = v12;
    LODWORD(v13) = msgRef_objectForKey___objc_msgSend_fixup(
                     v3,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Serverversionu);
    v35 = v13;
    LODWORD(v14) = msgRef_objectForKey___objc_msgSend_fixup(
                     v3,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Numberconnecte);
    v36 = v14;
    LODWORD(v15) = msgRef_objectForKey___objc_msgSend_fixup(
                     v3,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Serverhostna_2);
    v40 = v15;
    LODWORD(v16) = msgRef_objectForKey___objc_msgSend_fixup(
                     v3,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Serverip);
    v37 = v16;
    LODWORD(v17) = msgRef_objectForKey___objc_msgSend_fixup(
                     v3,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Serveronline);
    v38 = v17;
    LODWORD(v18) = msgRef_objectForKey___objc_msgSend_fixup(
                     v3,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Serverport_1);
    v39 = v18;
    LODWORD(v19) = msgRef_objectForKey___objc_msgSend_fixup(
                     v3,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Transactionl_3);
    v20 = v19;
    if ( v7 )
      objc_msgSend_ptr(v5, selRef_setActivityLogPath_, v7);
    if ( v9 )
    {
      v21 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v22 = (unsigned __int64)objc_msgSend_ptr(v9, selRef_boolValue);
      v21(v5, selRef_setIsConnected_, (unsigned int)v22);
    }
    if ( v32 )
      objc_msgSend_ptr(v5, selRef_setLastAuthError_);
    if ( v33 )
      objc_msgSend_ptr(v5, selRef_setLastAuthErrorString_);
    if ( v34 )
      objc_msgSend_ptr(v5, selRef_setLastTransmission_);
    if ( v35 )
    {
      v23 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v24 = (unsigned __int64)objc_msgSend_ptr(v35, selRef_boolValue);
      v23(v5, selRef_setUpToDate_, (unsigned int)v24);
    }
    if ( v36 )
    {
      v25 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v26 = (unsigned __int64)objc_msgSend_ptr(v36, selRef_intValue);
      v25(v5, selRef_setUutCount_, v26);
    }
    if ( v40 )
      objc_msgSend_ptr(v5, selRef_setHostName_, v40);
    if ( v37 )
      objc_msgSend_ptr(v5, selRef_setIpAddress_);
    if ( v38 )
    {
      v27 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v28 = (unsigned __int64)objc_msgSend_ptr(v38, selRef_intValue);
      v27(v5, selRef_setStatus_, v28);
    }
    if ( v39 )
      objc_msgSend_ptr(v5, selRef_setPort_, v39);
    if ( v20 )
      objc_msgSend_ptr(v5, selRef_setTransactionLogPath_, v20);
    if ( v40 )
    {
      if ( v39 )
      {
        if ( (signed int)objc_msgSend_ptr(v5, selRef_status) <= 2 )
        {
          v29 = objc_msgSend_ptr(self, selRef_createLogProxy_usingPort_, v40, v39);
          if ( v29 )
          {
            LODWORD(v30) = msgRef_retain__objc_msgSend_fixup(v29, &msgRef_retain__objc_msgSend_fixup);
            objc_msgSend_ptr(v5, selRef_setLogProxy_, v30);
          }
        }
      }
    }
  }
  return (id)v5;
}
// 1000262B8: using guessed type char *selRef_init;
// 100026450: using guessed type char *selRef_intValue;
// 100026670: using guessed type char *selRef_boolValue;
// 100026928: using guessed type char *selRef_status;
// 100026F50: using guessed type char *selRef_setActivityLogPath_;
// 100026F58: using guessed type char *selRef_setIsConnected_;
// 100026F60: using guessed type char *selRef_setLastAuthError_;
// 100026F68: using guessed type char *selRef_setLastAuthErrorString_;
// 100026F70: using guessed type char *selRef_setLastTransmission_;
// 100026F78: using guessed type char *selRef_setUpToDate_;
// 100026F80: using guessed type char *selRef_setUutCount_;
// 100026F88: using guessed type char *selRef_setHostName_;
// 100026F90: using guessed type char *selRef_setIpAddress_;
// 100026F98: using guessed type char *selRef_setStatus_;
// 100026FA0: using guessed type char *selRef_setPort_;
// 100026FA8: using guessed type char *selRef_setTransactionLogPath_;
// 100026FB0: using guessed type char *selRef_createLogProxy_usingPort_;
// 100026FB8: using guessed type char *selRef_setLogProxy_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010000EAF3) ----------------------------------------------------
// GMServerInfo - (char)updateFromGatewayServerDict:(id) 
char __cdecl -[GMServerInfo updateFromGatewayServerDict:](struct GMServerInfo *self, SEL a2, id a3)
{
  id v3; // r15@1
  struct GMServerInfo *v4; // r13@1
  void *v5; // rax@1
  void *v6; // r14@1
  void *v7; // rax@1
  __int64 v8; // rax@1
  void *v9; // rax@1
  void *v10; // rax@1
  void *v11; // rax@1
  __int64 v12; // rax@1
  void *v13; // rax@1
  void *v14; // rax@1
  char v15; // r15@1
  void *(*v16)(void *, const char *, ...); // r15@2
  char v17; // bl@2
  char v18; // al@2
  void (*v19)(void *, const char *, ...); // rbx@3
  char v20; // al@3
  __int64 v21; // rbx@5
  void *(*v22)(void *, const char *, ...); // r14@6
  int v23; // ebx@6
  void *v24; // rax@6
  bool v25; // zf@6
  void *v26; // rax@9
  void *(*v27)(void *, const char *, ...); // r14@12
  void *v28; // rax@12
  int (__fastcall *v29)(struct GMServerInfo *, char *); // r14@15
  char v30; // al@15
  void (*v31)(void *, const char *, ...); // r14@16
  char v32; // al@16
  void *(*v33)(void *, const char *, ...); // r14@18
  int v34; // er12@18
  void (*v35)(void *, const char *, ...); // r14@19
  unsigned int v36; // eax@19
  void *v37; // rax@21
  void *(*v38)(void *, const char *, ...); // r14@24
  int v39; // ebx@24
  void (*v40)(void *, const char *, ...); // rbx@25
  unsigned int v41; // eax@25
  void (*v42)(void *, const char *, ...); // r14@26
  void *v43; // rbx@26
  void *v44; // rax@26
  struct ServerController *v45; // rdi@26
  void *(*v46)(void *, const char *, ...); // r14@29
  __int16 v47; // bx@29
  void *v48; // rax@29
  void *(*v49)(void *, const char *, ...); // r14@31
  void *v50; // rax@31
  __int64 v51; // rax@32
  void *v53; // [sp+8h] [bp-68h]@1
  void *v54; // [sp+10h] [bp-60h]@1
  void *v55; // [sp+18h] [bp-58h]@1
  void *v56; // [sp+20h] [bp-50h]@1
  void *v57; // [sp+28h] [bp-48h]@1
  void *v58; // [sp+30h] [bp-40h]@1
  __int64 v59; // [sp+38h] [bp-38h]@1
  __int64 v60; // [sp+40h] [bp-30h]@1

  v3 = a3;
  v4 = self;
  LODWORD(v5) = msgRef_objectForKey___objc_msgSend_fixup(
                  a3,
                  &msgRef_objectForKey___objc_msgSend_fixup,
                  &cfstr_Connectedtoapp);
  v6 = v5;
  LODWORD(v7) = msgRef_objectForKey___objc_msgSend_fixup(v3, &msgRef_objectForKey___objc_msgSend_fixup, &cfstr_Error);
  v53 = v7;
  LODWORD(v8) = msgRef_objectForKey___objc_msgSend_fixup(
                  v3,
                  &msgRef_objectForKey___objc_msgSend_fixup,
                  &cfstr_Errorstring);
  v59 = v8;
  LODWORD(v9) = msgRef_objectForKey___objc_msgSend_fixup(
                  v3,
                  &msgRef_objectForKey___objc_msgSend_fixup,
                  &cfstr_Lasttransmis_1);
  v54 = v9;
  LODWORD(v10) = msgRef_objectForKey___objc_msgSend_fixup(
                   v3,
                   &msgRef_objectForKey___objc_msgSend_fixup,
                   &cfstr_Serverversionu);
  v55 = v10;
  LODWORD(v11) = msgRef_objectForKey___objc_msgSend_fixup(
                   v3,
                   &msgRef_objectForKey___objc_msgSend_fixup,
                   &cfstr_Numberconnecte);
  v56 = v11;
  LODWORD(v12) = msgRef_objectForKey___objc_msgSend_fixup(
                   v3,
                   &msgRef_objectForKey___objc_msgSend_fixup,
                   &cfstr_Serverhostna_2);
  v60 = v12;
  LODWORD(v13) = msgRef_objectForKey___objc_msgSend_fixup(
                   v3,
                   &msgRef_objectForKey___objc_msgSend_fixup,
                   &cfstr_Serveronline);
  v57 = v13;
  LODWORD(v14) = msgRef_objectForKey___objc_msgSend_fixup(
                   v3,
                   &msgRef_objectForKey___objc_msgSend_fixup,
                   &cfstr_Serverport_1);
  v58 = v14;
  v15 = 0;
  if ( v6 )
  {
    v16 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v17 = (unsigned __int64)objc_msgSend_ptr(v6, selRef_boolValue);
    v18 = (unsigned __int64)v16(self, selRef_isConnected);
    v15 = 0;
    if ( v17 != v18 )
    {
      v19 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v20 = (unsigned __int64)objc_msgSend_ptr(v6, selRef_boolValue);
      v19(self, selRef_setIsConnected_, (unsigned int)v20);
      v15 = 1;
    }
  }
  if ( v53 )
  {
    v22 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v23 = (unsigned __int64)objc_msgSend_ptr(v53, selRef_intValue);
    v24 = v22(self, selRef_lastAuthError);
    v25 = v23 == (unsigned int)v22(v24, selRef_intValue);
    v21 = v59;
    if ( !v25 )
    {
      objc_msgSend_ptr(self, selRef_setLastAuthError_, v53);
      v15 = 1;
    }
  }
  else
  {
    v21 = v59;
  }
  if ( v21 )
  {
    v26 = objc_msgSend_ptr(self, selRef_lastAuthErrorString);
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v21,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v26) )
    {
      objc_msgSend_ptr(self, selRef_setLastAuthErrorString_, v21);
      v15 = 1;
    }
  }
  if ( v54 )
  {
    v27 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v28 = objc_msgSend_ptr(self, selRef_lastTransmission);
    if ( !(unsigned __int8)v27(v54, selRef_isEqualToDate_, v28) )
    {
      objc_msgSend_ptr(self, selRef_setLastTransmission_, v54);
      v15 = 1;
    }
  }
  if ( v55 )
  {
    v29 = *(int (__fastcall **)(struct GMServerInfo *, char *))objc_msgSend_ptr;
    v30 = (unsigned __int64)objc_msgSend_ptr(v55, selRef_boolValue);
    if ( v30 != (unsigned __int8)v29(self, selRef_upToDate) )
    {
      v31 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v32 = (unsigned __int64)objc_msgSend_ptr(v55, selRef_boolValue);
      v31(self, selRef_setUpToDate_, (unsigned int)v32);
      v15 = 1;
    }
  }
  if ( v56 )
  {
    v33 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v34 = (unsigned __int64)objc_msgSend_ptr(v56, selRef_intValue);
    if ( v34 != (unsigned int)v33(self, selRef_uutCount) )
    {
      v35 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v36 = (unsigned __int64)objc_msgSend_ptr(v56, selRef_intValue);
      v35(self, selRef_setUutCount_, v36);
      v15 = 1;
    }
  }
  if ( v60 )
  {
    v37 = objc_msgSend_ptr(self, selRef_hostName);
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v60,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v37) )
    {
      objc_msgSend_ptr(self, selRef_setHostName_, v60);
      v15 = 1;
    }
  }
  if ( v57 )
  {
    v38 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v39 = (unsigned __int64)objc_msgSend_ptr(v57, selRef_intValue);
    if ( v39 != (unsigned int)v38(self, selRef_status) )
    {
      v40 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v41 = (unsigned __int64)objc_msgSend_ptr(v57, selRef_intValue);
      v40(self, selRef_setStatus_, v41);
      v15 = 1;
      if ( (unsigned int)((void *(*)(void *, const char *, ...))v40)(v57, selRef_intValue) == 3 )
      {
        v42 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
        v43 = objc_msgSend_ptr(self, selRef_hostName);
        v42(self, selRef_ipAddress);
        NSLog(&cfstr_DiagnosticGa_1, v43);
        v44 = ((void *(*)(void *, const char *, ...))v42)(classRef_NSNumber, selRef_numberWithInt_, 0LL);
        v42(self, selRef_setPort_, v44);
        v15 = 1;
        v45 = self->logProxy;
        if ( v45 )
        {
          msgRef_release__objc_msgSend_fixup(v45, &msgRef_release__objc_msgSend_fixup);
          v4->logProxy = 0LL;
          v15 = 1;
        }
      }
    }
  }
  if ( v58 )
  {
    v46 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v47 = (unsigned __int64)objc_msgSend_ptr(v58, selRef_unsignedShortValue);
    v48 = v46(v4, selRef_port);
    if ( v47 != (unsigned __int16)v46(v48, selRef_unsignedShortValue)
      && (signed int)objc_msgSend_ptr(v4, selRef_status) <= 2 )
    {
      v49 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      objc_msgSend_ptr(v4, selRef_setPort_, v58);
      v50 = v49(v4, selRef_createLogProxy_usingPort_, v60, v58);
      v15 = 1;
      if ( v50 )
      {
        LODWORD(v51) = msgRef_retain__objc_msgSend_fixup(v50, &msgRef_retain__objc_msgSend_fixup);
        objc_msgSend_ptr(v4, selRef_setLogProxy_, v51);
        v15 = 1;
      }
    }
  }
  return v15;
}
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 100026450: using guessed type char *selRef_intValue;
// 100026458: using guessed type char *selRef_numberWithInt_;
// 100026590: using guessed type char *selRef_ipAddress;
// 100026670: using guessed type char *selRef_boolValue;
// 100026788: using guessed type char *selRef_hostName;
// 100026928: using guessed type char *selRef_status;
// 100026A98: using guessed type char *selRef_isConnected;
// 100026AB8: using guessed type char *selRef_upToDate;
// 100026AD0: using guessed type char *selRef_lastTransmission;
// 100026AE8: using guessed type char *selRef_uutCount;
// 100026F38: using guessed type char *selRef_lastAuthError;
// 100026F40: using guessed type char *selRef_lastAuthErrorString;
// 100026F58: using guessed type char *selRef_setIsConnected_;
// 100026F60: using guessed type char *selRef_setLastAuthError_;
// 100026F68: using guessed type char *selRef_setLastAuthErrorString_;
// 100026F70: using guessed type char *selRef_setLastTransmission_;
// 100026F78: using guessed type char *selRef_setUpToDate_;
// 100026F80: using guessed type char *selRef_setUutCount_;
// 100026F88: using guessed type char *selRef_setHostName_;
// 100026F98: using guessed type char *selRef_setStatus_;
// 100026FA0: using guessed type char *selRef_setPort_;
// 100026FB0: using guessed type char *selRef_createLogProxy_usingPort_;
// 100026FB8: using guessed type char *selRef_setLogProxy_;
// 100026FC0: using guessed type char *selRef_isEqualToDate_;
// 100026FC8: using guessed type char *selRef_unsignedShortValue;
// 100026FD0: using guessed type char *selRef_port;
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 1000273D8: using guessed type void *classRef_NSNumber;
// 1000298E8: using guessed type __CFString cfstr_DiagnosticGa_1;

//----- (000000010000EFE2) ----------------------------------------------------
// GMServerInfo - (char)updateFromServerStatusDict:(id) 
char __cdecl -[GMServerInfo updateFromServerStatusDict:](struct GMServerInfo *self, SEL a2, id a3)
{
  id v3; // rbx@1
  void *v4; // rax@1
  void *v5; // r12@1
  void *v6; // rax@1
  void *v7; // r14@1
  __int64 v8; // rax@1
  void *v9; // rax@1
  void *v10; // rax@1
  void *v11; // rax@1
  __int64 v12; // rax@1
  __int64 v13; // rax@1
  __int64 v14; // rax@1
  __int64 v15; // rbx@1
  __int64 v16; // r13@1
  __int64 v17; // rax@2
  __int64 v18; // rax@2
  _QWORD *v19; // rax@2
  char v20; // r15@3
  struct GMServerInfo *v21; // r13@3
  void *(*v22)(void *, const char *, ...); // r15@4
  char v23; // bl@4
  char v24; // al@4
  void (*v25)(void *, const char *, ...); // rbx@5
  char v26; // al@5
  char v27; // r12@7
  void *(*v28)(void *, const char *, ...); // r15@7
  int v29; // ebx@7
  void *v30; // rax@7
  int v31; // eax@7
  void *v32; // rax@10
  void *(*v33)(void *, const char *, ...); // r14@13
  void *v34; // rax@13
  int (__fastcall *v35)(struct GMServerInfo *, char *); // r14@16
  int v36; // eax@16
  void (*v37)(void *, const char *, ...); // r14@17
  unsigned int v38; // eax@17
  void *(*v39)(void *, const char *, ...); // r14@19
  int v40; // er12@19
  void (*v41)(void *, const char *, ...); // r14@20
  unsigned int v42; // eax@20
  void *v43; // rax@22
  void *(*v44)(void *, const char *, ...); // r14@25
  void *v45; // rax@25
  void *v46; // rbx@25
  void *v47; // rax@25
  void *(*v48)(void *, const char *, ...); // r14@26
  void *v49; // rax@26
  void *v50; // rax@26
  void *v51; // rax@27
  void *(*v52)(void *, const char *, ...); // rbx@28
  void *v53; // rax@28
  void *v54; // rax@28
  void *v55; // rax@30
  const char *v56; // rsi@32
  _QWORD *v57; // rdx@32
  __int64 v58; // rax@33
  void *v59; // r14@37
  __int64 v60; // rax@37
  unsigned __int64 v61; // r12@38
  __int64 v62; // rax@39
  __int64 v63; // r13@39
  void *v64; // rax@40
  void *v65; // rax@40
  __int64 v66; // rax@40
  unsigned __int64 v67; // rax@42
  __int64 v68; // rax@43
  void (*v69)(void *, const char *, ...); // rbx@44
  void *v70; // rax@44
  void (*v71)(void *, const char *, ...); // rbx@47
  __int64 v73; // [sp+8h] [bp-78h]@1
  void *v74; // [sp+10h] [bp-70h]@1
  void *v75; // [sp+18h] [bp-68h]@1
  void *v76; // [sp+20h] [bp-60h]@1
  __int64 v77; // [sp+28h] [bp-58h]@1
  __int64 v78; // [sp+30h] [bp-50h]@3
  __int64 v79; // [sp+38h] [bp-48h]@1
  __int64 v80; // [sp+40h] [bp-40h]@1
  _QWORD *v81; // [sp+48h] [bp-38h]@1

  v3 = a3;
  LODWORD(v4) = msgRef_objectForKey___objc_msgSend_fixup(
                  a3,
                  &msgRef_objectForKey___objc_msgSend_fixup,
                  &cfstr_Connectedtoapp);
  v5 = v4;
  LODWORD(v6) = msgRef_objectForKey___objc_msgSend_fixup(v3, &msgRef_objectForKey___objc_msgSend_fixup, &cfstr_Error);
  v7 = v6;
  LODWORD(v8) = msgRef_objectForKey___objc_msgSend_fixup(
                  v3,
                  &msgRef_objectForKey___objc_msgSend_fixup,
                  &cfstr_Errorstring);
  v73 = v8;
  LODWORD(v9) = msgRef_objectForKey___objc_msgSend_fixup(
                  v3,
                  &msgRef_objectForKey___objc_msgSend_fixup,
                  &cfstr_Lasttransmis_1);
  v74 = v9;
  LODWORD(v10) = msgRef_objectForKey___objc_msgSend_fixup(
                   v3,
                   &msgRef_objectForKey___objc_msgSend_fixup,
                   &cfstr_Numberconnecte);
  v75 = v10;
  LODWORD(v11) = msgRef_objectForKey___objc_msgSend_fixup(
                   v3,
                   &msgRef_objectForKey___objc_msgSend_fixup,
                   &cfstr_Serveronline);
  v76 = v11;
  LODWORD(v12) = msgRef_objectForKey___objc_msgSend_fixup(
                   v3,
                   &msgRef_objectForKey___objc_msgSend_fixup,
                   &cfstr_Serviceversi_1);
  v77 = v12;
  LODWORD(v13) = msgRef_objectForKey___objc_msgSend_fixup(
                   v3,
                   &msgRef_objectForKey___objc_msgSend_fixup,
                   &cfstr_Diagnostics);
  v79 = v13;
  LODWORD(v14) = msgRef_objectForKey___objc_msgSend_fixup(
                   v3,
                   &msgRef_objectForKey___objc_msgSend_fixup,
                   &cfstr_Interfaces);
  v15 = v14;
  v16 = 0LL;
  v80 = 0LL;
  v81 = 0LL;
  if ( v14 )
  {
    LODWORD(v17) = msgRef_objectForKey___objc_msgSend_fixup(
                     v14,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Interfacelist);
    v16 = v17;
    LODWORD(v18) = msgRef_objectForKey___objc_msgSend_fixup(
                     v15,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Currentinterfa);
    v80 = v18;
    LODWORD(v19) = msgRef_objectForKey___objc_msgSend_fixup(
                     v15,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Pendinginter_1);
    v81 = v19;
  }
  v78 = v16;
  v20 = 0;
  v21 = self;
  if ( v5 )
  {
    v22 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v23 = (unsigned __int64)objc_msgSend_ptr(v5, selRef_boolValue);
    v24 = (unsigned __int64)v22(self, selRef_isConnected);
    v20 = 0;
    if ( v23 != v24 )
    {
      v25 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v26 = (unsigned __int64)objc_msgSend_ptr(v5, selRef_boolValue);
      v25(self, selRef_setIsConnected_, (unsigned int)v26);
      v20 = 1;
    }
  }
  if ( v7 )
  {
    v27 = v20;
    v28 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v29 = (unsigned __int64)objc_msgSend_ptr(v7, selRef_intValue);
    v30 = v28(self, selRef_lastAuthError);
    v31 = (unsigned __int64)v28(v30, selRef_intValue);
    v20 = v27;
    if ( v29 != v31 )
    {
      objc_msgSend_ptr(self, selRef_setLastAuthError_, v7);
      v20 = 1;
    }
  }
  if ( v73 )
  {
    v32 = objc_msgSend_ptr(self, selRef_lastAuthErrorString);
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v73,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v32) )
    {
      objc_msgSend_ptr(self, selRef_setLastAuthErrorString_, v73);
      v20 = 1;
    }
  }
  if ( v74 )
  {
    v33 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v34 = objc_msgSend_ptr(self, selRef_lastTransmission);
    if ( !(unsigned __int8)v33(v74, selRef_isEqualToDate_, v34) )
    {
      objc_msgSend_ptr(self, selRef_setLastTransmission_, v74);
      v20 = 1;
    }
  }
  if ( v75 )
  {
    v35 = *(int (__fastcall **)(struct GMServerInfo *, char *))objc_msgSend_ptr;
    v36 = (unsigned __int64)objc_msgSend_ptr(v75, selRef_intValue);
    if ( v36 != v35(self, selRef_uutCount) )
    {
      v37 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v38 = (unsigned __int64)objc_msgSend_ptr(v75, selRef_intValue);
      v37(self, selRef_setUutCount_, v38);
      v20 = 1;
    }
  }
  if ( v76 )
  {
    v39 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v40 = (unsigned __int64)objc_msgSend_ptr(v76, selRef_intValue);
    if ( v40 != (unsigned int)v39(self, selRef_status) )
    {
      v41 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v42 = (unsigned __int64)objc_msgSend_ptr(v76, selRef_intValue);
      v41(self, selRef_setStatus_, v42);
      v20 = 1;
    }
  }
  if ( v77 )
  {
    v43 = objc_msgSend_ptr(self, selRef_serviceVersion);
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v77,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v43) )
    {
      objc_msgSend_ptr(self, selRef_setServiceVersion_, v77);
      v20 = 1;
    }
  }
  if ( v80 )
  {
    v44 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v45 = objc_msgSend_ptr(self, selRef_ipAddress);
    v46 = v44(classRef_NSString, selRef_stringWithFormat_, &cfstr____0, v80, v45);
    v47 = v44(self, selRef_networkInterface);
    if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                            v46,
                            &msgRef_isEqualToString___objc_msgSend_fixup,
                            v47) )
      goto LABEL_30;
    v48 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v49 = objc_msgSend_ptr(self, selRef_ipAddress);
    v50 = v48(classRef_NSString, selRef_stringWithFormat_, &cfstr____0, v80, v49);
    v48(self, selRef_setNetworkInterface_, v50);
  }
  else
  {
    v51 = objc_msgSend_ptr(self, selRef_networkInterface);
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v51,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             &cfstr_Searching___) )
      goto LABEL_30;
    v52 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v53 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
    v54 = v52(v53, selRef_localizedStringForKey_value_table_, &cfstr_Knotavailables, &stru_100028108, 0LL);
    v52(self, selRef_setNetworkInterface_, v54);
  }
  v20 = 1;
LABEL_30:
  v55 = objc_msgSend_ptr(self, selRef_pendingInterface);
  if ( v81 )
  {
    if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                            v81,
                            &msgRef_isEqualToString___objc_msgSend_fixup,
                            v55) )
      goto LABEL_36;
    v56 = selRef_setPendingInterface_;
    v57 = v81;
  }
  else
  {
    LODWORD(v58) = msgRef_length__objc_msgSend_fixup(v55, &msgRef_length__objc_msgSend_fixup);
    if ( !v58 )
      goto LABEL_36;
    v56 = selRef_setPendingInterface_;
    v57 = &stru_100028108;
  }
  objc_msgSend_ptr(self, v56, v57);
  v20 = 1;
LABEL_36:
  if ( v78 )
  {
    v59 = objc_msgSend_ptr(classRef_NSMutableArray, selRef_arrayWithCapacity_, 1LL);
    LODWORD(v60) = msgRef_count__objc_msgSend_fixup(v78, &msgRef_count__objc_msgSend_fixup);
    if ( v60 )
    {
      v61 = 0LL;
      do
      {
        LODWORD(v62) = msgRef_objectAtIndex___objc_msgSend_fixup(v78, &msgRef_objectAtIndex___objc_msgSend_fixup, v61);
        v63 = v62;
        if ( v62 )
        {
          LODWORD(v64) = msgRef_alloc__objc_msgSend_fixup(classRef_GMServerInterface, &msgRef_alloc__objc_msgSend_fixup);
          v65 = objc_msgSend_ptr(v64, selRef_initWithInterfaceDict_, v63);
          LODWORD(v66) = msgRef_autorelease__objc_msgSend_fixup(v65, &msgRef_autorelease__objc_msgSend_fixup);
          if ( v66 )
            objc_msgSend_ptr(v59, selRef_addObject_, v66);
        }
        LODWORD(v67) = msgRef_count__objc_msgSend_fixup(v78, &msgRef_count__objc_msgSend_fixup);
        ++v61;
      }
      while ( v61 < v67 );
    }
    LODWORD(v68) = msgRef_count__objc_msgSend_fixup(v59, &msgRef_count__objc_msgSend_fixup);
    v21 = self;
    if ( v68 )
    {
      v69 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v70 = objc_msgSend_ptr(classRef_NSArray, selRef_arrayWithArray_, v59);
      v69(self, selRef_setNetworkInterfaceList_, v70);
    }
  }
  if ( v79 && !v21->haveApplist )
  {
    v71 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    objc_msgSend_ptr(v21, selRef_setAppList_);
    v71(v21, selRef_setHaveApplist_, 1LL);
    v20 = 1;
  }
  return v20;
}
// 1000262C0: using guessed type char *selRef_arrayWithCapacity_;
// 1000262D0: using guessed type char *selRef_addObject_;
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 1000263A8: using guessed type char *selRef_stringWithFormat_;
// 100026450: using guessed type char *selRef_intValue;
// 100026590: using guessed type char *selRef_ipAddress;
// 100026670: using guessed type char *selRef_boolValue;
// 100026728: using guessed type char *selRef_arrayWithArray_;
// 100026928: using guessed type char *selRef_status;
// 100026930: using guessed type char *selRef_pendingInterface;
// 100026940: using guessed type char *selRef_networkInterface;
// 100026A98: using guessed type char *selRef_isConnected;
// 100026AA0: using guessed type char *selRef_serviceVersion;
// 100026AD0: using guessed type char *selRef_lastTransmission;
// 100026AE8: using guessed type char *selRef_uutCount;
// 100026F38: using guessed type char *selRef_lastAuthError;
// 100026F40: using guessed type char *selRef_lastAuthErrorString;
// 100026F58: using guessed type char *selRef_setIsConnected_;
// 100026F60: using guessed type char *selRef_setLastAuthError_;
// 100026F68: using guessed type char *selRef_setLastAuthErrorString_;
// 100026F70: using guessed type char *selRef_setLastTransmission_;
// 100026F80: using guessed type char *selRef_setUutCount_;
// 100026F98: using guessed type char *selRef_setStatus_;
// 100026FC0: using guessed type char *selRef_isEqualToDate_;
// 100026FD8: using guessed type char *selRef_setServiceVersion_;
// 100026FE0: using guessed type char *selRef_setNetworkInterface_;
// 100026FE8: using guessed type char *selRef_setPendingInterface_;
// 100026FF0: using guessed type char *selRef_initWithInterfaceDict_;
// 100026FF8: using guessed type char *selRef_setNetworkInterfaceList_;
// 100027000: using guessed type char *selRef_setAppList_;
// 100027008: using guessed type char *selRef_setHaveApplist_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272C0: using guessed type int (__fastcall *msgRef_autorelease__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027390: using guessed type void *classRef_NSMutableArray;
// 1000273B0: using guessed type void *classRef_NSBundle;
// 1000273C0: using guessed type void *classRef_NSString;
// 100027410: using guessed type void *classRef_NSArray;
// 100028EA8: using guessed type __CFString cfstr_Knotavailables;
// 1000299C8: using guessed type __CFString cfstr____0;

//----- (000000010000F66B) ----------------------------------------------------
// GMServerInfo - (id)createLogProxy:(id) usingPort:(id) 
id __cdecl -[GMServerInfo createLogProxy:usingPort:](struct GMServerInfo *self, SEL a2, id a3, id a4)
{
  __int64 v4; // rax@0
  id v5; // r12@1
  id v6; // r15@1
  void *(*v7)(void *, const char *, ...); // r14@1
  void *v8; // rax@1
  void *v9; // rax@1
  char v10; // r13@1
  void *v11; // rax@1
  void *v12; // rbx@1
  unsigned __int16 v13; // ax@1
  struct objc_object *v14; // r12@1
  id v15; // r13@1
  void *v16; // rax@1
  void *v17; // r15@1
  void *v18; // rax@2
  void *(*v19)(void *, const char *, ...); // r14@2
  void *v20; // rax@2
  void *v21; // rax@2
  void *v22; // rbx@2
  void (*v23)(void *, const char *, ...); // r14@3
  void (*v24)(void *, const char *, ...); // r14@4
  void *v25; // rax@4

  v5 = a4;
  v6 = a3;
  v7 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v8 = objc_msgSend_ptr(classRef_NSHost, selRef_currentHost, v4);
  v9 = v7(v8, selRef_name);
  v10 = msgRef_isEqualToString___objc_msgSend_fixup(v6, &msgRef_isEqualToString___objc_msgSend_fixup, v9);
  LODWORD(v11) = msgRef_alloc__objc_msgSend_fixup(classRef_NSSocketPort, &msgRef_alloc__objc_msgSend_fixup);
  v12 = v11;
  v13 = (unsigned __int64)v7(v5, selRef_unsignedShortValue);
  v14 = 0LL;
  v15 = v6;
  v16 = v7(v12, selRef_initRemoteWithTCPPort_host_, v13);
  v17 = v16;
  if ( !v16 )
  {
    NSLog(&cfstr_CanTGetASocket, selRef_initRemoteWithTCPPort_host_);
    return v14;
  }
  LODWORD(v18) = msgRef_class__objc_msgSend_fixup(v16, &msgRef_class__objc_msgSend_fixup);
  v19 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v20 = objc_msgSend_ptr(v18, selRef_port);
  v21 = v19(classRef_NSConnection, selRef_connectionWithReceivePort_sendPort_, v20, v17);
  v22 = v21;
  if ( !v21 )
  {
    NSLog(&cfstr_CanTGetAConnec, selRef_connectionWithReceivePort_sendPort_);
    goto LABEL_7;
  }
  v23 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  objc_msgSend_ptr(v21, selRef_setReplyTimeout_, COERCE_DOUBLE(4617315517961601024LL));
  v23(v22, selRef_setRequestTimeout_, COERCE_DOUBLE(4617315517961601024LL));
  v14 = (struct objc_object *)((void *(*)(void *, const char *, ...))v23)(v22, selRef_rootProxy);
  if ( !v14 )
  {
    NSLog(&cfstr_CanTGetAProxyF, v15);
LABEL_7:
    v14 = 0LL;
    goto LABEL_8;
  }
  v24 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  v25 = objc_msgSend_ptr(v22, selRef_rootProxy);
  v24(v25, selRef_setProtocolForProxy_, protocolRef_ServerController);
LABEL_8:
  msgRef_release__objc_msgSend_fixup(v17, &msgRef_release__objc_msgSend_fixup);
  return v14;
}
// 100015ECC: using guessed type int __fastcall NSLog(_QWORD, _QWORD);
// 100026780: using guessed type char *selRef_name;
// 100026FC8: using guessed type char *selRef_unsignedShortValue;
// 100026FD0: using guessed type char *selRef_port;
// 100027010: using guessed type char *selRef_currentHost;
// 100027018: using guessed type char *selRef_initRemoteWithTCPPort_host_;
// 100027020: using guessed type char *selRef_connectionWithReceivePort_sendPort_;
// 100027028: using guessed type char *selRef_setReplyTimeout_;
// 100027030: using guessed type char *selRef_setRequestTimeout_;
// 100027038: using guessed type char *selRef_rootProxy;
// 100027040: using guessed type char *selRef_setProtocolForProxy_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027330: using guessed type int (__fastcall *msgRef_class__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027370: using guessed type __objc2_prot *protocolRef_ServerController;
// 1000274E0: using guessed type void *classRef_NSHost;
// 1000274F0: using guessed type void *classRef_NSConnection;
// 1000299E8: using guessed type __CFString cfstr_CanTGetAProxyF;
// 100029A08: using guessed type __CFString cfstr_CanTGetAConnec;
// 100029A28: using guessed type __CFString cfstr_CanTGetASocket;

//----- (000000010000F833) ----------------------------------------------------
// GMServerInfo - (void)dealloc
void __cdecl -[GMServerInfo dealloc](struct GMServerInfo *self, SEL a2)
{
  struct GMServerInfo *v2; // rbx@1
  struct ServerController *v3; // rdi@1
  struct GMServerInfo *v4; // [sp+0h] [bp-20h]@3
  void *v5; // [sp+8h] [bp-18h]@3

  v2 = self;
  msgRef_release__objc_msgSend_fixup(self->ipAddress, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->hostName, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->serviceIdentifier, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->serviceName, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->serviceVersion, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->lastAuthError, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->lastAuthErrorString, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->activityLogPath, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->activityLogContents, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->transactionLogPath, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->transactionLogContents, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->lastTransmission, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->networkInterface, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->pendingInterface, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->networkInterfaceList, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->port, &msgRef_release__objc_msgSend_fixup);
  v3 = self->logProxy;
  if ( v3 )
    msgRef_release__objc_msgSend_fixup(v3, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(v2->diagAppList, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(v2->uutList, &msgRef_release__objc_msgSend_fixup);
  v4 = v2;
  v5 = classRef_GMServerInfo_0;
  objc_msgSendSuper2(&v4, selRef_dealloc, v2, classRef_GMServerInfo_0);
}
// 1000262D8: using guessed type char *selRef_dealloc;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027558: using guessed type void *classRef_GMServerInfo_0;

//----- (000000010000F9FC) ----------------------------------------------------
// GMServerInfo - (char)isConnected
char __cdecl -[GMServerInfo isConnected](struct GMServerInfo *self, SEL a2)
{
  return self->isConnected;
}

//----- (000000010000FA0D) ----------------------------------------------------
// GMServerInfo - (void)setIsConnected:(char) 
void __cdecl -[GMServerInfo setIsConnected:](struct GMServerInfo *self, SEL a2, char a3)
{
  self->isConnected = a3;
}

//----- (000000010000FA1D) ----------------------------------------------------
// GMServerInfo - (char)upToDate
char __cdecl -[GMServerInfo upToDate](struct GMServerInfo *self, SEL a2)
{
  return self->upToDate;
}

//----- (000000010000FA2E) ----------------------------------------------------
// GMServerInfo - (void)setUpToDate:(char) 
void __cdecl -[GMServerInfo setUpToDate:](struct GMServerInfo *self, SEL a2, char a3)
{
  self->upToDate = a3;
}

//----- (000000010000FA3E) ----------------------------------------------------
// GMServerInfo - (char)haveApplist
char __cdecl -[GMServerInfo haveApplist](struct GMServerInfo *self, SEL a2)
{
  return self->haveApplist;
}

//----- (000000010000FA4F) ----------------------------------------------------
// GMServerInfo - (void)setHaveApplist:(char) 
void __cdecl -[GMServerInfo setHaveApplist:](struct GMServerInfo *self, SEL a2, char a3)
{
  self->haveApplist = a3;
}

//----- (000000010000FA5F) ----------------------------------------------------
// GMServerInfo - (int)status
int __cdecl -[GMServerInfo status](struct GMServerInfo *self, SEL a2)
{
  return self->status;
}

//----- (000000010000FA6F) ----------------------------------------------------
// GMServerInfo - (void)setStatus:(int) 
void __cdecl -[GMServerInfo setStatus:](struct GMServerInfo *self, SEL a2, int a3)
{
  self->status = a3;
}

//----- (000000010000FA7F) ----------------------------------------------------
// GMServerInfo - (int)uutCount
int __cdecl -[GMServerInfo uutCount](struct GMServerInfo *self, SEL a2)
{
  return self->uutCount;
}

//----- (000000010000FA8F) ----------------------------------------------------
// GMServerInfo - (void)setUutCount:(int) 
void __cdecl -[GMServerInfo setUutCount:](struct GMServerInfo *self, SEL a2, int a3)
{
  self->uutCount = a3;
}

//----- (000000010000FA9F) ----------------------------------------------------
// GMServerInfo - (id)ipAddress
id __cdecl -[GMServerInfo ipAddress](struct GMServerInfo *self, SEL a2)
{
  return (id)self->ipAddress;
}

//----- (000000010000FAB0) ----------------------------------------------------
// GMServerInfo - (void)setIpAddress:(id) 
void __cdecl -[GMServerInfo setIpAddress:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->ipAddress, &msgRef_release__objc_msgSend_fixup);
  self->ipAddress = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000FAF5) ----------------------------------------------------
// GMServerInfo - (id)hostName
id __cdecl -[GMServerInfo hostName](struct GMServerInfo *self, SEL a2)
{
  return (id)self->hostName;
}

//----- (000000010000FB06) ----------------------------------------------------
// GMServerInfo - (void)setHostName:(id) 
void __cdecl -[GMServerInfo setHostName:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->hostName, &msgRef_release__objc_msgSend_fixup);
  self->hostName = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000FB4B) ----------------------------------------------------
// GMServerInfo - (id)serviceIdentifier
id __cdecl -[GMServerInfo serviceIdentifier](struct GMServerInfo *self, SEL a2)
{
  return (id)self->serviceIdentifier;
}

//----- (000000010000FB5C) ----------------------------------------------------
// GMServerInfo - (void)setServiceIdentifier:(id) 
void __cdecl -[GMServerInfo setServiceIdentifier:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->serviceIdentifier, &msgRef_release__objc_msgSend_fixup);
  self->serviceIdentifier = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000FBA1) ----------------------------------------------------
// GMServerInfo - (id)serviceName
id __cdecl -[GMServerInfo serviceName](struct GMServerInfo *self, SEL a2)
{
  return (id)self->serviceName;
}

//----- (000000010000FBB2) ----------------------------------------------------
// GMServerInfo - (void)setServiceName:(id) 
void __cdecl -[GMServerInfo setServiceName:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->serviceName, &msgRef_release__objc_msgSend_fixup);
  self->serviceName = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000FBF7) ----------------------------------------------------
// GMServerInfo - (id)serviceVersion
id __cdecl -[GMServerInfo serviceVersion](struct GMServerInfo *self, SEL a2)
{
  return (id)self->serviceVersion;
}

//----- (000000010000FC08) ----------------------------------------------------
// GMServerInfo - (void)setServiceVersion:(id) 
void __cdecl -[GMServerInfo setServiceVersion:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->serviceVersion, &msgRef_release__objc_msgSend_fixup);
  self->serviceVersion = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000FC4D) ----------------------------------------------------
// GMServerInfo - (id)lastAuthError
id __cdecl -[GMServerInfo lastAuthError](struct GMServerInfo *self, SEL a2)
{
  return (id)self->lastAuthError;
}

//----- (000000010000FC5E) ----------------------------------------------------
// GMServerInfo - (void)setLastAuthError:(id) 
void __cdecl -[GMServerInfo setLastAuthError:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSNumber *v3; // r14@1

  v3 = (struct NSNumber *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->lastAuthError, &msgRef_release__objc_msgSend_fixup);
  self->lastAuthError = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000FCA3) ----------------------------------------------------
// GMServerInfo - (id)lastAuthErrorString
id __cdecl -[GMServerInfo lastAuthErrorString](struct GMServerInfo *self, SEL a2)
{
  return (id)self->lastAuthErrorString;
}

//----- (000000010000FCB4) ----------------------------------------------------
// GMServerInfo - (void)setLastAuthErrorString:(id) 
void __cdecl -[GMServerInfo setLastAuthErrorString:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->lastAuthErrorString, &msgRef_release__objc_msgSend_fixup);
  self->lastAuthErrorString = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000FCF9) ----------------------------------------------------
// GMServerInfo - (id)activityLogPath
id __cdecl -[GMServerInfo activityLogPath](struct GMServerInfo *self, SEL a2)
{
  return (id)self->activityLogPath;
}

//----- (000000010000FD0A) ----------------------------------------------------
// GMServerInfo - (void)setActivityLogPath:(id) 
void __cdecl -[GMServerInfo setActivityLogPath:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->activityLogPath, &msgRef_release__objc_msgSend_fixup);
  self->activityLogPath = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000FD4F) ----------------------------------------------------
// GMServerInfo - (id)activityLogContents
id __cdecl -[GMServerInfo activityLogContents](struct GMServerInfo *self, SEL a2)
{
  return (id)self->activityLogContents;
}

//----- (000000010000FD60) ----------------------------------------------------
// GMServerInfo - (void)setActivityLogContents:(id) 
void __cdecl -[GMServerInfo setActivityLogContents:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->activityLogContents, &msgRef_release__objc_msgSend_fixup);
  self->activityLogContents = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000FDA5) ----------------------------------------------------
// GMServerInfo - (id)transactionLogPath
id __cdecl -[GMServerInfo transactionLogPath](struct GMServerInfo *self, SEL a2)
{
  return (id)self->transactionLogPath;
}

//----- (000000010000FDB6) ----------------------------------------------------
// GMServerInfo - (void)setTransactionLogPath:(id) 
void __cdecl -[GMServerInfo setTransactionLogPath:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->transactionLogPath, &msgRef_release__objc_msgSend_fixup);
  self->transactionLogPath = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000FDFB) ----------------------------------------------------
// GMServerInfo - (id)transactionLogContents
id __cdecl -[GMServerInfo transactionLogContents](struct GMServerInfo *self, SEL a2)
{
  return (id)self->transactionLogContents;
}

//----- (000000010000FE0C) ----------------------------------------------------
// GMServerInfo - (void)setTransactionLogContents:(id) 
void __cdecl -[GMServerInfo setTransactionLogContents:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->transactionLogContents, &msgRef_release__objc_msgSend_fixup);
  self->transactionLogContents = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000FE51) ----------------------------------------------------
// GMServerInfo - (id)lastTransmission
id __cdecl -[GMServerInfo lastTransmission](struct GMServerInfo *self, SEL a2)
{
  return (id)self->lastTransmission;
}

//----- (000000010000FE62) ----------------------------------------------------
// GMServerInfo - (void)setLastTransmission:(id) 
void __cdecl -[GMServerInfo setLastTransmission:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSDate *v3; // r14@1

  v3 = (struct NSDate *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->lastTransmission, &msgRef_release__objc_msgSend_fixup);
  self->lastTransmission = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000FEA7) ----------------------------------------------------
// GMServerInfo - (id)networkInterface
id __cdecl -[GMServerInfo networkInterface](struct GMServerInfo *self, SEL a2)
{
  return (id)self->networkInterface;
}

//----- (000000010000FEB8) ----------------------------------------------------
// GMServerInfo - (void)setNetworkInterface:(id) 
void __cdecl -[GMServerInfo setNetworkInterface:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->networkInterface, &msgRef_release__objc_msgSend_fixup);
  self->networkInterface = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000FEFD) ----------------------------------------------------
// GMServerInfo - (id)pendingInterface
id __cdecl -[GMServerInfo pendingInterface](struct GMServerInfo *self, SEL a2)
{
  return (id)self->pendingInterface;
}

//----- (000000010000FF0E) ----------------------------------------------------
// GMServerInfo - (void)setPendingInterface:(id) 
void __cdecl -[GMServerInfo setPendingInterface:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->pendingInterface, &msgRef_release__objc_msgSend_fixup);
  self->pendingInterface = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000FF53) ----------------------------------------------------
// GMServerInfo - (id)networkInterfaceList
id __cdecl -[GMServerInfo networkInterfaceList](struct GMServerInfo *self, SEL a2)
{
  return (id)self->networkInterfaceList;
}

//----- (000000010000FF64) ----------------------------------------------------
// GMServerInfo - (void)setNetworkInterfaceList:(id) 
void __cdecl -[GMServerInfo setNetworkInterfaceList:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSArray *v3; // r14@1

  v3 = (struct NSArray *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->networkInterfaceList, &msgRef_release__objc_msgSend_fixup);
  self->networkInterfaceList = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000FFA9) ----------------------------------------------------
// GMServerInfo - (id)port
id __cdecl -[GMServerInfo port](struct GMServerInfo *self, SEL a2)
{
  return (id)self->port;
}

//----- (000000010000FFBA) ----------------------------------------------------
// GMServerInfo - (void)setPort:(id) 
void __cdecl -[GMServerInfo setPort:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSNumber *v3; // r14@1

  v3 = (struct NSNumber *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->port, &msgRef_release__objc_msgSend_fixup);
  self->port = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010000FFFF) ----------------------------------------------------
// GMServerInfo - (id)logProxy
id __cdecl -[GMServerInfo logProxy](struct GMServerInfo *self, SEL a2)
{
  return (id)self->logProxy;
}

//----- (0000000100010010) ----------------------------------------------------
// GMServerInfo - (void)setLogProxy:(id) 
void __cdecl -[GMServerInfo setLogProxy:](struct GMServerInfo *self, SEL a2, id a3)
{
  id v3; // r14@1
  struct GMServerInfo *v4; // rbx@1
  struct ServerController *v5; // rdi@1

  v3 = a3;
  v4 = self;
  v5 = self->logProxy;
  if ( v5 )
    msgRef_release__objc_msgSend_fixup(v5, &msgRef_release__objc_msgSend_fixup);
  v4->logProxy = (struct ServerController *)v3;
}
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010001004A) ----------------------------------------------------
// GMServerInfo - (id)diagAppList
id __cdecl -[GMServerInfo diagAppList](struct GMServerInfo *self, SEL a2)
{
  return (id)self->diagAppList;
}

//----- (000000010001005B) ----------------------------------------------------
// GMServerInfo - (void)setAppList:(id) 
void __cdecl -[GMServerInfo setAppList:](struct GMServerInfo *self, SEL a2, id a3)
{
  struct NSArray *v3; // r14@1

  v3 = (struct NSArray *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->diagAppList, &msgRef_release__objc_msgSend_fixup);
  self->diagAppList = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (00000001000100A0) ----------------------------------------------------
// GMServerInfo - (id)uutList
id __cdecl -[GMServerInfo uutList](struct GMServerInfo *self, SEL a2)
{
  return (id)self->uutList;
}

//----- (00000001000100B1) ----------------------------------------------------
// GMServerInfo - (id)statusString
id __cdecl -[GMServerInfo statusString](struct GMServerInfo *self, SEL a2)
{
  void *v2; // rax@2
  __CFString *v3; // rdx@2

  switch ( (unsigned __int64)self->status )
  {
    case 0uLL:
      v2 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v3 = &cfstr_Kserverstatusc;
      break;
    case 1uLL:
      v2 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v3 = &cfstr_Kserverstatusd;
      break;
    case 2uLL:
      v2 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v3 = &cfstr_Kserverstatuso;
      break;
    default:
      v2 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v3 = &cfstr_Kserverstatu_1;
      break;
  }
  return (id)objc_msgSend_ptr(v2, selRef_localizedStringForKey_value_table_, v3, &stru_100028108, 0LL);
}
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 1000273B0: using guessed type void *classRef_NSBundle;
// 100029A48: using guessed type __CFString cfstr_Kserverstatusc;
// 100029A68: using guessed type __CFString cfstr_Kserverstatusd;
// 100029A88: using guessed type __CFString cfstr_Kserverstatuso;
// 100029AA8: using guessed type __CFString cfstr_Kserverstatu_1;

//----- (000000010001017C) ----------------------------------------------------
// GMServerInfo - (uint64_t)activityLogIndex
uint64_t __cdecl -[GMServerInfo activityLogIndex](struct GMServerInfo *self, SEL a2)
{
  uint64_t result; // rax@1

  LODWORD(result) = msgRef_length__objc_msgSend_fixup(self->activityLogContents, &msgRef_length__objc_msgSend_fixup);
  return result;
}
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010001019C) ----------------------------------------------------
// GMServerInfo - (uint64_t)transactionLogIndex
uint64_t __cdecl -[GMServerInfo transactionLogIndex](struct GMServerInfo *self, SEL a2)
{
  uint64_t result; // rax@1

  LODWORD(result) = msgRef_length__objc_msgSend_fixup(self->transactionLogContents, &msgRef_length__objc_msgSend_fixup);
  return result;
}
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (00000001000101BC) ----------------------------------------------------
// GMServerInfo - (int64_t)numberOfApps
int64_t __cdecl -[GMServerInfo numberOfApps](struct GMServerInfo *self, SEL a2)
{
  int64_t result; // rax@1

  LODWORD(result) = msgRef_count__objc_msgSend_fixup(self->diagAppList, &msgRef_count__objc_msgSend_fixup);
  return result;
}
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (00000001000101DC) ----------------------------------------------------
// GMServerInfo - (int64_t)numberOfInterfaces
int64_t __cdecl -[GMServerInfo numberOfInterfaces](struct GMServerInfo *self, SEL a2)
{
  int64_t result; // rax@1

  LODWORD(result) = msgRef_count__objc_msgSend_fixup(self->networkInterfaceList, &msgRef_count__objc_msgSend_fixup);
  return result;
}
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (00000001000101FC) ----------------------------------------------------
// GMServerInfo - (int64_t)numberOfUUTs
int64_t __cdecl -[GMServerInfo numberOfUUTs](struct GMServerInfo *self, SEL a2)
{
  int64_t result; // rax@1

  LODWORD(result) = msgRef_count__objc_msgSend_fixup(self->uutList, &msgRef_count__objc_msgSend_fixup);
  return result;
}
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010001021C) ----------------------------------------------------
// GMServerInfo - (id)uutAtIndex:(int64_t) 
id __cdecl -[GMServerInfo uutAtIndex:](struct GMServerInfo *self, SEL a2, int64_t a3)
{
  id result; // rax@1

  LODWORD(result) = msgRef_objectAtIndex___objc_msgSend_fixup(
                      self->uutList,
                      &msgRef_objectAtIndex___objc_msgSend_fixup,
                      a3);
  return result;
}
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010001023C) ----------------------------------------------------
// GMServerInfo - (void)addUUT:(id) 
void __cdecl -[GMServerInfo addUUT:](struct GMServerInfo *self, SEL a2, id a3)
{
  objc_msgSend_ptr((void *)self->uutList, selRef_addObject_, a3);
}
// 1000262D0: using guessed type char *selRef_addObject_;

//----- (0000000100010259) ----------------------------------------------------
// GMServerInfo - (id)interfaceLabelList
id __cdecl -[GMServerInfo interfaceLabelList](struct GMServerInfo *self, SEL a2)
{
  __int64 v2; // rax@0
  struct GMServerInfo *v3; // r15@1
  void *v4; // r14@1
  struct NSArray *v5; // rdi@1
  __int64 v6; // rax@2
  unsigned __int64 v7; // rbx@3
  void *(*v8)(void *, const char *, ...); // r12@3
  void *v9; // rax@4
  void *v10; // rax@4
  unsigned __int64 v11; // rax@4
  __int64 v12; // rax@5
  __int64 v13; // rcx@5
  id result; // rax@5

  v3 = self;
  v4 = objc_msgSend_ptr(classRef_NSMutableArray, selRef_arrayWithCapacity_, 1LL, v2);
  v5 = self->networkInterfaceList;
  if ( v5 )
  {
    LODWORD(v6) = msgRef_count__objc_msgSend_fixup(v5, &msgRef_count__objc_msgSend_fixup);
    if ( v6 )
    {
      v7 = 0LL;
      v8 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      do
      {
        LODWORD(v9) = msgRef_objectAtIndex___objc_msgSend_fixup(
                        v3->networkInterfaceList,
                        &msgRef_objectAtIndex___objc_msgSend_fixup,
                        v7);
        v10 = v8(v9, selRef_description);
        v8(v4, selRef_addObject_, v10);
        LODWORD(v11) = msgRef_count__objc_msgSend_fixup(v3->networkInterfaceList, &msgRef_count__objc_msgSend_fixup);
        ++v7;
      }
      while ( v7 < v11 );
    }
  }
  LODWORD(v12) = msgRef_count__objc_msgSend_fixup(v4, &msgRef_count__objc_msgSend_fixup);
  v13 = v12;
  result = 0LL;
  if ( v13 )
    result = (id)objc_msgSend_ptr(classRef_NSArray, selRef_arrayWithArray_, v4);
  return result;
}
// 1000262C0: using guessed type char *selRef_arrayWithCapacity_;
// 1000262D0: using guessed type char *selRef_addObject_;
// 100026728: using guessed type char *selRef_arrayWithArray_;
// 100026B10: using guessed type char *selRef_description;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027390: using guessed type void *classRef_NSMutableArray;
// 100027410: using guessed type void *classRef_NSArray;

//----- (000000010001034C) ----------------------------------------------------
// GMServerInfo - (id)descriptionForInterfaceWithName:(id) 
id __cdecl -[GMServerInfo descriptionForInterfaceWithName:](struct GMServerInfo *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  id v4; // r15@1
  struct GMServerInfo *v5; // rbx@1
  struct NSArray *v6; // rdi@1
  struct objc_object *v7; // rcx@1
  unsigned __int64 i; // r13@2
  void *v9; // rax@3
  void *v10; // r14@3
  void *v11; // rax@3
  unsigned __int64 v12; // rax@5
  void *v13; // rax@7
  __int64 v15; // [sp-8h] [bp-30h]@1

  v15 = v3;
  v4 = a3;
  v5 = self;
  v6 = self->networkInterfaceList;
  v7 = 0LL;
  if ( v6 )
  {
    for ( i = 0LL; ; ++i )
    {
      LODWORD(v12) = msgRef_count__objc_msgSend_fixup(v6, &msgRef_count__objc_msgSend_fixup);
      if ( i >= v12 )
        return 0LL;
      LODWORD(v9) = msgRef_objectAtIndex___objc_msgSend_fixup(
                      v5->networkInterfaceList,
                      &msgRef_objectAtIndex___objc_msgSend_fixup,
                      i);
      v10 = v9;
      v11 = objc_msgSend_ptr(v9, selRef_networkName, v15);
      if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                              v11,
                              &msgRef_isEqualToString___objc_msgSend_fixup,
                              v4) )
        break;
      v6 = v5->networkInterfaceList;
    }
    v13 = objc_msgSend_ptr(v10, selRef_description);
    v7 = 0LL;
    if ( v13 )
      v7 = (struct objc_object *)objc_msgSend_ptr(classRef_NSString, selRef_stringWithString_, v13, 0LL);
  }
  return v7;
}
// 100026B10: using guessed type char *selRef_description;
// 100026B20: using guessed type char *selRef_networkName;
// 100027048: using guessed type char *selRef_stringWithString_;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 1000273C0: using guessed type void *classRef_NSString;

//----- (000000010001042A) ----------------------------------------------------
// GMServerInfo - (int64_t)indexOfUutWithSerialNumber:(id) 
int64_t __cdecl -[GMServerInfo indexOfUutWithSerialNumber:](struct GMServerInfo *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  id v4; // r14@1
  struct GMServerInfo *v5; // r15@1
  struct NSMutableArray *v6; // rdi@1
  int64_t result; // rax@1
  unsigned __int64 i; // rbx@3
  unsigned __int64 v9; // rax@5
  unsigned __int64 v10; // rcx@5
  void *v11; // rax@6
  void *v12; // rax@6
  __int64 v13; // [sp-8h] [bp-30h]@1

  v13 = v3;
  v4 = a3;
  v5 = self;
  v6 = self->uutList;
  result = 0x7FFFFFFFFFFFFFFFLL;
  if ( v6 && a3 )
  {
    for ( i = 0LL; ; ++i )
    {
      LODWORD(v9) = msgRef_count__objc_msgSend_fixup(v6, &msgRef_count__objc_msgSend_fixup);
      v10 = v9;
      result = 0x7FFFFFFFFFFFFFFFLL;
      if ( i >= v10 )
        break;
      LODWORD(v11) = msgRef_objectAtIndex___objc_msgSend_fixup(
                       v5->uutList,
                       &msgRef_objectAtIndex___objc_msgSend_fixup,
                       i);
      v12 = objc_msgSend_ptr(v11, selRef_serialNumber, v13);
      if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                              v12,
                              &msgRef_isEqualToString___objc_msgSend_fixup,
                              v4) )
        return i;
      v6 = v5->uutList;
    }
  }
  return result;
}
// 100026708: using guessed type char *selRef_serialNumber;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (00000001000104EC) ----------------------------------------------------
// GMServerInfo - (int64_t)statusOfDiagAtIndex:(int64_t) 
int64_t __cdecl -[GMServerInfo statusOfDiagAtIndex:](struct GMServerInfo *self, SEL a2, int64_t a3)
{
  __int64 v3; // rax@0
  unsigned __int64 v4; // rbx@1
  int64_t result; // rax@1
  void *v6; // rax@2
  unsigned __int64 v7; // rax@2
  unsigned __int64 v8; // rcx@2
  void *v9; // rax@3
  __int64 v10; // rax@3
  __int64 v11; // rbx@3
  __int64 v12; // rax@3
  __int64 v13; // r14@3
  __int64 v14; // rax@3
  __int64 v15; // rbx@3
  char v16; // al@10
  bool v17; // al@17
  char v18; // al@21
  char v19; // cl@23
  char v20; // cl@25
  __int64 v21; // [sp-8h] [bp-20h]@1

  v21 = v3;
  v4 = a3;
  result = 0LL;
  if ( a3 >= 0 )
  {
    v6 = objc_msgSend_ptr(self, selRef_diagAppList, v21);
    LODWORD(v7) = msgRef_count__objc_msgSend_fixup(v6, &msgRef_count__objc_msgSend_fixup);
    v8 = v7;
    result = 0LL;
    if ( v8 > v4 )
    {
      v9 = objc_msgSend_ptr(self, selRef_diagAppList);
      LODWORD(v10) = msgRef_objectAtIndex___objc_msgSend_fixup(v9, &msgRef_objectAtIndex___objc_msgSend_fixup, v4);
      v11 = v10;
      LODWORD(v12) = msgRef_objectForKey___objc_msgSend_fixup(
                       v10,
                       &msgRef_objectForKey___objc_msgSend_fixup,
                       &cfstr_Diagnosticrequ);
      v13 = v12;
      LODWORD(v14) = msgRef_objectForKey___objc_msgSend_fixup(
                       v11,
                       &msgRef_objectForKey___objc_msgSend_fixup,
                       &cfstr_Diagnosticpres);
      v15 = v14;
      result = 0LL;
      if ( v13 )
      {
        if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                                v13,
                                &msgRef_isEqualToString___objc_msgSend_fixup,
                                &cfstr_Required) )
        {
          if ( v15 )
          {
            LOBYTE(result) = (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                                                v15,
                                                &msgRef_isEqualToString___objc_msgSend_fixup,
                                                &cfstr_Yes) != 0;
            if ( (_BYTE)result )
              return (unsigned __int8)result;
          }
        }
        if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                                v13,
                                &msgRef_isEqualToString___objc_msgSend_fixup,
                                &cfstr_Required)
          && v15
          && (v16 = msgRef_isEqualToString___objc_msgSend_fixup(
                      v15,
                      &msgRef_isEqualToString___objc_msgSend_fixup,
                      &cfstr_No)) != 0 )
        {
          result = 2LL * (v16 != 0);
        }
        else
        {
          if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                                  v13,
                                  &msgRef_isEqualToString___objc_msgSend_fixup,
                                  &cfstr_Optional_1) )
          {
            if ( v15 )
            {
              LOBYTE(result) = (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                                                  v15,
                                                  &msgRef_isEqualToString___objc_msgSend_fixup,
                                                  &cfstr_Yes) != 0;
              if ( (_BYTE)result )
                return (unsigned __int8)result;
            }
          }
          if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                                  v13,
                                  &msgRef_isEqualToString___objc_msgSend_fixup,
                                  &cfstr_Optional_1)
            && v15
            && (v17 = (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                                         v15,
                                         &msgRef_isEqualToString___objc_msgSend_fixup,
                                         &cfstr_No) != 0) != 0 )
          {
            result = 3LL * v17;
          }
          else if ( (unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                                       v13,
                                       &msgRef_isEqualToString___objc_msgSend_fixup,
                                       &cfstr_No)
                 && v15
                 && (v18 = msgRef_isEqualToString___objc_msgSend_fixup(
                             v15,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             &cfstr_Extra)) != 0 )
          {
            result = 4LL * (v18 != 0);
          }
          else
          {
            v19 = msgRef_isEqualToString___objc_msgSend_fixup(
                    v13,
                    &msgRef_isEqualToString___objc_msgSend_fixup,
                    &cfstr_No);
            result = 0LL;
            if ( v19 && v15 )
            {
              v20 = msgRef_isEqualToString___objc_msgSend_fixup(
                      v15,
                      &msgRef_isEqualToString___objc_msgSend_fixup,
                      &cfstr_Duplicate_1);
              result = 0LL;
              if ( v20 )
                result = 5LL;
            }
          }
        }
      }
    }
  }
  return result;
}
// 100026DB0: using guessed type char *selRef_diagAppList;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (0000000100010752) ----------------------------------------------------
// GMServerInfo - (void)resetMachineIsConnectedFlag
void __cdecl -[GMServerInfo resetMachineIsConnectedFlag](struct GMServerInfo *self, SEL a2)
{
  __int64 v2; // rax@0
  __int64 v3; // rax@1
  unsigned __int64 v4; // rbx@2
  void *v5; // rax@3
  unsigned __int64 v6; // rax@5
  __int64 v7; // [sp-8h] [bp-30h]@1

  v7 = v2;
  LODWORD(v3) = msgRef_count__objc_msgSend_fixup(self->uutList, &msgRef_count__objc_msgSend_fixup);
  if ( v3 )
  {
    v4 = 0LL;
    do
    {
      LODWORD(v5) = msgRef_objectAtIndex___objc_msgSend_fixup(
                      self->uutList,
                      &msgRef_objectAtIndex___objc_msgSend_fixup,
                      v4);
      if ( v5 )
        objc_msgSend_ptr(v5, selRef_setIsConnected_, 0LL, v7);
      LODWORD(v6) = msgRef_count__objc_msgSend_fixup(self->uutList, &msgRef_count__objc_msgSend_fixup);
      ++v4;
    }
    while ( v4 < v6 );
  }
}
// 100026F58: using guessed type char *selRef_setIsConnected_;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (00000001000107EC) ----------------------------------------------------
// GMServerInfo - (void)updateMachineStatus
void __cdecl -[GMServerInfo updateMachineStatus](struct GMServerInfo *self, SEL a2)
{
  __int64 v2; // rax@0
  __int64 v3; // rax@1
  __int64 v4; // rax@2
  int v5; // er15@3
  __int64 v6; // r14@3
  void *v7; // rax@4
  unsigned __int64 v8; // rax@7
  __int64 v9; // [sp-8h] [bp-30h]@1

  v9 = v2;
  LODWORD(v3) = msgRef_count__objc_msgSend_fixup(self->uutList, &msgRef_count__objc_msgSend_fixup);
  if ( v3 )
  {
    LODWORD(v4) = msgRef_count__objc_msgSend_fixup(self->uutList, &msgRef_count__objc_msgSend_fixup);
    if ( v4 )
    {
      v5 = 0;
      v6 = 0LL;
      do
      {
        LODWORD(v7) = msgRef_objectAtIndex___objc_msgSend_fixup(
                        self->uutList,
                        &msgRef_objectAtIndex___objc_msgSend_fixup,
                        v6);
        if ( v7 )
        {
          if ( !(unsigned __int8)objc_msgSend_ptr(v7, selRef_isConnected, v9) )
          {
            objc_msgSend_ptr((void *)self->uutList, selRef_removeObjectAtIndex_, v6);
            --v5;
          }
        }
        LODWORD(v8) = msgRef_count__objc_msgSend_fixup(self->uutList, &msgRef_count__objc_msgSend_fixup);
        v6 = ++v5;
      }
      while ( v5 < v8 );
    }
  }
}
// 100026428: using guessed type char *selRef_removeObjectAtIndex_;
// 100026A98: using guessed type char *selRef_isConnected;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (00000001000108CF) ----------------------------------------------------
// NSOutlineView(MyExtensions) - (id)selectedItem
id __cdecl -[NSOutlineView(MyExtensions) selectedItem](struct NSOutlineView *self, SEL a2)
{
  __int64 v2; // rax@0
  void *v3; // rax@1

  v3 = objc_msgSend_ptr((void *)self, selRef_selectedRow, v2);
  return (id)objc_msgSend_ptr((void *)self, selRef_itemAtRow_, v3);
}
// 100026438: using guessed type char *selRef_selectedRow;
// 100026440: using guessed type char *selRef_itemAtRow_;

//----- (0000000100010904) ----------------------------------------------------
// NSOutlineView(MyExtensions) - (id)allSelectedItems
id __cdecl -[NSOutlineView(MyExtensions) allSelectedItems](struct NSOutlineView *self, SEL a2)
{
  __int64 v2; // rax@0
  void *(*v3)(void *, const char *, ...); // rbx@1
  void *v4; // rax@1
  void *v5; // r15@1
  void *v6; // rbx@1
  void *(*v7)(void *, const char *, ...); // r14@2
  void *v8; // rax@4
  void *v10; // [sp+0h] [bp-30h]@1

  v3 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v4 = objc_msgSend_ptr(classRef_NSMutableArray, selRef_array, v2);
  v5 = v3((void *)self, selRef_selectedRowIndexes, v4);
  v6 = v3(v5, selRef_firstIndex);
  if ( v6 != (void *)0xFFFFFFFF )
  {
    v7 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    do
    {
      if ( objc_msgSend_ptr((void *)self, selRef_itemAtRow_, v6) )
      {
        v8 = v7((void *)self, selRef_itemAtRow_, v6);
        v7(v10, selRef_addObject_, v8);
      }
      v6 = objc_msgSend_ptr(v5, selRef_indexGreaterThanIndex_, v6);
    }
    while ( v6 != (void *)0xFFFFFFFF );
  }
  return (id)v10;
}
// 1000262D0: using guessed type char *selRef_addObject_;
// 100026440: using guessed type char *selRef_itemAtRow_;
// 100026B60: using guessed type char *selRef_selectedRowIndexes;
// 100026BF0: using guessed type char *selRef_array;
// 100027050: using guessed type char *selRef_firstIndex;
// 100027058: using guessed type char *selRef_indexGreaterThanIndex_;
// 100027390: using guessed type void *classRef_NSMutableArray;

//----- (00000001000109D4) ----------------------------------------------------
// NSOutlineView(MyExtensions) - (void)selectItems:(id) byExtendingSelection:(char) 
void __cdecl -[NSOutlineView(MyExtensions) selectItems:byExtendingSelection:](struct NSOutlineView *self, SEL a2, id a3, char a4)
{
  __int64 v4; // rax@0
  char v5; // bl@1
  id v6; // r14@1
  __int64 v7; // rax@1
  __int64 v8; // r15@1
  __int64 v9; // rbx@4
  void *(*v10)(void *, const char *, ...); // r13@4
  __int64 v11; // rax@5
  void *v12; // rax@5
  void *v13; // rax@6
  __int64 v14; // [sp-8h] [bp-30h]@1

  v14 = v4;
  v5 = a4;
  v6 = a3;
  LODWORD(v7) = msgRef_count__objc_msgSend_fixup(a3, &msgRef_count__objc_msgSend_fixup);
  v8 = v7;
  if ( !v5 )
    objc_msgSend_ptr((void *)self, selRef_deselectAll_, 0LL, v14);
  if ( v8 )
  {
    v9 = 0LL;
    v10 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    do
    {
      LODWORD(v11) = msgRef_objectAtIndex___objc_msgSend_fixup(v6, &msgRef_objectAtIndex___objc_msgSend_fixup, v9);
      v12 = objc_msgSend_ptr((void *)self, selRef_rowForItem_, v11, v14);
      if ( (signed __int64)v12 >= 0 )
      {
        v13 = v10(classRef_NSIndexSet, selRef_indexSetWithIndex_, v12);
        v10((void *)self, selRef_selectRowIndexes_byExtendingSelection_, v13, 0LL);
      }
      ++v9;
    }
    while ( v8 != v9 );
  }
}
// 100026B58: using guessed type char *selRef_deselectAll_;
// 100026B70: using guessed type char *selRef_indexSetWithIndex_;
// 100026B78: using guessed type char *selRef_selectRowIndexes_byExtendingSelection_;
// 100027060: using guessed type char *selRef_rowForItem_;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027458: using guessed type void *classRef_NSIndexSet;

//----- (0000000100010A89) ----------------------------------------------------
// NSOutlineView(MyExtensions) - (char)isSelected:(uint64_t) 
char __cdecl -[NSOutlineView(MyExtensions) isSelected:](struct NSOutlineView *self, SEL a2, uint64_t a3)
{
  uint64_t v3; // r14@1
  void *(*v4)(void *, const char *, ...); // r15@1
  void *v5; // rbx@1
  void *i; // rax@1
  char v7; // cl@3

  v3 = a3;
  v4 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v5 = objc_msgSend_ptr((void *)self, selRef_selectedRowIndexes);
  for ( i = v4(v5, selRef_firstIndex); ; i = objc_msgSend_ptr(v5, selRef_indexGreaterThanIndex_, i) )
  {
    v7 = 0;
    if ( i == (void *)0xFFFFFFFF )
      break;
    v7 = 1;
    if ( i == (void *)v3 )
      break;
  }
  return v7;
}
// 100026B60: using guessed type char *selRef_selectedRowIndexes;
// 100027050: using guessed type char *selRef_firstIndex;
// 100027058: using guessed type char *selRef_indexGreaterThanIndex_;

//----- (0000000100010AF4) ----------------------------------------------------
// ImageAndTextCell - (void)dealloc
void __cdecl -[ImageAndTextCell dealloc](struct ImageAndTextCell *self, SEL a2)
{
  struct ImageAndTextCell *v2; // [sp+8h] [bp-18h]@1
  void *v3; // [sp+10h] [bp-10h]@1

  msgRef_release__objc_msgSend_fixup(self->image, &msgRef_release__objc_msgSend_fixup);
  self->image = 0LL;
  v2 = self;
  v3 = classRef_ImageAndTextCell;
  objc_msgSendSuper2(&v2, selRef_dealloc);
}
// 1000262D8: using guessed type char *selRef_dealloc;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027560: using guessed type void *classRef_ImageAndTextCell;

//----- (0000000100010B4D) ----------------------------------------------------
// ImageAndTextCell - (id)copyWithZone:(struct _NSZone *) 
id __cdecl -[ImageAndTextCell copyWithZone:](struct ImageAndTextCell *self, SEL a2, struct _NSZone *a3)
{
  struct objc_object *v3; // rbx@1
  void *v4; // rax@1
  struct ImageAndTextCell *v6; // [sp+0h] [bp-20h]@1
  void *v7; // [sp+8h] [bp-18h]@1

  v6 = self;
  v7 = classRef_ImageAndTextCell;
  v3 = (struct objc_object *)objc_msgSendSuper2(&v6, selRef_copyWithZone_, a3, self, classRef_ImageAndTextCell);
  LODWORD(v4) = msgRef_retain__objc_msgSend_fixup(self->image, &msgRef_retain__objc_msgSend_fixup);
  v3[11].isa = v4;
  return v3;
}
// 100027068: using guessed type char *selRef_copyWithZone_;
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027560: using guessed type void *classRef_ImageAndTextCell;

//----- (0000000100010BAC) ----------------------------------------------------
// ImageAndTextCell - (void)setImage:(id) 
void __cdecl -[ImageAndTextCell setImage:](struct ImageAndTextCell *self, SEL a2, id a3)
{
  id v3; // rbx@1
  struct ImageAndTextCell *v4; // r14@1
  struct objc_object *v5; // rdi@1
  struct NSImage *v6; // rax@2

  v3 = a3;
  v4 = self;
  v5 = (struct objc_object *)self->image;
  if ( v5 != a3 )
  {
    msgRef_release__objc_msgSend_fixup(v5, &msgRef_release__objc_msgSend_fixup);
    LODWORD(v6) = msgRef_retain__objc_msgSend_fixup(v3, &msgRef_retain__objc_msgSend_fixup);
    v4->image = v6;
  }
}
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100010BF6) ----------------------------------------------------
// ImageAndTextCell - (id)image
id __cdecl -[ImageAndTextCell image](struct ImageAndTextCell *self, SEL a2)
{
  return (id)self->image;
}

//----- (0000000100010C07) ----------------------------------------------------
// ImageAndTextCell - (struct CGRect)imageFrameForCellFrame:(struct CGRect) 
struct CGRect *__cdecl -[ImageAndTextCell imageFrameForCellFrame:](struct CGRect *retstr, struct ImageAndTextCell *self, SEL a3, struct CGRect a4)
{
  double v4; // xmm0_8@0
  double v5; // xmm1_8@0
  struct CGRect *v6; // rbx@1
  struct NSImage *v7; // rdi@1
  double v8; // ST18_8@2
  double v9; // ST08_8@2
  double v10; // ST00_8@2
  double v11; // xmm0_8@2
  void *v12; // rax@3
  double v13; // rcx@3

  v6 = retstr;
  v7 = self->image;
  if ( v7 )
  {
    objc_msgSend_ptr((void *)v7, selRef_size, a3);
    v8 = v4;
    v9 = a4.var0.var0;
    v10 = a4.var0.var1;
    v11 = ceil((a4.var1.var1 - v5) * 0.5);
    v6->var0.var0 = v9 + 3.0;
    v6->var0.var1 = v11 + v10;
    v6->var1.var0 = v8;
    v6->var1.var1 = v5;
  }
  else
  {
    v12 = NSZeroRect_ptr;
    v6->var1.var1 = *((double *)NSZeroRect_ptr + 3);
    v6->var1.var0 = *((double *)v12 + 2);
    v13 = *(double *)v12;
    v6->var0.var1 = *((double *)v12 + 1);
    v6->var0.var0 = v13;
  }
  return v6;
}
// 100021068: using guessed type void *NSZeroRect_ptr;
// 100026E10: using guessed type char *selRef_size;

//----- (0000000100010CCE) ----------------------------------------------------
// ImageAndTextCell - (void)editWithFrame:(struct CGRect) inView:(id) editor:(id) delegate:(id) event:(id) 
void __cdecl -[ImageAndTextCell editWithFrame:inView:editor:delegate:event:](struct ImageAndTextCell *self, SEL a2, struct CGRect a3, id a4, id a5, id a6, id a7)
{
  double v7; // xmm0_8@0
  id v8; // r14@1
  id v9; // r15@1
  id v10; // r12@1
  id v11; // r13@1
  struct ImageAndTextCell *v12; // [sp+28h] [bp-78h]@1
  void *v13; // [sp+30h] [bp-70h]@1
  char v14; // [sp+38h] [bp-68h]@1
  __int64 v15; // [sp+58h] [bp-48h]@1
  __int64 v16; // [sp+60h] [bp-40h]@1
  __int64 v17; // [sp+68h] [bp-38h]@1
  __int64 v18; // [sp+70h] [bp-30h]@1

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  objc_msgSend_ptr((void *)self->image, selRef_size);
  NSDivideRect(&v14, &v15, 0LL);
  v12 = self;
  v13 = classRef_ImageAndTextCell;
  objc_msgSendSuper2(
    &v12,
    selRef_editWithFrame_inView_editor_delegate_event_,
    v11,
    v10,
    v9,
    v8,
    v7 + 3.0,
    v15,
    v16,
    v17,
    v18);
}
// 100015EC6: using guessed type int __fastcall NSDivideRect(_QWORD, _QWORD, _QWORD);
// 100026E10: using guessed type char *selRef_size;
// 100027070: using guessed type char *selRef_editWithFrame_inView_editor_delegate_event_;
// 100027560: using guessed type void *classRef_ImageAndTextCell;

//----- (0000000100010D9D) ----------------------------------------------------
// ImageAndTextCell - (void)selectWithFrame:(struct CGRect) inView:(id) editor:(id) delegate:(id) start:(int64_t) length:(int64_t) 
void __cdecl -[ImageAndTextCell selectWithFrame:inView:editor:delegate:start:length:](struct ImageAndTextCell *self, SEL a2, struct CGRect a3, id a4, id a5, id a6, int64_t a7, int64_t a8)
{
  double v8; // xmm0_8@0
  int64_t v9; // r14@1
  id v10; // r15@1
  id v11; // r12@1
  id v12; // r13@1
  __int64 v13; // [sp+28h] [bp-78h]@1
  void *v14; // [sp+30h] [bp-70h]@1
  char v15; // [sp+38h] [bp-68h]@1
  __int64 v16; // [sp+58h] [bp-48h]@1
  __int64 v17; // [sp+60h] [bp-40h]@1
  __int64 v18; // [sp+68h] [bp-38h]@1
  __int64 v19; // [sp+70h] [bp-30h]@1

  v9 = a7;
  v10 = a6;
  v11 = a5;
  v12 = a4;
  objc_msgSend_ptr((void *)self->image, selRef_size);
  NSDivideRect(&v15, &v16, 0LL);
  v14 = classRef_ImageAndTextCell;
  objc_msgSendSuper2(
    &v13,
    selRef_selectWithFrame_inView_editor_delegate_start_length_,
    v12,
    v11,
    v10,
    v9,
    v8 + 3.0,
    v16,
    v17,
    v18,
    v19,
    a8,
    self,
    classRef_ImageAndTextCell);
}
// 100015EC6: using guessed type int __fastcall NSDivideRect(_QWORD, _QWORD, _QWORD);
// 100026E10: using guessed type char *selRef_size;
// 100027078: using guessed type char *selRef_selectWithFrame_inView_editor_delegate_start_length_;
// 100027560: using guessed type void *classRef_ImageAndTextCell;

//----- (0000000100010E75) ----------------------------------------------------
// ImageAndTextCell - (void)drawWithFrame:(struct CGRect) inView:(id) 
void __cdecl -[ImageAndTextCell drawWithFrame:inView:](struct ImageAndTextCell *self, SEL a2, struct CGRect a3, id a4)
{
  double v4; // xmm0_8@0
  double v5; // xmm1_8@0
  id v6; // r14@1
  struct ImageAndTextCell *v7; // r13@1
  struct NSImage *v8; // rdi@1
  void *(*v9)(void *, const char *, ...); // r12@2
  double v10; // ST18_8@2
  double v11; // ST10_8@2
  double v12; // ST08_8@2
  double v13; // ST00_8@2
  void (*v14)(void *, const char *, ...); // rbx@3
  void *v15; // rdi@3
  __int64 v16; // rdx@3
  double v17; // xmm0_8@5
  double v18; // xmm0_8@7
  double v19; // [sp+0h] [bp-90h]@2
  double v20; // [sp+8h] [bp-88h]@2
  __int64 v21; // [sp+10h] [bp-80h]@2
  double v22; // [sp+18h] [bp-78h]@2
  struct ImageAndTextCell *v23; // [sp+38h] [bp-58h]@8
  void *v24; // [sp+40h] [bp-50h]@8
  double v25; // [sp+48h] [bp-48h]@2
  double v26; // [sp+50h] [bp-40h]@3
  __int64 v27; // [sp+58h] [bp-38h]@3
  double v28; // [sp+60h] [bp-30h]@3

  v6 = a4;
  v7 = self;
  v8 = self->image;
  if ( v8 )
  {
    v9 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    objc_msgSend_ptr((void *)v8, selRef_size);
    v10 = a3.var1.var1;
    v11 = a3.var1.var0;
    v12 = a3.var0.var1;
    v13 = a3.var0.var0;
    NSDivideRect(&v25, &a3, 0LL);
    if ( (unsigned __int8)v9(
                            v7,
                            selRef_drawsBackground,
                            v4 + 3.0,
                            *(_QWORD *)&v13,
                            *(_QWORD *)&v12,
                            *(_QWORD *)&v11,
                            *(_QWORD *)&v10) )
    {
      v14 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      v15 = objc_msgSend_ptr(v7, selRef_backgroundColor);
      v14(v15, selRef_set);
      v22 = v28;
      v21 = v27;
      v20 = v26;
      v19 = v25;
      NSRectFill(v15, selRef_set, v16, *(_QWORD *)&v26);
    }
    v25 = v25 + 3.0;
    v27 = *(_QWORD *)&v4;
    v28 = v5;
    if ( (unsigned __int8)msgRef_isFlipped__objc_msgSend_fixup(v6, &msgRef_isFlipped__objc_msgSend_fixup) )
      v17 = a3.var1.var1 + v28;
    else
      v17 = a3.var1.var1 - v28;
    v18 = ceil(v17 * 0.5);
    v26 = v18 + v26;
    objc_msgSend_ptr(
      (void *)v7->image,
      selRef_compositeToPoint_operation_,
      2LL,
      v25,
      *(_QWORD *)&v19,
      *(_QWORD *)&v20,
      v21,
      *(_QWORD *)&v22);
  }
  v23 = v7;
  v24 = classRef_ImageAndTextCell;
  objc_msgSendSuper2(
    &v23,
    selRef_drawWithFrame_inView_,
    v6,
    *(_QWORD *)&a3.var0.var0,
    *(_QWORD *)&a3.var0.var1,
    *(_QWORD *)&a3.var1.var0,
    *(_QWORD *)&a3.var1.var1);
}
// 100015EBA: using guessed type int __cdecl NSRectFill(_QWORD, _QWORD, _QWORD, _QWORD);
// 100015EC6: using guessed type int __fastcall NSDivideRect(_QWORD, _QWORD, _QWORD);
// 100026E10: using guessed type char *selRef_size;
// 100026E58: using guessed type char *selRef_set;
// 100027080: using guessed type char *selRef_drawsBackground;
// 100027088: using guessed type char *selRef_backgroundColor;
// 100027090: using guessed type char *selRef_compositeToPoint_operation_;
// 100027098: using guessed type char *selRef_drawWithFrame_inView_;
// 100027360: using guessed type int (__fastcall *msgRef_isFlipped__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027560: using guessed type void *classRef_ImageAndTextCell;

//----- (0000000100011036) ----------------------------------------------------
// ImageAndTextCell - (struct CGSize)cellSize
struct CGSize __cdecl -[ImageAndTextCell cellSize](struct ImageAndTextCell *self, SEL a2)
{
  double v2; // xmm0_8@0
  struct NSImage *v3; // rdi@1
  double v4; // xmm0_8@2
  double v5; // xmm0_8@4
  struct CGSize result; // xmm1_8:xmm0_8@5
  double v7; // [sp+10h] [bp-20h]@1
  struct ImageAndTextCell *v8; // [sp+18h] [bp-18h]@1
  void *v9; // [sp+20h] [bp-10h]@1

  v8 = self;
  v9 = classRef_ImageAndTextCell;
  objc_msgSendSuper2(&v8, selRef_cellSize);
  v7 = v2;
  v3 = self->image;
  if ( v3 )
  {
    objc_msgSend_ptr((void *)v3, selRef_size);
    v4 = v2 + 3.0;
  }
  else
  {
    v4 = 3.0;
  }
  v5 = v7 + v4;
  result.var0 = v5;
  return result;
}
// 100026E10: using guessed type char *selRef_size;
// 1000270A0: using guessed type char *selRef_cellSize;
// 100027560: using guessed type void *classRef_ImageAndTextCell;

//----- (00000001000110B4) ----------------------------------------------------
// GMMachineInfo - (id)init
id __cdecl -[GMMachineInfo init](struct GMMachineInfo *self, SEL a2)
{
  struct objc_object *v2; // rax@1
  struct objc_object *v3; // rbx@1
  void *v4; // rax@2
  void *v5; // rax@2
  void *v6; // rax@2
  void *v7; // rax@2
  void *v8; // rax@2
  void *v9; // rax@2
  void *v10; // rax@2
  void *v11; // rax@2
  void *v12; // rax@2
  struct GMMachineInfo *v14; // [sp+8h] [bp-28h]@1
  void *v15; // [sp+10h] [bp-20h]@1

  v14 = self;
  v15 = classRef_GMMachineInfo_0;
  v2 = (struct objc_object *)objc_msgSendSuper2(&v14, selRef_init);
  v3 = v2;
  if ( v2 )
  {
    LOBYTE(v2[1].isa) = 1;
    HIDWORD(v2[1].isa) = 1;
    LODWORD(v4) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v3[2].isa = v4;
    LODWORD(v5) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v3[3].isa = v5;
    LODWORD(v6) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v3[4].isa = v6;
    LODWORD(v7) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v3[5].isa = v7;
    LODWORD(v8) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v3[6].isa = v8;
    LODWORD(v9) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v3[7].isa = v9;
    LODWORD(v10) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v3[8].isa = v10;
    v11 = objc_msgSend_ptr(classRef_NSMutableArray, selRef_array);
    LODWORD(v12) = msgRef_retain__objc_msgSend_fixup(v11, &msgRef_retain__objc_msgSend_fixup);
    v3[9].isa = v12;
  }
  return v3;
}
// 1000262B8: using guessed type char *selRef_init;
// 100026BF0: using guessed type char *selRef_array;
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027390: using guessed type void *classRef_NSMutableArray;
// 100027568: using guessed type void *classRef_GMMachineInfo_0;

//----- (00000001000111ED) ----------------------------------------------------
// GMMachineInfo - (id)initWithMachineDict:(id) 
id __cdecl -[GMMachineInfo initWithMachineDict:](struct GMMachineInfo *self, SEL a2, id a3)
{
  id v3; // rbx@1
  void *v4; // rax@1
  struct objc_object *v5; // rax@1
  struct objc_object *v6; // r13@1
  __int64 v7; // rax@2
  __int64 v8; // r12@2
  __int64 v9; // rax@2
  __int64 v10; // r15@2
  __int64 v11; // rax@2
  __int64 v12; // r14@2
  __int64 v13; // rax@2
  __int64 v14; // rax@2
  void *v15; // rax@7
  void *v16; // rax@10
  void *v17; // rax@13
  __int64 v19; // [sp+8h] [bp-48h]@2
  __int64 v20; // [sp+10h] [bp-40h]@2
  struct objc_object *v21; // [sp+20h] [bp-30h]@2

  v3 = a3;
  LODWORD(v4) = msgRef_alloc__objc_msgSend_fixup(classRef_GMMachineInfo, &msgRef_alloc__objc_msgSend_fixup);
  v5 = (struct objc_object *)objc_msgSend_ptr(v4, selRef_init);
  v6 = v5;
  if ( v5 )
  {
    v21 = v5;
    LODWORD(v7) = msgRef_objectForKey___objc_msgSend_fixup(
                    v3,
                    &msgRef_objectForKey___objc_msgSend_fixup,
                    &cfstr_Applecarenam_1);
    v8 = v7;
    LODWORD(v9) = msgRef_objectForKey___objc_msgSend_fixup(
                    v3,
                    &msgRef_objectForKey___objc_msgSend_fixup,
                    &cfstr_Serialnumber_1);
    v10 = v9;
    LODWORD(v11) = msgRef_objectForKey___objc_msgSend_fixup(v3, &msgRef_objectForKey___objc_msgSend_fixup, &cfstr_Model);
    v12 = v11;
    LODWORD(v13) = msgRef_objectForKey___objc_msgSend_fixup(
                     v3,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Currentdiag_1);
    v19 = v13;
    v6 = v21;
    LODWORD(v14) = msgRef_objectForKey___objc_msgSend_fixup(
                     v3,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Currentlog_1);
    v20 = v14;
    if ( v8 )
      objc_msgSend_ptr(v21, selRef_setAppleCareName_, v8);
    if ( v10 )
      objc_msgSend_ptr(v21, selRef_setSerialNumber_, v10);
    if ( v12 )
    {
      v15 = objc_msgSend_ptr(self, selRef_productModel);
      if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                               v12,
                               &msgRef_isEqualToString___objc_msgSend_fixup,
                               v15) )
        objc_msgSend_ptr(v21, selRef_setProductModel_, v12);
    }
    if ( v19 )
    {
      v16 = objc_msgSend_ptr(self, selRef_currentDiag);
      if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                               v19,
                               &msgRef_isEqualToString___objc_msgSend_fixup,
                               v16) )
        objc_msgSend_ptr(v21, selRef_setCurrentDiag_, v19);
    }
    if ( v20 )
    {
      v17 = objc_msgSend_ptr(self, selRef_currentLogPath);
      if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                               v20,
                               &msgRef_isEqualToString___objc_msgSend_fixup,
                               v17) )
        objc_msgSend_ptr(v21, selRef_setCurrentLogPath_, v20);
    }
  }
  return v6;
}
// 1000262B8: using guessed type char *selRef_init;
// 100026B38: using guessed type char *selRef_productModel;
// 100026B48: using guessed type char *selRef_currentDiag;
// 100026B50: using guessed type char *selRef_currentLogPath;
// 1000270A8: using guessed type char *selRef_setAppleCareName_;
// 1000270B0: using guessed type char *selRef_setSerialNumber_;
// 1000270B8: using guessed type char *selRef_setProductModel_;
// 1000270C0: using guessed type char *selRef_setCurrentDiag_;
// 1000270C8: using guessed type char *selRef_setCurrentLogPath_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (00000001000113C2) ----------------------------------------------------
// GMMachineInfo - (char)updateFromMachineStatusDict:(id) 
char __cdecl -[GMMachineInfo updateFromMachineStatusDict:](struct GMMachineInfo *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  __int64 v4; // ST00_8@1
  id v5; // rbx@1
  __int64 v6; // rax@1
  __int64 v7; // r12@1
  __int64 v8; // rax@1
  __int64 v9; // r15@1
  __int64 v10; // rax@1
  __int64 v11; // r14@1
  void *(*v12)(void *, const char *, ...); // rbx@1
  int v13; // eax@1
  char v14; // bl@1
  void *v15; // rax@4
  void *v16; // rax@7
  void *v17; // rax@10

  v4 = v3;
  v5 = a3;
  LODWORD(v6) = msgRef_objectForKey___objc_msgSend_fixup(a3, &msgRef_objectForKey___objc_msgSend_fixup, &cfstr_Model);
  v7 = v6;
  LODWORD(v8) = msgRef_objectForKey___objc_msgSend_fixup(
                  v5,
                  &msgRef_objectForKey___objc_msgSend_fixup,
                  &cfstr_Currentdiag_1);
  v9 = v8;
  LODWORD(v10) = msgRef_objectForKey___objc_msgSend_fixup(
                   v5,
                   &msgRef_objectForKey___objc_msgSend_fixup,
                   &cfstr_Currentlog_1);
  v11 = v10;
  v12 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  objc_msgSend_ptr(self, selRef_setIsConnected_, 1LL, v4);
  v13 = (unsigned __int64)v12(self, selRef_status);
  v14 = 0;
  if ( v13 != 1 )
  {
    objc_msgSend_ptr(self, selRef_setStatus_, 1LL);
    v14 = 1;
  }
  if ( v7 )
  {
    v15 = objc_msgSend_ptr(self, selRef_productModel);
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v7,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v15) )
    {
      objc_msgSend_ptr(self, selRef_setProductModel_, v7);
      v14 = 1;
    }
  }
  if ( v9 )
  {
    v16 = objc_msgSend_ptr(self, selRef_currentDiag);
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v9,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v16) )
    {
      objc_msgSend_ptr(self, selRef_setCurrentDiag_, v9);
      v14 = 1;
    }
  }
  if ( v11 )
  {
    v17 = objc_msgSend_ptr(self, selRef_currentLogPath);
    if ( !(unsigned __int8)msgRef_isEqualToString___objc_msgSend_fixup(
                             v11,
                             &msgRef_isEqualToString___objc_msgSend_fixup,
                             v17) )
    {
      objc_msgSend_ptr(self, selRef_setCurrentLogPath_, v11);
      v14 = 1;
    }
  }
  return v14;
}
// 100026928: using guessed type char *selRef_status;
// 100026B38: using guessed type char *selRef_productModel;
// 100026B48: using guessed type char *selRef_currentDiag;
// 100026B50: using guessed type char *selRef_currentLogPath;
// 100026F58: using guessed type char *selRef_setIsConnected_;
// 100026F98: using guessed type char *selRef_setStatus_;
// 1000270B8: using guessed type char *selRef_setProductModel_;
// 1000270C0: using guessed type char *selRef_setCurrentDiag_;
// 1000270C8: using guessed type char *selRef_setCurrentLogPath_;
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (0000000100011536) ----------------------------------------------------
// GMMachineInfo - (char)updateLogListFromLogsDict:(id) 
char __cdecl -[GMMachineInfo updateLogListFromLogsDict:](struct GMMachineInfo *self, SEL a2, id a3)
{
  void *v3; // rax@1
  void *v4; // r15@1
  char result; // al@1
  void *(*v6)(void *, const char *, ...); // rbx@2
  void *v7; // r13@2
  char v8; // bl@2
  void *v9; // rax@3
  __int64 v10; // rax@3
  int v11; // er12@4
  __int64 v12; // r15@4
  void *v13; // rax@5
  void *v14; // rax@5
  void *v15; // rax@6
  __int64 v16; // rax@6
  void (*v17)(void *, const char *, ...); // rbx@7
  void *v18; // rax@7
  void *v19; // rax@8
  unsigned __int64 v20; // rax@8
  void (*v21)(void *, const char *, ...); // r15@12
  __int64 v22; // rax@13
  __int64 v23; // r12@13
  void *v24; // rax@14
  void *v25; // rax@14
  __int64 v26; // rax@14
  void *v27; // [sp+8h] [bp-38h]@2
  void *v28; // [sp+10h] [bp-30h]@1

  LODWORD(v3) = msgRef_objectForKey___objc_msgSend_fixup(a3, &msgRef_objectForKey___objc_msgSend_fixup, &cfstr_Logs);
  v4 = v3;
  v28 = objc_msgSend_ptr(classRef_NSMutableDictionary, selRef_dictionaryWithCapacity_, 1LL);
  result = 0;
  if ( v4 )
  {
    v6 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v27 = objc_msgSend_ptr(v4, selRef_objectEnumerator);
    v7 = v6(v27, selRef_nextObject);
    v8 = 0;
    if ( v7 )
    {
      v21 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
      do
      {
        LODWORD(v22) = msgRef_objectForKey___objc_msgSend_fixup(
                         v7,
                         &msgRef_objectForKey___objc_msgSend_fixup,
                         &cfstr_Logpath_1);
        v23 = v22;
        if ( !(unsigned __int8)objc_msgSend_ptr(self, selRef_hasLogEntryWithPath_, v22) )
        {
          LODWORD(v24) = msgRef_alloc__objc_msgSend_fixup(classRef_GMLogEntry, &msgRef_alloc__objc_msgSend_fixup);
          v25 = objc_msgSend_ptr(v24, selRef_initWithLogDict_, v7);
          LODWORD(v26) = msgRef_autorelease__objc_msgSend_fixup(v25, &msgRef_autorelease__objc_msgSend_fixup);
          if ( v26 )
          {
            objc_msgSend_ptr((void *)self->logList, selRef_addObject_, v26);
            v8 = 1;
          }
        }
        v21(v28, selRef_setObject_forKey_, v23, v23);
        v7 = ((void *(*)(void *, const char *, ...))v21)(v27, selRef_nextObject);
      }
      while ( v7 );
    }
    v9 = objc_msgSend_ptr(self, selRef_logList);
    LODWORD(v10) = msgRef_count__objc_msgSend_fixup(v9, &msgRef_count__objc_msgSend_fixup);
    if ( v10 )
    {
      v11 = 0;
      v12 = 0LL;
      do
      {
        v13 = objc_msgSend_ptr(self, selRef_logList);
        LODWORD(v14) = msgRef_objectAtIndex___objc_msgSend_fixup(v13, &msgRef_objectAtIndex___objc_msgSend_fixup, v12);
        if ( v14 )
        {
          v15 = objc_msgSend_ptr(v14, selRef_logPath);
          LODWORD(v16) = msgRef_objectForKey___objc_msgSend_fixup(v28, &msgRef_objectForKey___objc_msgSend_fixup, v15);
          if ( !v16 )
          {
            v17 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
            v18 = objc_msgSend_ptr(self, selRef_logList);
            v17(v18, selRef_removeObjectAtIndex_, v12);
            --v11;
            v8 = 1;
          }
        }
        v19 = objc_msgSend_ptr(self, selRef_logList);
        LODWORD(v20) = msgRef_count__objc_msgSend_fixup(v19, &msgRef_count__objc_msgSend_fixup);
        v12 = ++v11;
      }
      while ( v11 < v20 );
    }
    result = 0;
    if ( v8 )
    {
      objc_msgSend_ptr((void *)self->logList, selRef_sortUsingSelector_, selRef_sortByDateDescending_);
      result = v8;
    }
  }
  return result;
}
// 1000262D0: using guessed type char *selRef_addObject_;
// 100026428: using guessed type char *selRef_removeObjectAtIndex_;
// 100026568: using guessed type char *selRef_dictionaryWithCapacity_;
// 100026598: using guessed type char *selRef_setObject_forKey_;
// 100026658: using guessed type char *selRef_logPath;
// 100026720: using guessed type char *selRef_logList;
// 1000270D0: using guessed type char *selRef_objectEnumerator;
// 1000270D8: using guessed type char *selRef_nextObject;
// 1000270E0: using guessed type char *selRef_hasLogEntryWithPath_;
// 1000270E8: using guessed type char *selRef_initWithLogDict_;
// 1000270F0: using guessed type char *selRef_sortByDateDescending_;
// 1000270F8: using guessed type char *selRef_sortUsingSelector_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272C0: using guessed type int (__fastcall *msgRef_autorelease__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027408: using guessed type void *classRef_NSMutableDictionary;

//----- (000000010001178E) ----------------------------------------------------
// GMMachineInfo - (void)dealloc
void __cdecl -[GMMachineInfo dealloc](struct GMMachineInfo *self, SEL a2)
{
  __int64 v2; // [sp+0h] [bp-20h]@1
  void *v3; // [sp+8h] [bp-18h]@1

  msgRef_release__objc_msgSend_fixup(self->serialNumber, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->productModel, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->appleCareName, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->currentDiag, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->diagVersion, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->currentLogPath, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->currentLog, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->logList, &msgRef_release__objc_msgSend_fixup);
  v3 = classRef_GMMachineInfo_0;
  objc_msgSendSuper2(&v2, selRef_dealloc, self, classRef_GMMachineInfo_0);
}
// 1000262D8: using guessed type char *selRef_dealloc;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027568: using guessed type void *classRef_GMMachineInfo_0;

//----- (000000010001186B) ----------------------------------------------------
// GMMachineInfo - (char)isConnected
char __cdecl -[GMMachineInfo isConnected](struct GMMachineInfo *self, SEL a2)
{
  return self->isConnected;
}

//----- (000000010001187C) ----------------------------------------------------
// GMMachineInfo - (void)setIsConnected:(char) 
void __cdecl -[GMMachineInfo setIsConnected:](struct GMMachineInfo *self, SEL a2, char a3)
{
  self->isConnected = a3;
}

//----- (000000010001188C) ----------------------------------------------------
// GMMachineInfo - (int)status
int __cdecl -[GMMachineInfo status](struct GMMachineInfo *self, SEL a2)
{
  return self->status;
}

//----- (000000010001189C) ----------------------------------------------------
// GMMachineInfo - (void)setStatus:(int) 
void __cdecl -[GMMachineInfo setStatus:](struct GMMachineInfo *self, SEL a2, int a3)
{
  self->status = a3;
}

//----- (00000001000118AC) ----------------------------------------------------
// GMMachineInfo - (id)serialNumber
id __cdecl -[GMMachineInfo serialNumber](struct GMMachineInfo *self, SEL a2)
{
  return (id)self->serialNumber;
}

//----- (00000001000118BD) ----------------------------------------------------
// GMMachineInfo - (void)setSerialNumber:(id) 
void __cdecl -[GMMachineInfo setSerialNumber:](struct GMMachineInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->serialNumber, &msgRef_release__objc_msgSend_fixup);
  self->serialNumber = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100011902) ----------------------------------------------------
// GMMachineInfo - (id)productModel
id __cdecl -[GMMachineInfo productModel](struct GMMachineInfo *self, SEL a2)
{
  return (id)self->productModel;
}

//----- (0000000100011913) ----------------------------------------------------
// GMMachineInfo - (void)setProductModel:(id) 
void __cdecl -[GMMachineInfo setProductModel:](struct GMMachineInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->productModel, &msgRef_release__objc_msgSend_fixup);
  self->productModel = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100011958) ----------------------------------------------------
// GMMachineInfo - (id)appleCareName
id __cdecl -[GMMachineInfo appleCareName](struct GMMachineInfo *self, SEL a2)
{
  return (id)self->appleCareName;
}

//----- (0000000100011969) ----------------------------------------------------
// GMMachineInfo - (void)setAppleCareName:(id) 
void __cdecl -[GMMachineInfo setAppleCareName:](struct GMMachineInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->appleCareName, &msgRef_release__objc_msgSend_fixup);
  self->appleCareName = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (00000001000119AE) ----------------------------------------------------
// GMMachineInfo - (id)currentDiag
id __cdecl -[GMMachineInfo currentDiag](struct GMMachineInfo *self, SEL a2)
{
  return (id)self->currentDiag;
}

//----- (00000001000119BF) ----------------------------------------------------
// GMMachineInfo - (void)setCurrentDiag:(id) 
void __cdecl -[GMMachineInfo setCurrentDiag:](struct GMMachineInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->currentDiag, &msgRef_release__objc_msgSend_fixup);
  self->currentDiag = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100011A04) ----------------------------------------------------
// GMMachineInfo - (id)diagVersion
id __cdecl -[GMMachineInfo diagVersion](struct GMMachineInfo *self, SEL a2)
{
  return (id)self->diagVersion;
}

//----- (0000000100011A15) ----------------------------------------------------
// GMMachineInfo - (void)setDiagVersion:(id) 
void __cdecl -[GMMachineInfo setDiagVersion:](struct GMMachineInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->diagVersion, &msgRef_release__objc_msgSend_fixup);
  self->diagVersion = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100011A5A) ----------------------------------------------------
// GMMachineInfo - (id)currentLogPath
id __cdecl -[GMMachineInfo currentLogPath](struct GMMachineInfo *self, SEL a2)
{
  return (id)self->currentLogPath;
}

//----- (0000000100011A6B) ----------------------------------------------------
// GMMachineInfo - (void)setCurrentLogPath:(id) 
void __cdecl -[GMMachineInfo setCurrentLogPath:](struct GMMachineInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->currentLogPath, &msgRef_release__objc_msgSend_fixup);
  self->currentLogPath = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100011AB0) ----------------------------------------------------
// GMMachineInfo - (id)currentLog
id __cdecl -[GMMachineInfo currentLog](struct GMMachineInfo *self, SEL a2)
{
  return (id)self->currentLog;
}

//----- (0000000100011AC1) ----------------------------------------------------
// GMMachineInfo - (void)setCurrentLog:(id) 
void __cdecl -[GMMachineInfo setCurrentLog:](struct GMMachineInfo *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->currentLog, &msgRef_release__objc_msgSend_fixup);
  self->currentLog = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100011B06) ----------------------------------------------------
// GMMachineInfo - (id)logList
id __cdecl -[GMMachineInfo logList](struct GMMachineInfo *self, SEL a2)
{
  return (id)self->logList;
}

//----- (0000000100011B17) ----------------------------------------------------
// GMMachineInfo - (int64_t)numberOfLogs
int64_t __cdecl -[GMMachineInfo numberOfLogs](struct GMMachineInfo *self, SEL a2)
{
  int64_t result; // rax@1

  LODWORD(result) = msgRef_count__objc_msgSend_fixup(self->logList, &msgRef_count__objc_msgSend_fixup);
  return result;
}
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100011B37) ----------------------------------------------------
// GMMachineInfo - (id)statusString
id __cdecl -[GMMachineInfo statusString](struct GMMachineInfo *self, SEL a2)
{
  void *v2; // rax@2
  __CFString *v3; // rdx@2

  switch ( (unsigned __int64)self->status )
  {
    default:
      v2 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v3 = &cfstr_Kmachineofflin;
      break;
    case 1uLL:
      v2 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v3 = &cfstr_Kmachineconnec;
      break;
    case 2uLL:
      v2 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v3 = &cfstr_Kmachinerunnin;
      break;
    case 3uLL:
      v2 = objc_msgSend_ptr(classRef_NSBundle, selRef_mainBundle);
      v3 = &cfstr_Kmachinefailed;
      break;
  }
  return (id)objc_msgSend_ptr(v2, selRef_localizedStringForKey_value_table_, v3, &stru_100028108, 0LL);
}
// 100026380: using guessed type char *selRef_mainBundle;
// 100026388: using guessed type char *selRef_localizedStringForKey_value_table_;
// 1000273B0: using guessed type void *classRef_NSBundle;
// 100029C68: using guessed type __CFString cfstr_Kmachineofflin;
// 100029C88: using guessed type __CFString cfstr_Kmachineconnec;
// 100029CA8: using guessed type __CFString cfstr_Kmachinerunnin;
// 100029CC8: using guessed type __CFString cfstr_Kmachinefailed;

//----- (0000000100011BFC) ----------------------------------------------------
// GMMachineInfo - (char)hasLogEntryWithPath:(id) 
char __cdecl -[GMMachineInfo hasLogEntryWithPath:](struct GMMachineInfo *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  id v4; // r14@1
  unsigned __int64 i; // rbx@1
  unsigned __int64 v6; // rax@3
  char v7; // cl@3
  void *v8; // rax@4
  void *v9; // rax@4
  char v10; // al@4
  __int64 v12; // [sp-8h] [bp-30h]@1

  v12 = v3;
  v4 = a3;
  for ( i = 0LL; ; ++i )
  {
    LODWORD(v6) = msgRef_count__objc_msgSend_fixup(self->logList, &msgRef_count__objc_msgSend_fixup);
    v7 = 0;
    if ( i >= v6 )
      break;
    LODWORD(v8) = msgRef_objectAtIndex___objc_msgSend_fixup(
                    self->logList,
                    &msgRef_objectAtIndex___objc_msgSend_fixup,
                    i);
    v9 = objc_msgSend_ptr(v8, selRef_logPath, v12);
    v10 = msgRef_isEqualToString___objc_msgSend_fixup(v9, &msgRef_isEqualToString___objc_msgSend_fixup, v4);
    v7 = 1;
    if ( v10 )
      break;
  }
  return v7;
}
// 100026658: using guessed type char *selRef_logPath;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (0000000100011C92) ----------------------------------------------------
__int64 __fastcall sub_100011C92(__int64 a1, __int64 a2, unsigned int a3, __int16 a4)
{
  __int64 v4; // r15@1
  unsigned int *v5; // rbx@1
  __int16 v6; // di@1
  _WORD *v7; // r14@1
  signed int v8; // er12@1
  int v9; // ST18_4@5
  int v10; // eax@9
  unsigned int v12; // [sp+0h] [bp-480h]@1
  __int16 v13; // [sp+4h] [bp-47Ch]@1
  unsigned int *v14; // [sp+8h] [bp-478h]@1
  unsigned int v15; // [sp+14h] [bp-46Ch]@1
  __int16 v16; // [sp+1Ch] [bp-464h]@4
  unsigned int *v17; // [sp+20h] [bp-460h]@1
  __int16 v18; // [sp+2Eh] [bp-452h]@9
  unsigned __int64 v19; // [sp+30h] [bp-450h]@9
  int v20; // [sp+38h] [bp-448h]@9
  char v21; // [sp+40h] [bp-440h]@9
  int v22; // [sp+48h] [bp-438h]@10

  v15 = a3;
  v4 = a1;
  v17 = (unsigned int *)(a2 + 16);
  v5 = (unsigned int *)(a2 + 8);
  v6 = *(_WORD *)(a1 + 1124);
  v14 = (unsigned int *)(a2 + 12);
  v7 = (_WORD *)(a2 + 20);
  v8 = 0;
  v13 = a4;
  v12 = (unsigned __int16)(*(_WORD *)(a2 + 20) + 22);
  while ( 1 )
  {
    v16 = v6;
    if ( v8 )
      break;
    *(_DWORD *)(a2 + 12) = sub_100012902(v14);
    *(_DWORD *)(a2 + 8) = sub_100012902(v5);
    *(_DWORD *)(a2 + 16) = sub_100012902(v17);
    *(_WORD *)(a2 + 20) = sub_1000128F2(v7);
    v9 = sub_100012ADA(*(_QWORD *)(v4 + 1144), v15, v13, (const void *)a2, v12);
    *(_DWORD *)(a2 + 12) = sub_100012902(v14);
    *(_DWORD *)(a2 + 8) = sub_100012902(v5);
    v8 = 0;
    if ( v9 <= 0 )
      v8 = -10001;
    *(_DWORD *)(a2 + 16) = sub_100012902(v17);
    *(_WORD *)(a2 + 20) = sub_1000128F2(v7);
    if ( !*(_BYTE *)(a2 + 7) )
      break;
    while ( !v8 )
    {
      v10 = *(_DWORD *)(v4 + 1128);
      v19 = *(_DWORD *)(v4 + 1128) / 0x3E8uLL;
      v20 = 1000 * (v10 - 1000 * v19);
      v18 = 1048;
      v8 = -2147483630;
      if ( (signed int)sub_100012B36(*(_QWORD *)(v4 + 1144), 0LL, 0LL, &v21, &v18, (__int64)&v19) > 0 )
      {
        v22 = sub_100012902((unsigned int *)&v22);
        v8 = 0;
        if ( v22 == *v5 )
          return (unsigned int)v8;
      }
    }
    --v6;
    if ( v16 > 0 )
    {
      v8 = 0;
      v6 = v16 - 1;
    }
  }
  return (unsigned int)v8;
}

//----- (0000000100011E7D) ----------------------------------------------------
signed __int64 __fastcall sub_100011E7D(__int64 a1, _DWORD *a2, _WORD *a3, void *a4, unsigned int a5)
{
  void *v5; // rbx@1
  unsigned __int64 v6; // r14@1
  signed __int64 result; // rax@2
  __int16 v8; // cx@3
  unsigned __int64 v9; // [sp+8h] [bp-28h]@1
  unsigned int v10; // [sp+10h] [bp-20h]@1
  __int16 v11; // [sp+1Eh] [bp-12h]@1

  v5 = a4;
  v11 = 1048;
  v6 = a5 / 0x3E8uLL;
  v9 = a5 / 0x3E8uLL;
  v10 = 1000 * (a5 % 0x3E8);
  if ( (signed int)sub_100012B36(*(_QWORD *)(a1 + 1144), a2, a3, a4, &v11, (__int64)&v9) > 0 )
  {
    *((_DWORD *)v5 + 3) = sub_100012902((unsigned int *)v5 + 3);
    *((_DWORD *)v5 + 2) = sub_100012902((unsigned int *)v5 + 2);
    *((_DWORD *)v5 + 4) = sub_100012902((unsigned int *)v5 + 4);
    v8 = sub_1000128F2((_WORD *)v5 + 10);
    result = 0LL;
    *((_WORD *)v5 + 10) = v8;
  }
  else
  {
    v9 = v6;
    result = 2147483666LL;
  }
  return result;
}

//----- (0000000100011F1A) ----------------------------------------------------
__int64 __fastcall sub_100011F1A(unsigned int a1, __int16 a2, __int16 a3)
{
  __int16 v3; // r15@1
  void *v4; // rax@1
  __int64 v5; // r13@1
  unsigned int v6; // edi@2
  unsigned int v7; // ebx@3
  int v8; // er14@3
  int v9; // eax@4
  int v10; // eax@11
  unsigned int v12; // [sp+4h] [bp-4CCh]@1
  char v13; // [sp+8h] [bp-4C8h]@1
  char v14; // [sp+90h] [bp-440h]@12

  v3 = a3;
  v12 = a1;
  v13 = 77;
  v4 = malloc(0x480uLL);
  v5 = (__int64)v4;
  if ( v4 )
  {
    __bzero(v4, 1152LL);
    *(_DWORD *)(v5 + 1124) = 3;
    *(_DWORD *)(v5 + 1128) = 2000;
    v6 = *(_DWORD *)&byte_10002A288;
    if ( !*(_DWORD *)&byte_10002A288 )
    {
      v7 = 0;
      v8 = 0;
      while ( (signed int)v7 <= 49 )
      {
        v9 = sub_100012526(v7, 0LL, 0LL);
        if ( v9 )
        {
          if ( v8 )
            break;
        }
        else
        {
          v9 = v8;
        }
        ++v7;
        v8 = v9;
      }
      v6 = *(_DWORD *)&byte_10002A288;
    }
    if ( (unsigned int)sub_10001290C(v6, a2, (_QWORD *)(v5 + 1144))
      || (sub_100012DCC(*(_QWORD *)(v5 + 1144)),
          word_10002A2D4 = *((_WORD *)&byte_10002A0D0 + 2),
          dword_10002A2D0 = *(_DWORD *)&byte_10002A0D0,
          byte_10002A2D6 = 0,
          dword_10002A2DC = 0,
          v10 = *(_DWORD *)(v5 + 1132),
          *(_DWORD *)(v5 + 1132) = v10 + 1,
          dword_10002A2D8 = v10,
          byte_10002A2D7 = 0,
          word_10002A2E4 = 136,
          dword_10002A2E0 = 136,
          memcpy(&unk_10002A2E6, &v13, 0x88uLL),
          (unsigned int)sub_100011C92(v5, (__int64)&dword_10002A2D0, v12, v3))
      || (unsigned int)sub_100011E7D(v5, (_DWORD *)(v5 + 1116), (_WORD *)(v5 + 1120), &v14, *(_DWORD *)(v5 + 1128)) )
    {
      sub_1000120C7((void *)v5, 0);
      v5 = 0LL;
    }
    else
    {
      pthread_mutex_init(&stru_10002A290, 0LL);
    }
  }
  return v5;
}
// 100015D8E: using guessed type int __fastcall __bzero(_QWORD, _QWORD);
// 10002A0D0: using guessed type char byte_10002A0D0;
// 10002A288: using guessed type char byte_10002A288;
// 10002A2D0: using guessed type int dword_10002A2D0;
// 10002A2D4: using guessed type __int16 word_10002A2D4;
// 10002A2D6: using guessed type char byte_10002A2D6;
// 10002A2D7: using guessed type char byte_10002A2D7;
// 10002A2D8: using guessed type int dword_10002A2D8;
// 10002A2DC: using guessed type int dword_10002A2DC;
// 10002A2E0: using guessed type int dword_10002A2E0;
// 10002A2E4: using guessed type __int16 word_10002A2E4;

//----- (00000001000120C7) ----------------------------------------------------
__int64 __fastcall sub_1000120C7(void *a1, int a2)
{
  void *v2; // r14@1
  __int64 result; // rax@1
  void *v4; // rdi@2

  v2 = a1;
  result = 2147483650LL;
  if ( a1 )
  {
    v4 = (void *)*((_QWORD *)a1 + 143);
    if ( v4 )
      sub_100012AAF(v4);
    free(v2);
    result = 0LL;
    if ( a2 )
    {
      pthread_mutex_destroy(&stru_10002A290);
      result = 0LL;
    }
  }
  return result;
}

//----- (000000010001210F) ----------------------------------------------------
__int64 __fastcall sub_10001210F(__int64 a1, __int64 a2, unsigned int a3)
{
  unsigned int v3; // er15@1
  signed int v4; // er12@1
  int v5; // er13@3
  int v6; // eax@4
  signed int v7; // ebx@4

  v3 = a3;
  v4 = -2147483646;
  if ( a1 )
  {
    pthread_mutex_lock(&stru_10002A290);
    v4 = 0;
    if ( v3 )
    {
      v5 = 0;
      do
      {
        byte_10002A2D6 = 1;
        dword_10002A2DC = v5;
        v6 = *(_DWORD *)(a1 + 1132);
        *(_DWORD *)(a1 + 1132) = v6 + 1;
        dword_10002A2D8 = v6;
        v7 = v3;
        if ( v3 > 0x400 )
          v7 = 1024;
        byte_10002A2D7 = 1;
        word_10002A2E4 = v7;
        dword_10002A2E0 = v3 - v7;
        word_10002A2D4 = *((_WORD *)&byte_10002A0D0 + 2);
        dword_10002A2D0 = *(_DWORD *)&byte_10002A0D0;
        __memcpy_chk(&unk_10002A2E6, a2 + (unsigned int)(v5 << 10), (unsigned int)v7, 1026LL);
        v4 = sub_100011C92(a1, (__int64)&dword_10002A2D0, *(_DWORD *)(a1 + 1116), *(_WORD *)(a1 + 1120));
        if ( v4 )
          break;
        ++v5;
        v3 -= v7;
      }
      while ( v3 );
    }
    pthread_mutex_unlock(&stru_10002A290);
  }
  return (unsigned int)v4;
}
// 100015D94: using guessed type int __fastcall __memcpy_chk(_QWORD, _QWORD, _QWORD, _QWORD);
// 10002A0D0: using guessed type char byte_10002A0D0;
// 10002A2D0: using guessed type int dword_10002A2D0;
// 10002A2D4: using guessed type __int16 word_10002A2D4;
// 10002A2D6: using guessed type char byte_10002A2D6;
// 10002A2D7: using guessed type char byte_10002A2D7;
// 10002A2D8: using guessed type int dword_10002A2D8;
// 10002A2DC: using guessed type int dword_10002A2DC;
// 10002A2E0: using guessed type int dword_10002A2E0;
// 10002A2E4: using guessed type __int16 word_10002A2E4;

//----- (0000000100012242) ----------------------------------------------------
__int64 __fastcall sub_100012242(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, unsigned int *a5)
{
  __int64 result; // rax@1
  char v6; // r15@2
  int v7; // er13@2
  unsigned __int8 v8; // r12@4
  unsigned __int8 v9; // r14@7
  char v10; // r14@11
  __int64 v11; // [sp+8h] [bp-458h]@1
  unsigned int *v12; // [sp+10h] [bp-450h]@1
  unsigned int v13; // [sp+1Ch] [bp-444h]@2
  char v14; // [sp+20h] [bp-440h]@8
  int v15; // [sp+28h] [bp-438h]@9
  int v16; // [sp+30h] [bp-430h]@11
  unsigned __int16 v17; // [sp+34h] [bp-42Ch]@10
  char v18; // [sp+36h] [bp-42Ah]@11

  v12 = a5;
  v11 = a4;
  result = 2147483650LL;
  if ( a1 )
  {
    result = sub_10001210F(a1, a2, a3);
    v6 = 0;
    v7 = 0;
    v13 = 0;
LABEL_4:
    v8 = 0;
    while ( !(_DWORD)result )
    {
      result = 0LL;
      if ( (unsigned int)v8 > *(_DWORD *)(a1 + 1124) )
        break;
      v9 = v8++ + v6;
      byte_10002A2D6 = 2;
      dword_10002A2DC = v7;
      dword_10002A2D8 = v9;
      byte_10002A2D7 = 0;
      result = sub_100011C92(a1, (__int64)&dword_10002A2D0, *(_DWORD *)(a1 + 1116), *(_WORD *)(a1 + 1120));
      if ( !(_DWORD)result )
      {
        result = sub_100011E7D(a1, 0LL, 0LL, &v14, *(_DWORD *)(a1 + 1128));
        if ( !(_DWORD)result )
        {
          result = 0LL;
          if ( dword_10002A2D8 == v15 )
          {
            v13 += v17;
            result = 2147483653LL;
            if ( v13 <= *v12 )
            {
              v10 = v9 + 1;
              memcpy((void *)(v11 + (unsigned int)(v7 << 10)), &v18, v17);
              if ( v16 )
              {
                ++v7;
                result = 0LL;
                v6 = v10;
                goto LABEL_4;
              }
              *v12 = v13;
              result = 0LL;
            }
            return result;
          }
        }
      }
    }
  }
  return result;
}
// 10002A2D0: using guessed type int dword_10002A2D0;
// 10002A2D6: using guessed type char byte_10002A2D6;
// 10002A2D7: using guessed type char byte_10002A2D7;
// 10002A2D8: using guessed type int dword_10002A2D8;
// 10002A2DC: using guessed type int dword_10002A2DC;

//----- (000000010001239F) ----------------------------------------------------
signed __int64 __fastcall sub_10001239F(__int64 a1, int a2)
{
  signed __int64 result; // rax@1

  result = 2147483650LL;
  if ( a1 )
  {
    *(_DWORD *)(a1 + 1124) = a2;
    result = 0LL;
  }
  return result;
}

//----- (00000001000123B7) ----------------------------------------------------
signed __int64 __fastcall sub_1000123B7(__int64 a1, int a2)
{
  signed __int64 result; // rax@1

  result = 2147483650LL;
  if ( a1 )
  {
    *(_DWORD *)(a1 + 1128) = a2;
    result = 0LL;
  }
  return result;
}

//----- (00000001000123CF) ----------------------------------------------------
__int64 __fastcall sub_1000123CF(char *a1, char *a2, _DWORD *a3)
{
  char *v3; // r14@1
  signed int v4; // ebx@1
  FILE *v5; // r12@1
  int i; // er15@3
  int v7; // er13@5
  signed int j; // ebx@10
  char v9; // r15@11
  char *v10; // r13@12
  int v11; // er15@12
  __int16 v12; // ax@19
  _DWORD *v14; // [sp+0h] [bp-30h]@1

  v14 = a3;
  v3 = a2;
  v4 = (signed int)a1;
  fflush(0LL);
  v5 = popen(a1, "r");
  if ( v5 )
  {
    if ( a2 )
    {
      for ( i = 0; i < *v14; i += v7 )
      {
        v7 = fread(&a2[i], 1uLL, 1uLL, v5);
        if ( feof(v5) )
          break;
      }
      a2[i] = 0;
      *v14 = i;
      v9 = 0;
    }
    else
    {
      v3 = (char *)malloc(0x100uLL);
      v4 = -2147483639;
      if ( !v3 )
        return (unsigned int)v4;
LABEL_17:
      for ( j = 0; ; j += v11 )
      {
        v9 = 1;
        if ( j > 255 )
          break;
        v10 = &v3[j];
        v11 = fread(&v3[j], 1uLL, 1uLL, v5);
        if ( !v11 || feof(v5) )
        {
          v9 = 1;
          if ( !j )
            break;
          *v10 = 10;
LABEL_16:
          v3[j + 1] = 0;
          *v3 = 0;
          goto LABEL_17;
        }
        if ( *v10 == 10 )
          goto LABEL_16;
      }
    }
    v12 = pclose(v5);
    if ( (v12 & 0x7F) == 127 )
    {
      v4 = -12013;
    }
    else
    {
      v4 = -12012;
      if ( !(v12 & 0x7F) )
        v4 = HIBYTE(v12);
    }
    if ( v9 )
      free(v3);
  }
  return (unsigned int)v4;
}

//----- (0000000100012526) ----------------------------------------------------
__int64 __fastcall sub_100012526(unsigned int a1, char *a2, size_t a3)
{
  unsigned int v3; // er14@1
  __int64 result; // rax@11
  size_t v5; // [sp+10h] [bp-390h]@1
  int v6; // [sp+1Ch] [bp-384h]@1
  unsigned __int64 v7; // [sp+20h] [bp-380h]@6
  unsigned __int64 v8; // [sp+28h] [bp-378h]@6
  unsigned __int64 v9; // [sp+30h] [bp-370h]@10
  __int128 v10; // [sp+40h] [bp-360h]@1
  __int128 v11; // [sp+50h] [bp-350h]@1
  char v12; // [sp+60h] [bp-340h]@1
  __int128 v13; // [sp+70h] [bp-330h]@1
  __int128 v14; // [sp+80h] [bp-320h]@1
  __int64 v15; // [sp+90h] [bp-310h]@1
  __int16 v16; // [sp+98h] [bp-308h]@1
  __int128 v17; // [sp+A0h] [bp-300h]@1
  __int128 v18; // [sp+B0h] [bp-2F0h]@1
  __int64 v19; // [sp+C0h] [bp-2E0h]@1
  __int16 v20; // [sp+C8h] [bp-2D8h]@1
  __int128 v21; // [sp+D0h] [bp-2D0h]@1
  __int16 v22; // [sp+E0h] [bp-2C0h]@1
  char v23; // [sp+F0h] [bp-2B0h]@1
  char v24; // [sp+170h] [bp-230h]@1
  __int64 v25; // [sp+370h] [bp-30h]@1

  v5 = a3;
  v25 = *(_QWORD *)__stack_chk_guard_ptr;
  v21 = *(_OWORD *)"/sbin/ifconfig en";
  v22 = 110;
  v19 = 9018794859726795557LL;
  v18 = *(_OWORD *)"| awk '{printf(\"%s\",$2)}'";
  v17 = *(_OWORD *)" | grep \"inet \" | awk '{printf(\"%s\",$2)}'";
  v20 = 39;
  v3 = 0;
  v15 = 9018794859726795557LL;
  v14 = *(_OWORD *)"| awk '{printf(\"%s\",$2)}'";
  v13 = *(_OWORD *)" | grep \"ether\" | awk '{printf(\"%s\",$2)}'";
  v16 = 39;
  v11 = *(_OWORD *)" | grep \"status\"";
  v12 = 0;
  v10 = *(_OWORD *)" | grep \"media\"";
  __sprintf_chk(&v23, 0, 0x80uLL, "%s%d%s", &v21, a1, &v11);
  v6 = 512;
  if ( !(unsigned int)sub_1000123CF(&v23, &v24, &v6) )
  {
    v3 = 0;
    if ( strstr(&v24, "active") )
    {
      v3 = 0;
      if ( !strstr(&v24, "inactive") )
      {
        v3 = 0;
        __sprintf_chk(&v23, 0, 0x80uLL, "%s%d%s", &v21, a1, &v10);
        v6 = 512;
        sub_1000123CF(&v23, &v24, &v6);
        if ( strstr(&v24, "0baseT") )
        {
          v3 = 0;
          __sprintf_chk(&v23, 0, 0x80uLL, "%s%d%s", &v21, a1, &v17);
          v6 = 16;
          if ( !(unsigned int)sub_1000123CF(&v23, &v24, &v6) )
          {
            sscanf(&v24, "%d.%d.%d.%d", &v7, (char *)&v7 + 4, &v8, (char *)&v8 + 4);
            byte_10002A28B = v7;
            byte_10002A28A = v7 >> 32;
            unk_10002A289 = v8;
            byte_10002A288 = v8 >> 32;
          }
          __sprintf_chk(&v23, 0, 0x80uLL, "%s%d%s", &v21, a1, &v13);
          v6 = 512;
          if ( !(unsigned int)sub_1000123CF(&v23, &v24, &v6) )
          {
            if ( a2 )
              strncpy(a2, &v24, v5);
            sscanf(
              &v24,
              "%2x:%2x:%2x:%2x:%2x:%2x",
              &v7,
              (char *)&v7 + 4,
              &v8,
              (char *)&v8 + 4,
              &v9,
              (char *)&v9 + 4,
              v5);
            byte_10002A0D0 = v7;
            byte_10002A0D1 = v7 >> 32;
            byte_10002A0D2 = v8;
            byte_10002A0D3 = v8 >> 32;
            byte_10002A0D4 = v9;
            byte_10002A0D5 = v9 >> 32;
            v3 = *(_DWORD *)&byte_10002A288;
          }
        }
      }
    }
  }
  result = *(_QWORD *)__stack_chk_guard_ptr;
  if ( *(_QWORD *)__stack_chk_guard_ptr == v25 )
    result = v3;
  return result;
}
// 100021088: using guessed type void *__stack_chk_guard_ptr;
// 10002A0D0: using guessed type char byte_10002A0D0;
// 10002A0D1: using guessed type char byte_10002A0D1;
// 10002A0D2: using guessed type char byte_10002A0D2;
// 10002A0D3: using guessed type char byte_10002A0D3;
// 10002A0D4: using guessed type char byte_10002A0D4;
// 10002A0D5: using guessed type char byte_10002A0D5;
// 10002A288: using guessed type char byte_10002A288;
// 10002A28A: using guessed type char byte_10002A28A;
// 10002A28B: using guessed type char byte_10002A28B;

//----- (00000001000128F2) ----------------------------------------------------
__int64 __fastcall sub_1000128F2(_WORD *a1)
{
  __int64 result; // rax@1

  LOWORD(result) = __ROL2__(*a1, 8);
  return (unsigned __int16)result;
}

//----- (0000000100012902) ----------------------------------------------------
__int64 __fastcall sub_100012902(unsigned int *a1)
{
  return _byteswap_ulong(*a1);
}

//----- (000000010001290C) ----------------------------------------------------
__int64 __fastcall sub_10001290C(unsigned int a1, __int16 a2, _QWORD *a3)
{
  _QWORD *v3; // r13@1
  void *v4; // rax@1
  void *v5; // r15@1
  signed int v6; // ebx@1
  int v7; // eax@2
  __int16 v8; // r12@6
  unsigned __int32 v9; // er12@6
  __int16 v10; // ax@8
  unsigned __int32 v12; // [sp+0h] [bp-50h]@10
  char v13; // [sp+7h] [bp-49h]@8
  socklen_t v14; // [sp+8h] [bp-48h]@8
  int v15; // [sp+Ch] [bp-44h]@4
  struct sockaddr v16; // [sp+10h] [bp-40h]@6

  v3 = a3;
  v4 = malloc(0xCuLL);
  v5 = v4;
  v6 = -2147483639;
  if ( v4 )
  {
    *v3 = v4;
    v7 = socket(2, 2, 0);
    *((_DWORD *)v5 + 1) = v7;
    if ( v7 == -1 )
    {
      perror("create socket");
      v6 = -1;
    }
    else
    {
      v15 = 1;
      if ( setsockopt(v7, 0xFFFF, 32, &v15, 4u) == -1 )
      {
        perror("setsockopt");
        v6 = -2;
      }
      else
      {
        v16.sa_family = 2;
        v8 = __ROL2__(a2, 8);
        *(_WORD *)&v16.sa_data[0] = v8;
        v9 = _byteswap_ulong(a1);
        *(_DWORD *)&v16.sa_data[2] = v9;
        *(_QWORD *)&v16.sa_data[6] = 0LL;
        if ( bind(*((_DWORD *)v5 + 1), &v16, 0x10u) == -1 )
        {
          perror("socket bind");
          v6 = -3;
        }
        else
        {
          v14 = 16;
          v16 = 0LL;
          v16.sa_family = 2;
          getsockname(*((_DWORD *)v5 + 1), &v16, &v14);
          v6 = 0;
          v10 = __ROL2__(*(_WORD *)&v16.sa_data[0], 8);
          *((_WORD *)v5 + 4) = v10;
          *(_DWORD *)v5 = a1;
          v13 = 2;
          if ( setsockopt(*((_DWORD *)v5 + 1), 0, 10, &v13, 1u) == -1 )
          {
            perror("setsockopt");
            v6 = -4;
          }
          else
          {
            v12 = v9;
            if ( setsockopt(*((_DWORD *)v5 + 1), 0, 9, &v12, 4u) == -1 )
            {
              perror("setsockopt2");
              v6 = -5;
            }
          }
        }
      }
    }
  }
  return (unsigned int)v6;
}

//----- (0000000100012AAF) ----------------------------------------------------
void __fastcall sub_100012AAF(void *a1)
{
  if ( a1 )
  {
    close(*((_DWORD *)a1 + 1));
    free(a1);
  }
}

//----- (0000000100012ADA) ----------------------------------------------------
__int64 __fastcall sub_100012ADA(__int64 a1, unsigned int a2, __int16 a3, const void *a4, size_t a5)
{
  __int16 v5; // dx@1
  unsigned int v6; // ebx@1
  struct sockaddr v8; // [sp+8h] [bp-18h]@1

  v8.sa_family = 2;
  v5 = __ROL2__(a3, 8);
  *(_WORD *)&v8.sa_data[0] = v5;
  *(_DWORD *)&v8.sa_data[2] = _byteswap_ulong(a2);
  *(_QWORD *)&v8.sa_data[6] = 0LL;
  v6 = sendto(*(_DWORD *)(a1 + 4), a4, a5, 0, &v8, 0x10u);
  if ( v6 == -1 )
    perror("sendto error");
  return v6;
}

//----- (0000000100012B36) ----------------------------------------------------
ssize_t __fastcall sub_100012B36(__int64 a1, _DWORD *a2, _WORD *a3, void *a4, _WORD *a5, __int64 a6)
{
  _WORD *v6; // r13@1
  void *v7; // r12@1
  _WORD *v8; // r14@1
  __int64 v9; // rbx@1
  int v10; // edi@2
  unsigned __int64 v11; // rdx@2
  int v12; // ecx@2
  ssize_t result; // rax@2
  __int16 v14; // cx@7
  __int64 v15; // rcx@8
  __int128 v16; // [sp+0h] [bp-150h]@2
  __int128 v17; // [sp+10h] [bp-140h]@2
  __int128 v18; // [sp+20h] [bp-130h]@2
  __int128 v19; // [sp+30h] [bp-120h]@2
  __int128 v20; // [sp+40h] [bp-110h]@2
  __int128 v21; // [sp+50h] [bp-100h]@2
  __int128 v22; // [sp+60h] [bp-F0h]@2
  __int128 v23; // [sp+70h] [bp-E0h]@2
  __int128 v24; // [sp+80h] [bp-D0h]@2
  __int128 v25; // [sp+90h] [bp-C0h]@2
  __int128 v26; // [sp+A0h] [bp-B0h]@2
  __int128 v27; // [sp+B0h] [bp-A0h]@2
  __int128 v28; // [sp+C0h] [bp-90h]@2
  __int128 v29; // [sp+D0h] [bp-80h]@2
  __int128 v30; // [sp+E0h] [bp-70h]@2
  __int128 v31; // [sp+F0h] [bp-60h]@2
  struct sockaddr v32; // [sp+108h] [bp-48h]@3
  socklen_t v33; // [sp+11Ch] [bp-34h]@1
  __int64 v34; // [sp+120h] [bp-30h]@1

  v6 = a5;
  v7 = a4;
  v8 = a3;
  v9 = a1;
  v34 = *(_QWORD *)__stack_chk_guard_ptr;
  v33 = 16;
  if ( !a6
    || (v23 = 0LL,
        v22 = 0LL,
        v21 = 0LL,
        v20 = 0LL,
        v19 = 0LL,
        v18 = 0LL,
        v17 = 0LL,
        v16 = 0LL,
        v10 = *(_DWORD *)(a1 + 4),
        v11 = ((unsigned __int64)*(_DWORD *)(v9 + 4) >> 3) & 0x1FFFFFFFFFFFFFFCLL,
        *(_DWORD *)((char *)&v16 + v11) |= 1 << *(_DWORD *)(v9 + 4),
        v31 = v23,
        v30 = v22,
        v29 = v21,
        v28 = v20,
        v27 = v19,
        v26 = v18,
        v25 = v17,
        v24 = v16,
        v12 = select_1050((unsigned int)(v10 + 1), &v16, 0LL, 0LL, a6),
        result = 0LL,
        v23 = v31,
        v22 = v30,
        v21 = v29,
        v20 = v28,
        v19 = v27,
        v18 = v26,
        v17 = v25,
        v16 = v24,
        v12 > 0) )
  {
    result = recvfrom(*(_DWORD *)(v9 + 4), v7, *v6, 0, &v32, &v33);
    if ( (signed int)result > 0 )
    {
      *v6 = result;
      if ( a2 )
        *a2 = _byteswap_ulong(*(unsigned int *)&v32.sa_data[2]);
      if ( v8 )
      {
        v14 = __ROL2__(*(_WORD *)&v32.sa_data[0], 8);
        *v8 = v14;
      }
    }
  }
  v15 = *(_QWORD *)__stack_chk_guard_ptr;
  return result;
}
// 100015E5A: using guessed type int __fastcall select_1050(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 100021088: using guessed type void *__stack_chk_guard_ptr;

//----- (0000000100012D31) ----------------------------------------------------
int __fastcall sub_100012D31(__int64 a1, int a2, char a3)
{
  char v3; // bl@1
  int result; // eax@1
  char v5; // [sp+Fh] [bp-21h]@2
  int v6; // [sp+10h] [bp-20h]@1
  unsigned __int32 v7; // [sp+14h] [bp-1Ch]@1
  int v8; // [sp+1Ch] [bp-14h]@1

  v3 = a3;
  v8 = a2;
  v6 = a2;
  v7 = _byteswap_ulong(*(unsigned int *)&byte_10002A288);
  result = setsockopt(*(_DWORD *)(a1 + 4), 0, 12, &v6, 8u);
  if ( !result )
  {
    v5 = v3;
    result = setsockopt(*(_DWORD *)(a1 + 4), 0, 10, &v5, 1u);
  }
  return result;
}
// 10002A288: using guessed type char byte_10002A288;

//----- (0000000100012D99) ----------------------------------------------------
int __fastcall sub_100012D99(__int64 a1, unsigned int a2)
{
  unsigned __int32 v3; // [sp+8h] [bp-8h]@1
  unsigned __int32 v4; // [sp+Ch] [bp-4h]@1

  v3 = _byteswap_ulong(a2);
  v4 = _byteswap_ulong(*(_DWORD *)a1);
  return setsockopt(*(_DWORD *)(a1 + 4), 0, 13, &v3, 8u);
}

//----- (0000000100012DCC) ----------------------------------------------------
int __fastcall sub_100012DCC(__int64 a1)
{
  return fcntl(*(_DWORD *)(a1 + 4), 4, 128LL);
}

//----- (0000000100012DE5) ----------------------------------------------------
int __fastcall sub_100012DE5(__int64 a1)
{
  return fcntl(*(_DWORD *)(a1 + 4), 4, 4LL);
}

//----- (0000000100012DFE) ----------------------------------------------------
__int64 __fastcall sub_100012DFE(__int64 a1)
{
  return *(_DWORD *)a1;
}

//----- (0000000100012E06) ----------------------------------------------------
__int64 __fastcall sub_100012E06(__int64 a1)
{
  return *(_WORD *)(a1 + 8);
}

//----- (0000000100012E10) ----------------------------------------------------
void *__fastcall sub_100012E10(void *a1)
{
  void *result; // rax@1
  void *v2; // r14@2
  int v3; // eax@2
  __int64 v4; // rcx@3
  __int64 v5; // [sp+0h] [bp-B0h]@0
  __int64 v6; // [sp+8h] [bp-A8h]@0
  __int64 v7; // [sp+10h] [bp-A0h]@0
  __int64 v8; // [sp+18h] [bp-98h]@0
  __int64 v9; // [sp+20h] [bp-90h]@0
  __int64 v10; // [sp+28h] [bp-88h]@0
  __int64 v11; // [sp+30h] [bp-80h]@0
  __int64 v12; // [sp+38h] [bp-78h]@0
  __int64 v13; // [sp+40h] [bp-70h]@0
  __int64 v14; // [sp+48h] [bp-68h]@0
  __int64 v15; // [sp+50h] [bp-60h]@0
  __int64 v16; // [sp+58h] [bp-58h]@0
  __int64 v17; // [sp+60h] [bp-50h]@0
  unsigned __int64 v18; // [sp+70h] [bp-40h]@2
  unsigned __int64 v19; // [sp+78h] [bp-38h]@2
  __int64 v20; // [sp+80h] [bp-30h]@1

  v20 = *(_QWORD *)__stack_chk_guard_ptr;
  result = 0LL;
  if ( a1 )
  {
    v2 = objc_msgSend_ptr(a1, selRef_cStringUsingEncoding_, 4LL);
    v3 = msgRef_length__objc_msgSend_fixup(a1, &msgRef_length__objc_msgSend_fixup);
    CC_MD5(v2, (unsigned int)v3, &v18);
    LODWORD(v17) = v19 >> 56;
    LODWORD(v13) = BYTE3(v19);
    LODWORD(v9) = v18 >> 56;
    LODWORD(v5) = BYTE3(v18);
    LODWORD(v10) = (unsigned __int8)v19;
    LODWORD(v16) = (unsigned __int8)(v19 >> 48);
    LODWORD(v15) = (unsigned __int8)(v19 >> 40);
    LODWORD(v14) = (unsigned __int8)(v19 >> 32);
    LODWORD(v12) = (unsigned __int8)((unsigned int)v19 >> 16);
    LODWORD(v11) = BYTE1(v19);
    LODWORD(v8) = (unsigned __int8)(v18 >> 48);
    LODWORD(v7) = (unsigned __int8)(v18 >> 40);
    LODWORD(v6) = (unsigned __int8)(v18 >> 32);
    result = objc_msgSend_ptr(
               classRef_NSString,
               selRef_stringWithFormat_,
               &cfstr_02x02x02x02x02,
               (unsigned __int8)v18,
               BYTE1(v18),
               (unsigned __int8)((unsigned int)v18 >> 16),
               v5,
               v6,
               v7,
               v8,
               v9,
               v10,
               v11,
               v12,
               v13,
               v14,
               v15,
               v16,
               v17);
  }
  v4 = *(_QWORD *)__stack_chk_guard_ptr;
  return result;
}
// 100015D5E: using guessed type int __fastcall CC_MD5(_QWORD, _QWORD, _QWORD);
// 100021088: using guessed type void *__stack_chk_guard_ptr;
// 1000263A8: using guessed type char *selRef_stringWithFormat_;
// 100027100: using guessed type char *selRef_cStringUsingEncoding_;
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000273C0: using guessed type void *classRef_NSString;
// 100029CE8: using guessed type __CFString cfstr_02x02x02x02x02;

//----- (0000000100012F74) ----------------------------------------------------
void *__fastcall sub_100012F74(void *a1, void *a2)
{
  void *v2; // rbx@1
  __int64 v3; // rax@1
  void *(*v4)(void *, const char *, ...); // r14@2
  void *v5; // rax@2
  void *v6; // rbx@2
  void *v7; // r13@2
  void *(*v8)(void *, const char *, ...); // r15@3
  void *v9; // r14@4
  void *v10; // rax@4
  __int64 v11; // rdx@4
  void *v12; // rax@5
  void *v14; // [sp+10h] [bp-30h]@2

  v2 = a1;
  LODWORD(v3) = msgRef_length__objc_msgSend_fixup(a2, &msgRef_length__objc_msgSend_fixup);
  if ( v3 )
  {
    v4 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v14 = objc_msgSend_ptr(classRef_NSMutableString, selRef_stringWithCapacity_, 1LL);
    v5 = v4(a1, selRef_componentsSeparatedByString_, &stru_100028FA8);
    v6 = v4(v5, selRef_objectEnumerator);
    v4(v14, selRef_setString_, &stru_100028108);
    v7 = v4(v6, selRef_nextObject);
    if ( v7 )
    {
      v8 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
      do
      {
        v9 = v8(v7, selRef_lowercaseString);
        v10 = v8(a2, selRef_lowercaseString);
        v8(v9, selRef_rangeOfString_, v10);
        if ( v11 )
        {
          v12 = v8(classRef_NSString, selRef_stringWithFormat_, &cfstr___1, v7);
          v8(v14, selRef_appendString_, v12);
        }
        v7 = objc_msgSend_ptr(v6, selRef_nextObject);
      }
      while ( v7 );
    }
    v2 = objc_msgSend_ptr(classRef_NSString, selRef_stringWithString_);
  }
  return v2;
}
// 1000263A8: using guessed type char *selRef_stringWithFormat_;
// 100026630: using guessed type char *selRef_componentsSeparatedByString_;
// 100026D08: using guessed type char *selRef_setString_;
// 100027048: using guessed type char *selRef_stringWithString_;
// 1000270D0: using guessed type char *selRef_objectEnumerator;
// 1000270D8: using guessed type char *selRef_nextObject;
// 100027108: using guessed type char *selRef_stringWithCapacity_;
// 100027110: using guessed type char *selRef_lowercaseString;
// 100027118: using guessed type char *selRef_rangeOfString_;
// 100027120: using guessed type char *selRef_appendString_;
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000273C0: using guessed type void *classRef_NSString;
// 100027500: using guessed type void *classRef_NSMutableString;
// 100028FA8: using guessed type __CFString stru_100028FA8;
// 100029D08: using guessed type __CFString cfstr___1;

//----- (00000001000130C5) ----------------------------------------------------
void *__fastcall sub_1000130C5(void *a1)
{
  void *(*v1)(void *, const char *, ...); // r15@1
  void *v2; // rbx@1
  void *v3; // rax@1
  void *v4; // r13@1
  void *v5; // rax@2
  void *v6; // rax@7
  void *v7; // rbx@7
  __int64 v8; // rax@7
  void *v9; // rax@8
  void *v10; // rax@9
  void *v11; // r12@9
  __int64 v12; // rax@10
  void *result; // rax@11
  __int64 v14; // rcx@11
  void *v15; // [sp+8h] [bp-438h]@1
  char v16; // [sp+10h] [bp-430h]@2
  __int64 v17; // [sp+410h] [bp-30h]@1

  v17 = *(_QWORD *)__stack_chk_guard_ptr;
  v1 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v2 = objc_msgSend_ptr(classRef_NSMutableString, selRef_stringWithCapacity_, 1LL);
  v3 = v1(a1, selRef_componentsSeparatedByString_, &stru_100028FA8);
  v15 = v1(v3, selRef_objectEnumerator);
  v4 = v2;
  v1(v2, selRef_setString_, &stru_100028108);
  while ( 1 )
  {
    v10 = objc_msgSend_ptr(v15, selRef_nextObject);
    v11 = v10;
    if ( !v10 )
      break;
    LODWORD(v12) = msgRef_length__objc_msgSend_fixup(v10, &msgRef_length__objc_msgSend_fixup);
    if ( !v12 )
      break;
    __bzero(&v16, 1024LL);
    v5 = v1(classRef_NSString, selRef_stringWithFormat_, &cfstr___1, v11);
    if ( (unsigned __int8)v1(v5, selRef_getCString_maxLength_encoding_, &v16, 1024LL, 4LL) )
    {
      if ( v16 )
      {
        sub_100014C65(&v16);
        if ( v16 )
        {
          sub_100014BD0(&v16);
          if ( v16 )
            sub_100014ABF(&v16);
        }
      }
      v6 = objc_msgSend_ptr(classRef_NSString, selRef_stringWithCString_encoding_, &v16, 4LL);
      v7 = v6;
      LODWORD(v8) = msgRef_length__objc_msgSend_fixup(v6, &msgRef_length__objc_msgSend_fixup);
      if ( v8 )
      {
        v9 = v1(classRef_NSString, selRef_stringWithFormat_, &cfstr__, v7);
        v1(v4, selRef_appendString_, v9);
      }
    }
  }
  result = objc_msgSend_ptr(classRef_NSString, selRef_stringWithString_, v4);
  v14 = *(_QWORD *)__stack_chk_guard_ptr;
  return result;
}
// 100015D8E: using guessed type int __fastcall __bzero(_QWORD, _QWORD);
// 100021088: using guessed type void *__stack_chk_guard_ptr;
// 1000263A8: using guessed type char *selRef_stringWithFormat_;
// 100026630: using guessed type char *selRef_componentsSeparatedByString_;
// 100026D08: using guessed type char *selRef_setString_;
// 100027048: using guessed type char *selRef_stringWithString_;
// 1000270D0: using guessed type char *selRef_objectEnumerator;
// 1000270D8: using guessed type char *selRef_nextObject;
// 100027108: using guessed type char *selRef_stringWithCapacity_;
// 100027120: using guessed type char *selRef_appendString_;
// 100027128: using guessed type char *selRef_getCString_maxLength_encoding_;
// 100027130: using guessed type char *selRef_stringWithCString_encoding_;
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000273C0: using guessed type void *classRef_NSString;
// 100027500: using guessed type void *classRef_NSMutableString;
// 100028F28: using guessed type __CFString cfstr__;
// 100028FA8: using guessed type __CFString stru_100028FA8;
// 100029D08: using guessed type __CFString cfstr___1;

//----- (00000001000132BE) ----------------------------------------------------
// GMLogEntry - (id)init
id __cdecl -[GMLogEntry init](struct GMLogEntry *self, SEL a2)
{
  struct objc_object *v2; // rbx@1
  void *v3; // rax@2
  void *v4; // rax@2
  void *v5; // rax@2
  void *v6; // rax@2
  void *v7; // rax@2
  void *v8; // rax@2
  void *v9; // rax@2
  void *v10; // rax@2
  struct GMLogEntry *v12; // [sp+8h] [bp-28h]@1
  void *v13; // [sp+10h] [bp-20h]@1

  v12 = self;
  v13 = classRef_GMLogEntry_0;
  v2 = (struct objc_object *)objc_msgSendSuper2(&v12, selRef_init);
  if ( v2 )
  {
    LODWORD(v3) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v2[1].isa = v3;
    v4 = objc_msgSend_ptr(classRef_NSNumber, selRef_numberWithInteger_, 0LL);
    LODWORD(v5) = msgRef_retain__objc_msgSend_fixup(v4, &msgRef_retain__objc_msgSend_fixup);
    v2[2].isa = v5;
    LODWORD(v6) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v2[3].isa = v6;
    LODWORD(v7) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v2[4].isa = v7;
    LODWORD(v8) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v2[5].isa = v8;
    LODWORD(v9) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v2[6].isa = v9;
    LODWORD(v10) = msgRef_retain__objc_msgSend_fixup(&cfstr_NotAvailable, &msgRef_retain__objc_msgSend_fixup);
    v2[7].isa = v10;
  }
  return v2;
}
// 1000262B8: using guessed type char *selRef_init;
// 1000265C0: using guessed type char *selRef_numberWithInteger_;
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000273D8: using guessed type void *classRef_NSNumber;
// 100027570: using guessed type void *classRef_GMLogEntry_0;

//----- (00000001000133CD) ----------------------------------------------------
// GMLogEntry - (id)initWithLogDict:(id) 
id __cdecl -[GMLogEntry initWithLogDict:](struct GMLogEntry *self, SEL a2, id a3)
{
  id v3; // rbx@1
  void *v4; // rax@1
  void *v5; // r12@1
  __int64 v6; // rax@2
  __int64 v7; // ST08_8@2
  __int64 v8; // rax@2
  __int64 v9; // rax@2
  __int64 v10; // rax@2
  __int64 v11; // r14@2
  __int64 v12; // rax@2
  __int64 v13; // r15@2
  __int64 v14; // rax@2
  __int64 v15; // rax@2
  __int64 v16; // rbx@2
  __int64 v18; // [sp+10h] [bp-40h]@2
  __int64 v19; // [sp+18h] [bp-38h]@2
  __int64 v20; // [sp+20h] [bp-30h]@2

  v3 = a3;
  LODWORD(v4) = msgRef_alloc__objc_msgSend_fixup(classRef_GMLogEntry, &msgRef_alloc__objc_msgSend_fixup);
  v5 = objc_msgSend_ptr(v4, selRef_init);
  if ( v5 )
  {
    LODWORD(v6) = msgRef_objectForKey___objc_msgSend_fixup(
                    v3,
                    &msgRef_objectForKey___objc_msgSend_fixup,
                    &cfstr_Logpath_1);
    v7 = v6;
    LODWORD(v8) = msgRef_objectForKey___objc_msgSend_fixup(
                    v3,
                    &msgRef_objectForKey___objc_msgSend_fixup,
                    &cfstr_Serverhostna_2);
    v19 = v8;
    LODWORD(v9) = msgRef_objectForKey___objc_msgSend_fixup(
                    v3,
                    &msgRef_objectForKey___objc_msgSend_fixup,
                    &cfstr_Serverport_1);
    v20 = v9;
    LODWORD(v10) = msgRef_objectForKey___objc_msgSend_fixup(
                     v3,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Testdate_1);
    v11 = v10;
    LODWORD(v12) = msgRef_objectForKey___objc_msgSend_fixup(
                     v3,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Toolname_1);
    v13 = v12;
    LODWORD(v14) = msgRef_objectForKey___objc_msgSend_fixup(
                     v3,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Toolversion_1);
    v18 = v14;
    LODWORD(v15) = msgRef_objectForKey___objc_msgSend_fixup(
                     v3,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_Opcode_1);
    v16 = v15;
    if ( v7 )
      objc_msgSend_ptr(v5, selRef_setLogPath_);
    if ( v11 )
      objc_msgSend_ptr(v5, selRef_setTestDate_, v11);
    if ( v13 )
      objc_msgSend_ptr(v5, selRef_setToolName_, v13);
    if ( v18 )
      objc_msgSend_ptr(v5, selRef_setToolVersion_);
    if ( v16 )
      objc_msgSend_ptr(v5, selRef_setOpCode_, v16);
    if ( v19 )
      objc_msgSend_ptr(v5, selRef_setServerHostName_);
    if ( v20 )
      objc_msgSend_ptr(v5, selRef_setServerPort_);
  }
  return (id)v5;
}
// 1000262B8: using guessed type char *selRef_init;
// 100026F18: using guessed type char *selRef_setLogPath_;
// 100027138: using guessed type char *selRef_setTestDate_;
// 100027140: using guessed type char *selRef_setToolName_;
// 100027148: using guessed type char *selRef_setToolVersion_;
// 100027150: using guessed type char *selRef_setOpCode_;
// 100027158: using guessed type char *selRef_setServerHostName_;
// 100027160: using guessed type char *selRef_setServerPort_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (0000000100013574) ----------------------------------------------------
// GMLogEntry - (void)dealloc
void __cdecl -[GMLogEntry dealloc](struct GMLogEntry *self, SEL a2)
{
  __int64 v2; // [sp+0h] [bp-20h]@1
  void *v3; // [sp+8h] [bp-18h]@1

  msgRef_release__objc_msgSend_fixup(self->serverHostName, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->serverPort, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->logPath, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->testDate, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->toolName, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->toolVersion, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->opCode, &msgRef_release__objc_msgSend_fixup);
  v3 = classRef_GMLogEntry_0;
  objc_msgSendSuper2(&v2, selRef_dealloc, self, classRef_GMLogEntry_0);
}
// 1000262D8: using guessed type char *selRef_dealloc;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027570: using guessed type void *classRef_GMLogEntry_0;

//----- (000000010001363D) ----------------------------------------------------
// GMLogEntry - (id)serverHostName
id __cdecl -[GMLogEntry serverHostName](struct GMLogEntry *self, SEL a2)
{
  return (id)self->serverHostName;
}

//----- (000000010001364E) ----------------------------------------------------
// GMLogEntry - (void)setServerHostName:(id) 
void __cdecl -[GMLogEntry setServerHostName:](struct GMLogEntry *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->serverHostName, &msgRef_release__objc_msgSend_fixup);
  self->serverHostName = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100013693) ----------------------------------------------------
// GMLogEntry - (id)serverPort
id __cdecl -[GMLogEntry serverPort](struct GMLogEntry *self, SEL a2)
{
  return (id)self->serverPort;
}

//----- (00000001000136A4) ----------------------------------------------------
// GMLogEntry - (void)setServerPort:(id) 
void __cdecl -[GMLogEntry setServerPort:](struct GMLogEntry *self, SEL a2, id a3)
{
  struct NSNumber *v3; // r14@1

  v3 = (struct NSNumber *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->serverPort, &msgRef_release__objc_msgSend_fixup);
  self->serverPort = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (00000001000136E9) ----------------------------------------------------
// GMLogEntry - (id)logPath
id __cdecl -[GMLogEntry logPath](struct GMLogEntry *self, SEL a2)
{
  return (id)self->logPath;
}

//----- (00000001000136FA) ----------------------------------------------------
// GMLogEntry - (void)setLogPath:(id) 
void __cdecl -[GMLogEntry setLogPath:](struct GMLogEntry *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->logPath, &msgRef_release__objc_msgSend_fixup);
  self->logPath = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010001373F) ----------------------------------------------------
// GMLogEntry - (id)testDate
id __cdecl -[GMLogEntry testDate](struct GMLogEntry *self, SEL a2)
{
  return (id)self->testDate;
}

//----- (0000000100013750) ----------------------------------------------------
// GMLogEntry - (void)setTestDate:(id) 
void __cdecl -[GMLogEntry setTestDate:](struct GMLogEntry *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->testDate, &msgRef_release__objc_msgSend_fixup);
  self->testDate = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100013795) ----------------------------------------------------
// GMLogEntry - (id)toolName
id __cdecl -[GMLogEntry toolName](struct GMLogEntry *self, SEL a2)
{
  return (id)self->toolName;
}

//----- (00000001000137A6) ----------------------------------------------------
// GMLogEntry - (void)setToolName:(id) 
void __cdecl -[GMLogEntry setToolName:](struct GMLogEntry *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->toolName, &msgRef_release__objc_msgSend_fixup);
  self->toolName = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (00000001000137EB) ----------------------------------------------------
// GMLogEntry - (id)toolVersion
id __cdecl -[GMLogEntry toolVersion](struct GMLogEntry *self, SEL a2)
{
  return (id)self->toolVersion;
}

//----- (00000001000137FC) ----------------------------------------------------
// GMLogEntry - (void)setToolVersion:(id) 
void __cdecl -[GMLogEntry setToolVersion:](struct GMLogEntry *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->toolVersion, &msgRef_release__objc_msgSend_fixup);
  self->toolVersion = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100013841) ----------------------------------------------------
// GMLogEntry - (id)opCode
id __cdecl -[GMLogEntry opCode](struct GMLogEntry *self, SEL a2)
{
  return (id)self->opCode;
}

//----- (0000000100013852) ----------------------------------------------------
// GMLogEntry - (void)setOpCode:(id) 
void __cdecl -[GMLogEntry setOpCode:](struct GMLogEntry *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->opCode, &msgRef_release__objc_msgSend_fixup);
  self->opCode = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100013897) ----------------------------------------------------
// GMLogEntry - (int64_t)sortByDateDescending:(id) 
int64_t __cdecl -[GMLogEntry sortByDateDescending:](struct GMLogEntry *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  id v4; // r14@1
  void *(*v5)(void *, const char *, ...); // r15@1
  void *v6; // rbx@1
  void *v7; // rax@1

  v4 = a3;
  v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v6 = objc_msgSend_ptr(self, selRef_testDate, v3);
  v7 = v5(v4, selRef_testDate);
  return -(signed __int64)v5(v6, selRef_compare_, v7);
}
// 100026DC0: using guessed type char *selRef_testDate;
// 100027168: using guessed type char *selRef_compare_;

//----- (00000001000138E3) ----------------------------------------------------
__int64 sub_1000138E3()
{
  void *v0; // rax@1
  void *v1; // r14@1
  int v2; // ebx@1
  void *v3; // rax@3
  unsigned int v4; // eax@5
  unsigned int v5; // eax@6
  unsigned int v6; // eax@6
  __int64 result; // rax@15
  int v8; // [sp+10h] [bp-150h]@6
  __int128 *v9; // [sp+18h] [bp-148h]@6
  __int128 v10; // [sp+20h] [bp-140h]@6
  __int128 v11; // [sp+30h] [bp-130h]@6
  __int128 v12; // [sp+40h] [bp-120h]@6
  int v13; // [sp+50h] [bp-110h]@6
  __int128 *v14; // [sp+58h] [bp-108h]@6
  __int128 v15; // [sp+60h] [bp-100h]@6
  __int128 v16; // [sp+70h] [bp-F0h]@6
  __int128 v17; // [sp+80h] [bp-E0h]@6
  int v18; // [sp+90h] [bp-D0h]@6
  __int128 *v19; // [sp+98h] [bp-C8h]@6
  __int128 v20; // [sp+A0h] [bp-C0h]@6
  __int128 v21; // [sp+B0h] [bp-B0h]@6
  __int128 v22; // [sp+C0h] [bp-A0h]@6
  int v23; // [sp+D0h] [bp-90h]@6
  __int128 *v24; // [sp+D8h] [bp-88h]@6
  __int128 v25; // [sp+E0h] [bp-80h]@6
  __int128 v26; // [sp+F0h] [bp-70h]@6
  __int128 v27; // [sp+100h] [bp-60h]@6
  __int64 v28; // [sp+110h] [bp-50h]@4
  __int64 v29; // [sp+118h] [bp-48h]@1
  __int64 v30; // [sp+120h] [bp-40h]@1
  __int64 v31; // [sp+128h] [bp-38h]@1
  char v32[4]; // [sp+130h] [bp-30h]@1
  __int16 v33; // [sp+134h] [bp-2Ch]@1
  char v34[8]; // [sp+138h] [bp-28h]@1
  int v35; // [sp+140h] [bp-20h]@1
  char v36; // [sp+144h] [bp-1Ch]@1
  __int64 v37; // [sp+148h] [bp-18h]@1

  v37 = *(_QWORD *)__stack_chk_guard_ptr;
  LODWORD(v0) = msgRef_alloc__objc_msgSend_fixup(classRef_NSAutoreleasePool, &msgRef_alloc__objc_msgSend_fixup);
  v1 = objc_msgSend_ptr(v0, selRef_init);
  v33 = 101;
  *(_DWORD *)v32 = 1819308129;
  *(_QWORD *)v34 = 7233118767203968097LL;
  v36 = 0;
  v35 = 909456498;
  v31 = 0LL;
  v30 = 0LL;
  v29 = 0LL;
  v2 = SecTrustedApplicationCreateFromPath("/usr/local/libexec/gw_controld", &v30);
  if ( !v2 )
  {
    v2 = SecTrustedApplicationCreateFromPath("/usr/local/libexec/gw_datad", &v29);
    if ( !v2 )
    {
      v3 = objc_msgSend_ptr(classRef_NSArray, selRef_arrayWithObjects_, v30, v29, 0LL);
      v2 = 0;
      if ( v3 )
      {
        v28 = 0LL;
        v2 = SecAccessCreate(&cfstr_Applediagnosti, v3, &v28);
        if ( !v2 )
        {
          v4 = strlen(v34);
          v2 = SecKeychainCreate("/Library/Keychains/AppleServiceToolkit.keychain", v4, v34, 0LL, v28, &v31);
          if ( !v2 )
          {
            v27 = xmmword_100029EA0;
            v26 = xmmword_100029E90;
            v25 = xmmword_100029E80;
            v23 = 3;
            v24 = &v25;
            v5 = strlen(v32);
            SecKeychainItemCreateFromContent(1734700656LL, &v23, v5, v32, v31, v28);
            v22 = xmmword_100029ED0;
            v21 = xmmword_100029EC0;
            v20 = xmmword_100029EB0;
            v18 = 3;
            v19 = &v20;
            v6 = strlen(v32);
            SecKeychainItemCreateFromContent(1734700656LL, &v18, v6, v32, v31, v28);
            v17 = xmmword_100029F00;
            v16 = xmmword_100029EF0;
            v15 = xmmword_100029EE0;
            v13 = 3;
            v14 = &v15;
            SecKeychainItemCreateFromContent(1734700656LL, &v13, 4LL, "none", v31, v28);
            v12 = xmmword_100029F30;
            v11 = xmmword_100029F20;
            v10 = xmmword_100029F10;
            v8 = 3;
            v9 = &v10;
            v2 = SecKeychainItemCreateFromContent(1734700656LL, &v8, 2LL, "no", v31, v28);
          }
        }
        if ( v28 )
          CFRelease(v28);
      }
    }
  }
  if ( v30 )
    CFRelease(v30);
  if ( v29 )
    CFRelease(v29);
  if ( v31 )
    CFRelease(v31);
  msgRef_release__objc_msgSend_fixup(v1, &msgRef_release__objc_msgSend_fixup);
  result = *(_QWORD *)__stack_chk_guard_ptr;
  if ( *(_QWORD *)__stack_chk_guard_ptr == v37 )
    result = (unsigned int)v2;
  return result;
}
// 100015D10: using guessed type int __fastcall SecAccessCreate(_QWORD, _QWORD, _QWORD);
// 100015D16: using guessed type int __fastcall SecKeychainCreate(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 100015D22: using guessed type int __fastcall SecKeychainItemCreateFromContent(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 100015D46: using guessed type int __fastcall SecTrustedApplicationCreateFromPath(_QWORD, _QWORD);
// 100015EF0: using guessed type int __cdecl CFRelease(_QWORD);
// 100021088: using guessed type void *__stack_chk_guard_ptr;
// 1000262B8: using guessed type char *selRef_init;
// 100026778: using guessed type char *selRef_arrayWithObjects_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027410: using guessed type void *classRef_NSArray;
// 100029DC8: using guessed type __CFString cfstr_Applediagnosti;
// 100029E80: using guessed type __int128 xmmword_100029E80;
// 100029E90: using guessed type __int128 xmmword_100029E90;
// 100029EA0: using guessed type __int128 xmmword_100029EA0;
// 100029EB0: using guessed type __int128 xmmword_100029EB0;
// 100029EC0: using guessed type __int128 xmmword_100029EC0;
// 100029ED0: using guessed type __int128 xmmword_100029ED0;
// 100029EE0: using guessed type __int128 xmmword_100029EE0;
// 100029EF0: using guessed type __int128 xmmword_100029EF0;
// 100029F00: using guessed type __int128 xmmword_100029F00;
// 100029F10: using guessed type __int128 xmmword_100029F10;
// 100029F20: using guessed type __int128 xmmword_100029F20;
// 100029F30: using guessed type __int128 xmmword_100029F30;

//----- (0000000100013C3D) ----------------------------------------------------
__int64 __fastcall sub_100013C3D(char *a1, char *a2, unsigned int a3)
{
  unsigned int v3; // er14@1
  char *v4; // r12@1
  int v5; // ebx@1
  __int64 v6; // rbx@4
  unsigned int v7; // eax@4
  __int64 *v8; // rsi@4
  int v9; // eax@4
  __int64 v10; // rbx@8
  size_t v11; // rbx@11
  __int64 result; // rax@20
  char v13[12]; // [sp+1Ch] [bp-54h]@1
  __int64 v14; // [sp+28h] [bp-48h]@1
  char v15[8]; // [sp+30h] [bp-40h]@1
  int v16; // [sp+38h] [bp-38h]@1
  char v17; // [sp+3Ch] [bp-34h]@1
  __int64 v18; // [sp+40h] [bp-30h]@1

  v3 = a3;
  v4 = a2;
  v18 = *(_QWORD *)__stack_chk_guard_ptr;
  *(_QWORD *)v15 = 7233118767203968097LL;
  v17 = 0;
  v16 = 909456498;
  v14 = 0LL;
  *(_QWORD *)&v13[4] = 0LL;
  *(_DWORD *)v13 = 0;
  *a2 = 0;
  v5 = SecKeychainOpen("/Library/Keychains/AppleServiceToolkit.keychain", &v14);
  if ( !v5 )
  {
    v6 = v14;
    v7 = strlen(v15);
    v8 = (__int64 *)v7;
    v9 = SecKeychainUnlock(v6, v7, v15, 1LL);
    if ( v9 == -25294 )
    {
      if ( (unsigned int)sub_1000138E3() )
      {
LABEL_9:
        v5 = SecKeychainLock(v14, v8);
        goto LABEL_10;
      }
      v8 = &v14;
      v9 = SecKeychainOpen("/Library/Keychains/AppleServiceToolkit.keychain", &v14);
    }
    if ( !v9 )
    {
      v10 = v14;
      v8 = (__int64 *)(unsigned int)strlen(a1);
      SecKeychainFindGenericPassword(v10, v8, a1, 4LL, "root", v13);
    }
    goto LABEL_9;
  }
  if ( v5 == -25294 )
  {
    sub_1000138E3();
    v5 = -25294;
    goto LABEL_16;
  }
LABEL_10:
  if ( !v5 )
  {
    v11 = *(unsigned int *)v13;
    if ( *(_DWORD *)v13 < v3 && strcmp(v4, "none") )
    {
      memcpy(v4, *(const void **)&v13[4], v11);
      v4[*(unsigned int *)v13] = 0;
    }
    v5 = 0;
    if ( !*v4 )
      v5 = -1;
  }
LABEL_16:
  if ( v14 )
    CFRelease(v14);
  if ( *(_QWORD *)&v13[4] )
    SecKeychainItemFreeContent(0LL);
  result = *(_QWORD *)__stack_chk_guard_ptr;
  if ( *(_QWORD *)__stack_chk_guard_ptr == v18 )
    result = (unsigned int)v5;
  return result;
}
// 100015D1C: using guessed type int __fastcall SecKeychainFindGenericPassword(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 100015D28: using guessed type int __fastcall SecKeychainItemFreeContent(_QWORD);
// 100015D34: using guessed type int __fastcall SecKeychainLock(_QWORD, _QWORD);
// 100015D3A: using guessed type int __fastcall SecKeychainOpen(_QWORD, _QWORD);
// 100015D40: using guessed type int __fastcall SecKeychainUnlock(_QWORD, _QWORD, _QWORD, _QWORD);
// 100015EF0: using guessed type int __cdecl CFRelease(_QWORD);
// 100021088: using guessed type void *__stack_chk_guard_ptr;

//----- (0000000100013DDE) ----------------------------------------------------
__int64 __fastcall sub_100013DDE(char *a1, char *a2)
{
  int v2; // ebx@1
  __int64 v3; // rbx@4
  unsigned int v4; // eax@4
  __int64 v5; // rbx@8
  unsigned int v6; // eax@8
  __int64 v7; // rbx@9
  unsigned int v8; // eax@9
  __int64 result; // rax@14
  __int64 v10; // [sp+18h] [bp-58h]@1
  __int64 v11; // [sp+20h] [bp-50h]@1
  int v12; // [sp+2Ch] [bp-44h]@1
  __int64 v13; // [sp+30h] [bp-40h]@10
  char v14[8]; // [sp+38h] [bp-38h]@1
  int v15; // [sp+40h] [bp-30h]@1
  char v16; // [sp+44h] [bp-2Ch]@1
  __int64 v17; // [sp+48h] [bp-28h]@1

  v17 = *(_QWORD *)__stack_chk_guard_ptr;
  v12 = 0;
  *(_QWORD *)v14 = 7233118767203968097LL;
  v16 = 0;
  v15 = 909456498;
  v11 = 0LL;
  v10 = 0LL;
  v2 = SecKeychainOpen("/Library/Keychains/AppleServiceToolkit.keychain", &v11);
  if ( v2 )
  {
    if ( v2 == -25294 )
    {
      sub_1000138E3();
      v2 = -25294;
    }
    goto LABEL_12;
  }
  v3 = v11;
  v4 = strlen(v14);
  v2 = SecKeychainUnlock(v3, v4, v14, 1LL);
  if ( v2 != -25294 )
    goto LABEL_7;
  v2 = sub_1000138E3();
  if ( !v2 )
  {
    v2 = SecKeychainOpen("/Library/Keychains/AppleServiceToolkit.keychain", &v11);
LABEL_7:
    if ( !v2 )
    {
      v5 = v11;
      v6 = strlen(a1);
      v2 = SecKeychainFindGenericPassword(v5, v6, a1, 4LL, "root", &v12);
      if ( !v2 )
      {
        v7 = v10;
        v8 = strlen(a2);
        v2 = SecKeychainItemModifyAttributesAndData(v7, 0LL, v8, a2);
      }
    }
  }
  if ( v13 )
    SecKeychainItemFreeContent(0LL);
LABEL_12:
  if ( v11 )
    CFRelease(v11);
  result = *(_QWORD *)__stack_chk_guard_ptr;
  if ( *(_QWORD *)__stack_chk_guard_ptr == v17 )
    result = (unsigned int)v2;
  return result;
}
// 100015D1C: using guessed type int __fastcall SecKeychainFindGenericPassword(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 100015D28: using guessed type int __fastcall SecKeychainItemFreeContent(_QWORD);
// 100015D2E: using guessed type int __fastcall SecKeychainItemModifyAttributesAndData(_QWORD, _QWORD, _QWORD, _QWORD);
// 100015D3A: using guessed type int __fastcall SecKeychainOpen(_QWORD, _QWORD);
// 100015D40: using guessed type int __fastcall SecKeychainUnlock(_QWORD, _QWORD, _QWORD, _QWORD);
// 100015EF0: using guessed type int __cdecl CFRelease(_QWORD);
// 100021088: using guessed type void *__stack_chk_guard_ptr;

//----- (0000000100013F4E) ----------------------------------------------------
__int64 sub_100013F4E()
{
  return sub_100013DDE("adr_activated", "yes");
}

//----- (0000000100013F66) ----------------------------------------------------
__int64 sub_100013F66()
{
  int v0; // ecx@1
  __int64 result; // rax@1
  __int64 v2; // rcx@3
  char v3; // [sp+0h] [bp-20h]@1
  __int64 v4; // [sp+18h] [bp-8h]@1

  v4 = *(_QWORD *)__stack_chk_guard_ptr;
  v0 = sub_100013C3D("adr_activated", &v3, 0x10u);
  result = 0LL;
  if ( !v0 )
    result = strstr(&v3, "yes") != 0LL;
  v2 = *(_QWORD *)__stack_chk_guard_ptr;
  return result;
}
// 100021088: using guessed type void *__stack_chk_guard_ptr;

//----- (0000000100013FCD) ----------------------------------------------------
__int64 __fastcall sub_100013FCD(__int64 a1, void *a2)
{
  unsigned int v2; // er12@2
  void *v3; // r15@2
  __int64 v4; // rax@2
  int v5; // eax@2
  int v6; // ebx@2
  __int64 result; // rax@4
  char v8; // [sp+10h] [bp-A0h]@2
  char v9; // [sp+70h] [bp-40h]@2
  __int64 v10; // [sp+80h] [bp-30h]@1

  v10 = *(_QWORD *)__stack_chk_guard_ptr;
  if ( !a1 )
    goto LABEL_9;
  v2 = (2 * msgRef_length__objc_msgSend_fixup(a2, &msgRef_length__objc_msgSend_fixup) + 15) & 0xFFFFFFF0;
  v3 = calloc(1uLL, v2);
  LODWORD(v4) = msgRef_length__objc_msgSend_fixup(a2, &msgRef_length__objc_msgSend_fixup);
  objc_msgSend_ptr(a2, selRef_getCharacters_range_, v3, 0LL, v4);
  CC_MD5_Init(&v8);
  CC_MD5_Update(&v8, v3, v2);
  CC_MD5_Final(&v9, &v8);
  v5 = CCCryptorCreate();
  v6 = v5;
  if ( v5 )
    syslog(3, "Error creating AES 128 key. Status: %d\n", (unsigned int)v5, a1);
  free(v3);
  LOBYTE(result) = v6 == 0;
  if ( *(_QWORD *)__stack_chk_guard_ptr != v10 )
LABEL_9:
    __assert_rtn(
      "CreateKey",
      "/SourceCache/AST_GWManager_A/AST_GWManager_A-1.0.5/GatewayManager/../DiagnosticGateway/Common/Security.m",
      295,
      "outAESKey");
  return (unsigned __int8)result;
}
// 100015D64: using guessed type int __fastcall CC_MD5_Final(_QWORD, _QWORD);
// 100015D6A: using guessed type int __fastcall CC_MD5_Init(_QWORD);
// 100015D70: using guessed type int __fastcall CC_MD5_Update(_QWORD, _QWORD, _QWORD);
// 100021088: using guessed type void *__stack_chk_guard_ptr;
// 100027170: using guessed type char *selRef_getCharacters_range_;
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010001411B) ----------------------------------------------------
void *__fastcall sub_10001411B(void *a1, void *a2)
{
  __int64 v2; // rax@1
  unsigned __int64 v3; // rax@1
  unsigned __int64 v4; // rbx@1
  void *(*v5)(void *, const char *, ...); // r12@3
  void *v6; // r14@3
  void *v7; // r15@3
  void *v8; // rax@3
  __int64 v9; // r12@4
  void *(*v10)(void *, const char *, ...); // r13@4
  void *v11; // r15@4
  void *v12; // rax@4
  int v13; // eax@4
  __int64 v15; // [sp+8h] [bp-48h]@1
  __int64 v16; // [sp+18h] [bp-38h]@4
  __int64 v17; // [sp+20h] [bp-30h]@3

  LODWORD(v2) = msgRef_length__objc_msgSend_fixup(a1, &msgRef_length__objc_msgSend_fixup);
  v15 = v2;
  LODWORD(v3) = msgRef_length__objc_msgSend_fixup(a1, &msgRef_length__objc_msgSend_fixup);
  v4 = v3;
  if ( v3 & 0xF )
    v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v6 = objc_msgSend_ptr(classRef_NSMutableData, selRef_dataWithLength_, v4);
  v7 = v5(classRef_NSMutableData, selRef_dataWithLength_, v4);
  v8 = v5(a1, selRef_bytes);
  v5(v7, selRef_replaceBytesInRange_withBytes_, 0LL, v15, v8);
  if ( (unsigned __int8)sub_100013FCD((__int64)&v17, a2) == 1 )
  {
    v16 = 0LL;
    v9 = v17;
    v10 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v11 = objc_msgSend_ptr(v7, selRef_bytes);
    v12 = v10(v6, selRef_mutableBytes);
    v13 = CCCryptorUpdate(v9, v11, v4, v12, v4, &v16);
    if ( v13 )
    {
      syslog(3, "Failed to encrypt data. Status: %d\n", (unsigned int)v13);
      v6 = 0LL;
    }
    else
    {
      CCCryptorRelease(v17);
    }
  }
  return v6;
}
// 100015D52: using guessed type int __fastcall CCCryptorRelease(_QWORD);
// 100015D58: using guessed type int __fastcall CCCryptorUpdate(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 100027178: using guessed type char *selRef_dataWithLength_;
// 100027180: using guessed type char *selRef_bytes;
// 100027188: using guessed type char *selRef_replaceBytesInRange_withBytes_;
// 100027190: using guessed type char *selRef_mutableBytes;
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027508: using guessed type void *classRef_NSMutableData;

//----- (0000000100014252) ----------------------------------------------------
void *__fastcall sub_100014252(__int64 a1, void *a2)
{
  void *v2; // r14@1
  __int64 v3; // rax@2
  __int64 v4; // rbx@2
  void *(*v5)(void *, const char *, ...); // r15@2
  char *v6; // r12@2
  __int64 v7; // r13@2
  void *v8; // ST00_8@2
  void *v9; // rax@2
  int v10; // eax@2
  signed __int64 v11; // rbx@3
  signed __int64 v12; // rdx@4
  __int64 v14; // [sp+8h] [bp-38h]@2
  __int64 v15; // [sp+10h] [bp-30h]@1

  v2 = 0LL;
  if ( (unsigned __int8)sub_100013FCD((__int64)&v15, a2) == 1 )
  {
    LODWORD(v3) = msgRef_length__objc_msgSend_fixup(a1, &msgRef_length__objc_msgSend_fixup);
    v4 = v3;
    v5 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
    v2 = objc_msgSend_ptr(classRef_NSMutableData, selRef_dataWithLength_, v3, a1);
    v6 = (char *)v5(v2, selRef_mutableBytes);
    v14 = 0LL;
    v7 = v15;
    v9 = v5(v8, selRef_bytes);
    v10 = CCCryptorUpdate(v7, v9, v4, v6, v4, &v14);
    if ( v10 )
    {
      syslog(3, "Error decrypting data. Status: %d\n", (unsigned int)v10);
      v2 = 0LL;
    }
    else
    {
      v11 = v4 + 1;
      do
      {
        v12 = v11 - 1;
        if ( v6[v11 - 2] )
          break;
        --v11;
      }
      while ( v11 );
      objc_msgSend_ptr(v2, selRef_setLength_, v12);
    }
    CCCryptorRelease(v15);
  }
  return v2;
}
// 100015D52: using guessed type int __fastcall CCCryptorRelease(_QWORD);
// 100015D58: using guessed type int __fastcall CCCryptorUpdate(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 100027178: using guessed type char *selRef_dataWithLength_;
// 100027180: using guessed type char *selRef_bytes;
// 100027190: using guessed type char *selRef_mutableBytes;
// 100027198: using guessed type char *selRef_setLength_;
// 100027320: using guessed type int (__fastcall *msgRef_length__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027508: using guessed type void *classRef_NSMutableData;

//----- (0000000100014357) ----------------------------------------------------
// PopUpMenuButton - (void)awakeFromNib
void __cdecl -[PopUpMenuButton awakeFromNib](struct PopUpMenuButton *self, SEL a2)
{
  __int64 v2; // rax@0

  if ( objc_msgSend_ptr(self, selRef_menu, v2) )
    objc_msgSend_ptr(self, selRef_setUsesMenu_, 1LL);
}
// 1000271A0: using guessed type char *selRef_menu;
// 1000271A8: using guessed type char *selRef_setUsesMenu_;

//----- (0000000100014397) ----------------------------------------------------
// PopUpMenuButton - (void)dealloc
void __cdecl -[PopUpMenuButton dealloc](struct PopUpMenuButton *self, SEL a2)
{
  struct PopUpMenuButton *v2; // [sp+8h] [bp-18h]@1
  void *v3; // [sp+10h] [bp-10h]@1

  msgRef_release__objc_msgSend_fixup(self->_popUpCell, &msgRef_release__objc_msgSend_fixup);
  v2 = self;
  v3 = classRef_PopUpMenuButton;
  objc_msgSendSuper2(&v2, selRef_dealloc);
}
// 1000262D8: using guessed type char *selRef_dealloc;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027578: using guessed type void *classRef_PopUpMenuButton;

//----- (00000001000143E1) ----------------------------------------------------
// PopUpMenuButton - (void)setUsesMenu:(char) 
void __cdecl -[PopUpMenuButton setUsesMenu:](struct PopUpMenuButton *self, SEL a2, char a3)
{
  __int64 v3; // rax@0
  struct PopUpMenuButton *v4; // rbx@1
  struct NSPopUpButtonCell *v5; // rdi@1
  void *v6; // rax@7
  __int64 v7; // [sp-8h] [bp-10h]@1

  v7 = v3;
  v4 = self;
  v5 = self->_popUpCell;
  if ( !v5 && a3 )
  {
    LODWORD(v6) = msgRef_alloc__objc_msgSend_fixup(classRef_NSPopUpButtonCell, &msgRef_alloc__objc_msgSend_fixup);
    v4->_popUpCell = (struct NSPopUpButtonCell *)objc_msgSend_ptr(v6, selRef_initTextCell_, &stru_100028108, v7);
    objc_msgSend_ptr((void *)v4->_popUpCell, selRef_setPullsDown_, 1LL);
    objc_msgSend_ptr((void *)v4->_popUpCell, selRef_setPreferredEdge_, 3LL);
    objc_msgSend_ptr((void *)v4->_popUpCell, selRef_setHighlightsBy_, 1LL);
    objc_msgSend_ptr((void *)v4->_popUpCell, selRef_setShowsStateBy_, 1LL);
  }
  else if ( v5 )
  {
    if ( !a3 )
    {
      msgRef_release__objc_msgSend_fixup(v5, &msgRef_release__objc_msgSend_fixup);
      v4->_popUpCell = 0LL;
    }
  }
}
// 1000271B0: using guessed type char *selRef_initTextCell_;
// 1000271B8: using guessed type char *selRef_setPullsDown_;
// 1000271C0: using guessed type char *selRef_setPreferredEdge_;
// 1000271C8: using guessed type char *selRef_setHighlightsBy_;
// 1000271D0: using guessed type char *selRef_setShowsStateBy_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (00000001000144DD) ----------------------------------------------------
// PopUpMenuButton - (char)usesMenu
char __cdecl -[PopUpMenuButton usesMenu](struct PopUpMenuButton *self, SEL a2)
{
  return self->_popUpCell != 0LL;
}

//----- (00000001000144F5) ----------------------------------------------------
// PopUpMenuButton - (void)_runPopUp:(id) 
void __cdecl -[PopUpMenuButton _runPopUp:](struct PopUpMenuButton *self, SEL a2, id a3)
{
  void *(*v3)(void *, const char *, ...); // r15@1
  void *v4; // rax@1
  void *v5; // r14@1
  void *v6; // rax@1
  struct NSPopUpButtonCell *v7; // r15@1
  void *(*v8)(void *, const char *, ...); // r12@4
  void *v9; // rax@4
  __int128 v10; // [sp+20h] [bp-40h]@2
  __int128 v11; // [sp+30h] [bp-30h]@3

  v3 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v4 = objc_msgSend_ptr(self, selRef_menu, a3);
  v5 = v3(v4, selRef_copy);
  v3(v5, selRef_insertItemWithTitle_action_keyEquivalent_atIndex_, &stru_100028108, 0LL, &stru_100028108);
  v3((void *)self->_popUpCell, selRef_setMenu_, v5);
  v6 = v3(self, selRef_cell);
  v3(v6, selRef_setHighlighted_, 1LL);
  v7 = self->_popUpCell;
  if ( self )
  {
    objc_msgSend_stret(&v10, (const char *)self, selRef_bounds);
  }
  else
  {
    v11 = 0LL;
    v10 = 0LL;
  }
  v8 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  objc_msgSend_ptr(
    (void *)v7,
    selRef_performClickWithFrame_inView_,
    self,
    (_QWORD)v10,
    *((_QWORD *)&v10 + 1),
    (_QWORD)v11,
    *((_QWORD *)&v11 + 1));
  v9 = v8(self, selRef_cell);
  v8(v9, selRef_setHighlighted_, 0LL);
  msgRef_release__objc_msgSend_fixup(v5, &msgRef_release__objc_msgSend_fixup);
  v8(self, selRef_setNeedsDisplay_, 1LL);
}
// 100026290: using guessed type char *selRef_bounds;
// 1000263F0: using guessed type char *selRef_copy;
// 100026408: using guessed type char *selRef_setNeedsDisplay_;
// 1000271A0: using guessed type char *selRef_menu;
// 1000271D8: using guessed type char *selRef_insertItemWithTitle_action_keyEquivalent_atIndex_;
// 1000271E0: using guessed type char *selRef_setMenu_;
// 1000271E8: using guessed type char *selRef_cell;
// 1000271F0: using guessed type char *selRef_setHighlighted_;
// 1000271F8: using guessed type char *selRef_performClickWithFrame_inView_;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100014633) ----------------------------------------------------
// PopUpMenuButton - (void)mouseDown:(id) 
void __cdecl -[PopUpMenuButton mouseDown:](struct PopUpMenuButton *self, SEL a2, id a3)
{
  id v3; // r14@1
  struct PopUpMenuButton *v4; // [sp+0h] [bp-20h]@3
  void *v5; // [sp+8h] [bp-18h]@3

  v3 = a3;
  if ( (unsigned __int8)objc_msgSend_ptr(self, selRef_usesMenu) )
  {
    objc_msgSend_ptr(self, selRef__runPopUp_, v3);
  }
  else
  {
    v4 = self;
    v5 = classRef_PopUpMenuButton;
    objc_msgSendSuper2(&v4, selRef_mouseDown_, v3, self, classRef_PopUpMenuButton);
  }
}
// 100026EE0: using guessed type char *selRef_mouseDown_;
// 100027200: using guessed type char *selRef_usesMenu;
// 100027208: using guessed type char *selRef__runPopUp_;
// 100027578: using guessed type void *classRef_PopUpMenuButton;

//----- (0000000100014698) ----------------------------------------------------
// GMSearchResults - (id)init
id __cdecl -[GMSearchResults init](struct GMSearchResults *self, SEL a2)
{
  struct objc_object *v2; // rbx@1
  void *v3; // rax@2
  void *v4; // rax@2
  struct GMSearchResults *v6; // [sp+8h] [bp-18h]@1
  void *v7; // [sp+10h] [bp-10h]@1

  v6 = self;
  v7 = classRef_GMSearchResults_0;
  v2 = (struct objc_object *)objc_msgSendSuper2(&v6, selRef_init);
  if ( v2 )
  {
    v3 = objc_msgSend_ptr(classRef_NSMutableArray, selRef_array);
    LODWORD(v4) = msgRef_retain__objc_msgSend_fixup(v3, &msgRef_retain__objc_msgSend_fixup);
    v2[1].isa = v4;
  }
  return v2;
}
// 1000262B8: using guessed type char *selRef_init;
// 100026BF0: using guessed type char *selRef_array;
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027390: using guessed type void *classRef_NSMutableArray;
// 100027580: using guessed type void *classRef_GMSearchResults_0;

//----- (0000000100014701) ----------------------------------------------------
// GMSearchResults - (void)updateFromUutDict:(id) 
void __cdecl -[GMSearchResults updateFromUutDict:](struct GMSearchResults *self, SEL a2, id a3)
{
  id v3; // rbx@1
  __int64 v4; // rax@1
  __int64 v5; // r15@1
  __int64 v6; // rax@2
  __int64 v7; // rax@3
  unsigned __int64 v8; // rbx@4
  void *(*v9)(void *, const char *, ...); // r14@4
  __int64 v10; // rax@5
  __int64 v11; // r13@5
  void *v12; // rax@7
  void *v13; // rax@7
  void *v14; // rax@7
  void *v15; // r12@7
  unsigned __int64 v16; // rax@8
  __int64 v17; // [sp+0h] [bp-30h]@1

  v3 = a3;
  objc_msgSend_ptr((void *)self->uutList, selRef_removeAllObjects, self);
  LODWORD(v4) = msgRef_objectForKey___objc_msgSend_fixup(
                  v3,
                  &msgRef_objectForKey___objc_msgSend_fixup,
                  &cfstr_Uutsfound);
  v5 = v4;
  if ( v4 )
  {
    LODWORD(v6) = msgRef_count__objc_msgSend_fixup(v4, &msgRef_count__objc_msgSend_fixup);
    if ( v6 )
    {
      LODWORD(v7) = msgRef_count__objc_msgSend_fixup(v5, &msgRef_count__objc_msgSend_fixup);
      if ( v7 )
      {
        v8 = 0LL;
        v9 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
        do
        {
          LODWORD(v10) = msgRef_objectAtIndex___objc_msgSend_fixup(v5, &msgRef_objectAtIndex___objc_msgSend_fixup, v8);
          v11 = v10;
          if ( v10 )
          {
            if ( !(unsigned __int8)objc_msgSend_ptr((void *)v17, selRef_hasUutWithSerialNumber_, v10) )
            {
              LODWORD(v12) = msgRef_alloc__objc_msgSend_fixup(classRef_GMMachineInfo, &msgRef_alloc__objc_msgSend_fixup);
              v13 = v9(v12, selRef_init);
              LODWORD(v14) = msgRef_autorelease__objc_msgSend_fixup(v13, &msgRef_autorelease__objc_msgSend_fixup);
              v15 = v14;
              v9(v14, selRef_setSerialNumber_, v11);
              v9(v15, selRef_setStatus_, 0LL);
              v9(*(void **)(v17 + 8), selRef_addObject_, v15);
            }
          }
          LODWORD(v16) = msgRef_count__objc_msgSend_fixup(v5, &msgRef_count__objc_msgSend_fixup);
          ++v8;
        }
        while ( v8 < v16 );
      }
    }
  }
}
// 1000262B8: using guessed type char *selRef_init;
// 1000262D0: using guessed type char *selRef_addObject_;
// 100026970: using guessed type char *selRef_removeAllObjects;
// 100026F98: using guessed type char *selRef_setStatus_;
// 1000270B0: using guessed type char *selRef_setSerialNumber_;
// 100027210: using guessed type char *selRef_hasUutWithSerialNumber_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272C0: using guessed type int (__fastcall *msgRef_autorelease__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (000000010001485D) ----------------------------------------------------
// GMSearchResults - (void)removeAllUuts
void __cdecl -[GMSearchResults removeAllUuts](struct GMSearchResults *self, SEL a2)
{
  objc_msgSend_ptr((void *)self->uutList, selRef_removeAllObjects);
}
// 100026970: using guessed type char *selRef_removeAllObjects;

//----- (000000010001487A) ----------------------------------------------------
// GMSearchResults - (void)dealloc
void __cdecl -[GMSearchResults dealloc](struct GMSearchResults *self, SEL a2)
{
  struct GMSearchResults *v2; // [sp+8h] [bp-18h]@1
  void *v3; // [sp+10h] [bp-10h]@1

  msgRef_release__objc_msgSend_fixup(self->uutList, &msgRef_release__objc_msgSend_fixup);
  v2 = self;
  v3 = classRef_GMSearchResults_0;
  objc_msgSendSuper2(&v2, selRef_dealloc);
}
// 1000262D8: using guessed type char *selRef_dealloc;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027580: using guessed type void *classRef_GMSearchResults_0;

//----- (00000001000148C4) ----------------------------------------------------
// GMSearchResults - (id)uutList
id __cdecl -[GMSearchResults uutList](struct GMSearchResults *self, SEL a2)
{
  return (id)self->uutList;
}

//----- (00000001000148D5) ----------------------------------------------------
// GMSearchResults - (int64_t)numberOfUUTs
int64_t __cdecl -[GMSearchResults numberOfUUTs](struct GMSearchResults *self, SEL a2)
{
  int64_t result; // rax@1

  LODWORD(result) = msgRef_count__objc_msgSend_fixup(self->uutList, &msgRef_count__objc_msgSend_fixup);
  return result;
}
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (00000001000148F5) ----------------------------------------------------
// GMSearchResults - (id)uutAtIndex:(int64_t) 
id __cdecl -[GMSearchResults uutAtIndex:](struct GMSearchResults *self, SEL a2, int64_t a3)
{
  id result; // rax@1

  LODWORD(result) = msgRef_objectAtIndex___objc_msgSend_fixup(
                      self->uutList,
                      &msgRef_objectAtIndex___objc_msgSend_fixup,
                      a3);
  return result;
}
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (0000000100014915) ----------------------------------------------------
// GMSearchResults - (char)hasUutWithSerialNumber:(id) 
char __cdecl -[GMSearchResults hasUutWithSerialNumber:](struct GMSearchResults *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  id v4; // r14@1
  unsigned __int64 i; // rbx@1
  unsigned __int64 v6; // rax@3
  char v7; // cl@3
  void *v8; // rax@4
  void *v9; // rax@4
  char v10; // al@4
  __int64 v12; // [sp-8h] [bp-30h]@1

  v12 = v3;
  v4 = a3;
  for ( i = 0LL; ; ++i )
  {
    LODWORD(v6) = msgRef_count__objc_msgSend_fixup(self->uutList, &msgRef_count__objc_msgSend_fixup);
    v7 = 0;
    if ( i >= v6 )
      break;
    LODWORD(v8) = msgRef_objectAtIndex___objc_msgSend_fixup(
                    self->uutList,
                    &msgRef_objectAtIndex___objc_msgSend_fixup,
                    i);
    v9 = objc_msgSend_ptr(v8, selRef_serialNumber, v12);
    v10 = msgRef_isEqualToString___objc_msgSend_fixup(v9, &msgRef_isEqualToString___objc_msgSend_fixup, v4);
    v7 = 1;
    if ( v10 )
      break;
  }
  return v7;
}
// 100026708: using guessed type char *selRef_serialNumber;
// 1000272E0: using guessed type int (__fastcall *msgRef_count__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272F0: using guessed type int (__fastcall *msgRef_objectAtIndex___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);
// 100027350: using guessed type int (__fastcall *msgRef_isEqualToString___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (00000001000149AB) ----------------------------------------------------
__int64 __fastcall sub_1000149AB(char *a1, char *a2, const char *a3)
{
  const char *v3; // r14@1
  char *v4; // rax@1
  char v5; // cl@2
  char v6; // bl@3
  char *v7; // rax@4
  __int64 v8; // rdx@5
  unsigned __int8 v9; // cl@6
  size_t v10; // rbx@14
  char v12[4104]; // [sp+0h] [bp-1030h]@4
  __int64 v13; // [sp+1008h] [bp-28h]@1

  v3 = a3;
  v13 = *(_QWORD *)__stack_chk_guard_ptr;
  v4 = a2;
  do
  {
    v5 = *v4;
    *v4++ = 32;
  }
  while ( v5 != 9 );
  v6 = *v4;
  if ( (unsigned __int8)(*v4 - 9) >= 2u )
  {
    v8 = 0LL;
    do
    {
      v12[v8] = v6;
      v4[v8] = 32;
      v6 = v4[v8 + 1];
      v9 = v4[v8++ + 1] - 9;
    }
    while ( v9 > 1u );
    v7 = &v12[v8];
  }
  else
  {
    v7 = v12;
  }
  *v7 = 0;
  if ( strcmp(v3, "%") )
  {
    if ( !*v3 )
      goto LABEL_13;
    goto LABEL_12;
  }
  if ( !strstr(a1, "Battery") )
LABEL_12:
    __strcat_chk(v12, v3, 4096LL);
LABEL_13:
  if ( strlen(v12) )
  {
    v10 = 0LL;
    do
    {
      a2[v10] = v12[v10];
      ++v10;
    }
    while ( v10 < strlen(v12) );
  }
  return *(_QWORD *)__stack_chk_guard_ptr;
}
// 100015DAC: using guessed type int __fastcall __strcat_chk(_QWORD, _QWORD, _QWORD);
// 100021088: using guessed type void *__stack_chk_guard_ptr;
// 1000149AB: using guessed type char var_1030[4104];

//----- (0000000100014ABF) ----------------------------------------------------
char *__fastcall sub_100014ABF(char *a1)
{
  char *v1; // r14@1
  __int64 v2; // r15@1
  const char *v3; // rsi@2
  const char *i; // rdi@2
  char *result; // rax@4
  __int64 v6; // rbx@4

  v1 = a1;
  v2 = 0LL;
  do
  {
    v3 = (const char *)off_10002A0E0[v2];
    for ( i = v1; ; i = (const char *)(v6 + 1) )
    {
      result = strstr(i, v3);
      v6 = (__int64)result;
      if ( !result )
        break;
      sub_1000149AB(v1, result, off_10002A190[v2]);
      v3 = (const char *)off_10002A0E0[v2];
    }
    ++v2;
  }
  while ( (_DWORD)v2 != 22 );
  return result;
}

//----- (0000000100014B29) ----------------------------------------------------
char *__fastcall sub_100014B29(const char *a1)
{
  char *result; // rax@1

  result = strstr(a1, "Unit_");
  if ( result )
  {
    result = strchr(result, 9);
    if ( result )
    {
      result = strchr(result + 1, 9);
      if ( result )
      {
        *result = 10;
        result[1] = 0;
      }
    }
  }
  return result;
}

//----- (0000000100014B6E) ----------------------------------------------------
char *__fastcall sub_100014B6E(char *a1, char *a2)
{
  const char **v2; // rbx@1
  int v3; // er14@1
  const char *v4; // r13@2
  char *v5; // r12@2

  v2 = (const char **)&unk_10002A240;
  v3 = 0;
  while ( 1 )
  {
    v4 = *v2;
    v5 = strstr(a1, *v2);
    if ( v5 )
      break;
    ++v2;
    if ( ++v3 >= 5 )
      return v5;
  }
  strcpy(a2, v4);
  return v5;
}

//----- (0000000100014BD0) ----------------------------------------------------
__int64 __fastcall sub_100014BD0(char *a1)
{
  char *v1; // rbx@1
  char v3; // [sp+0h] [bp-60h]@1
  __int64 v4; // [sp+48h] [bp-18h]@1

  v4 = *(_QWORD *)__stack_chk_guard_ptr;
  v1 = sub_100014B6E(a1, &v3);
  if ( v1 && strcmp(&v3, off_10002A260) && (strcmp(&v3, off_10002A250) || !strstr(v1 + 1, "Sensor")) )
    sub_100014B29(a1);
  return *(_QWORD *)__stack_chk_guard_ptr;
}
// 100021088: using guessed type void *__stack_chk_guard_ptr;

//----- (0000000100014C65) ----------------------------------------------------
char *__fastcall sub_100014C65(const char *a1)
{
  char *result; // rax@1
  const char *v2; // rbx@2

  result = strstr(a1, "Unit_");
  if ( result )
  {
    do
    {
      v2 = result + 1;
      result = strstr(result + 1, "Unit_");
    }
    while ( result );
    result = strstr(v2, "\t\t");
    if ( result )
    {
      *result = 10;
      result[1] = 0;
    }
  }
  return result;
}

//----- (0000000100014CBA) ----------------------------------------------------
__int64 __fastcall sub_100014CBA(char *a1, char *a2)
{
  FILE *v2; // r15@1
  FILE *v3; // r14@1
  char v5; // [sp+0h] [bp-820h]@1
  __int64 v6; // [sp+800h] [bp-20h]@1

  v6 = *(_QWORD *)__stack_chk_guard_ptr;
  v2 = sub_100014D87(a1, v6, "r");
  v3 = sub_100014D87(a2, (__int64)v2, "w");
  while ( fgets(&v5, 2048, v2) )
  {
    sub_100014C65(&v5);
    sub_100014BD0(&v5);
    sub_100014ABF(&v5);
    fputs(&v5, v3);
  }
  sub_100014DBF(v2);
  sub_100014DBF(v3);
  return *(_QWORD *)__stack_chk_guard_ptr;
}
// 100021088: using guessed type void *__stack_chk_guard_ptr;

//----- (0000000100014D87) ----------------------------------------------------
FILE *__usercall sub_100014D87@<rax>(char *a1@<rdi>, __int64 a2@<rax>, const char *a3@<rsi>)
{
  FILE *result; // rax@1
  __int64 v4; // [sp-8h] [bp-10h]@1

  v4 = a2;
  result = fopen(a1, a3);
  if ( !result )
  {
    printf("FD_fopen error on %s!\n", a1, v4);
    exit(1);
  }
  return result;
}

//----- (0000000100014DBF) ----------------------------------------------------
int __fastcall sub_100014DBF(FILE *a1)
{
  int result; // eax@1

  result = fclose(a1);
  if ( result )
  {
    puts("FD_fclose failed!");
    exit(1);
  }
  return result;
}

//----- (0000000100014DE4) ----------------------------------------------------
// GMServerInterface - (id)init
id __cdecl -[GMServerInterface init](struct GMServerInterface *self, SEL a2)
{
  struct objc_object *v2; // rbx@1
  void *v3; // rax@2
  void *v4; // rax@2
  void *v5; // rax@2
  struct GMServerInterface *v7; // [sp+8h] [bp-28h]@1
  void *v8; // [sp+10h] [bp-20h]@1

  v7 = self;
  v8 = classRef_GMServerInterface_0;
  v2 = (struct objc_object *)objc_msgSendSuper2(&v7, selRef_init);
  if ( v2 )
  {
    LODWORD(v3) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v2[1].isa = v3;
    LODWORD(v4) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v2[2].isa = v4;
    LODWORD(v5) = msgRef_retain__objc_msgSend_fixup(&stru_100028108, &msgRef_retain__objc_msgSend_fixup);
    v2[3].isa = v5;
  }
  return v2;
}
// 1000262B8: using guessed type char *selRef_init;
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027588: using guessed type void *classRef_GMServerInterface_0;

//----- (0000000100014E79) ----------------------------------------------------
// GMServerInterface - (id)initWithInterfaceDict:(id) 
id __cdecl -[GMServerInterface initWithInterfaceDict:](struct GMServerInterface *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  __int64 v4; // ST00_8@1
  id v5; // r14@1
  void *v6; // rax@1
  void *v7; // rbx@1
  __int64 v8; // rax@2
  __int64 v9; // r12@2
  __int64 v10; // rax@2
  __int64 v11; // r15@2
  __int64 v12; // rax@2
  __int64 v13; // r14@2

  v4 = v3;
  v5 = a3;
  LODWORD(v6) = msgRef_alloc__objc_msgSend_fixup(classRef_GMServerInterface, &msgRef_alloc__objc_msgSend_fixup);
  v7 = objc_msgSend_ptr(v6, selRef_init, v4);
  if ( v7 )
  {
    LODWORD(v8) = msgRef_objectForKey___objc_msgSend_fixup(v5, &msgRef_objectForKey___objc_msgSend_fixup, &cfstr_Enx);
    v9 = v8;
    LODWORD(v10) = msgRef_objectForKey___objc_msgSend_fixup(
                     v5,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_IpAddr);
    v11 = v10;
    LODWORD(v12) = msgRef_objectForKey___objc_msgSend_fixup(
                     v5,
                     &msgRef_objectForKey___objc_msgSend_fixup,
                     &cfstr_MacAddr);
    v13 = v12;
    if ( v9 )
      objc_msgSend_ptr(v7, selRef_setNetworkName_, v9);
    if ( v11 )
      objc_msgSend_ptr(v7, selRef_setIpAddress_, v11);
    if ( v13 )
      objc_msgSend_ptr(v7, selRef_setMacAddress_, v13);
  }
  return (id)v7;
}
// 1000262B8: using guessed type char *selRef_init;
// 100026F90: using guessed type char *selRef_setIpAddress_;
// 100027218: using guessed type char *selRef_setNetworkName_;
// 100027220: using guessed type char *selRef_setMacAddress_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027340: using guessed type int (__fastcall *msgRef_objectForKey___objc_msgSend_fixup)(_QWORD, _QWORD, _QWORD);

//----- (0000000100014F5D) ----------------------------------------------------
// GMServerInterface - (void)dealloc
void __cdecl -[GMServerInterface dealloc](struct GMServerInterface *self, SEL a2)
{
  __int64 v2; // [sp+0h] [bp-20h]@1
  void *v3; // [sp+8h] [bp-18h]@1

  msgRef_release__objc_msgSend_fixup(self->networkName, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->ipAddress, &msgRef_release__objc_msgSend_fixup);
  msgRef_release__objc_msgSend_fixup(self->macAddress, &msgRef_release__objc_msgSend_fixup);
  v3 = classRef_GMServerInterface_0;
  objc_msgSendSuper2(&v2, selRef_dealloc, self, classRef_GMServerInterface_0);
}
// 1000262D8: using guessed type char *selRef_dealloc;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027588: using guessed type void *classRef_GMServerInterface_0;

//----- (0000000100014FD6) ----------------------------------------------------
// GMServerInterface - (id)networkName
id __cdecl -[GMServerInterface networkName](struct GMServerInterface *self, SEL a2)
{
  return (id)self->networkName;
}

//----- (0000000100014FE7) ----------------------------------------------------
// GMServerInterface - (void)setNetworkName:(id) 
void __cdecl -[GMServerInterface setNetworkName:](struct GMServerInterface *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->networkName, &msgRef_release__objc_msgSend_fixup);
  self->networkName = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (000000010001502C) ----------------------------------------------------
// GMServerInterface - (id)ipAddress
id __cdecl -[GMServerInterface ipAddress](struct GMServerInterface *self, SEL a2)
{
  return (id)self->ipAddress;
}

//----- (000000010001503D) ----------------------------------------------------
// GMServerInterface - (void)setIpAddress:(id) 
void __cdecl -[GMServerInterface setIpAddress:](struct GMServerInterface *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->ipAddress, &msgRef_release__objc_msgSend_fixup);
  self->ipAddress = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100015082) ----------------------------------------------------
// GMServerInterface - (id)macAddress
id __cdecl -[GMServerInterface macAddress](struct GMServerInterface *self, SEL a2)
{
  return (id)self->macAddress;
}

//----- (0000000100015093) ----------------------------------------------------
// GMServerInterface - (void)setMacAddress:(id) 
void __cdecl -[GMServerInterface setMacAddress:](struct GMServerInterface *self, SEL a2, id a3)
{
  struct NSString *v3; // r14@1

  v3 = (struct NSString *)objc_msgSend_ptr(a3, selRef_copy);
  msgRef_release__objc_msgSend_fixup(self->macAddress, &msgRef_release__objc_msgSend_fixup);
  self->macAddress = v3;
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (00000001000150D8) ----------------------------------------------------
// GMServerInterface - (id)description
id __cdecl -[GMServerInterface description](struct GMServerInterface *self, SEL a2)
{
  return (id)objc_msgSend_ptr(
               classRef_NSString,
               selRef_stringWithFormat_,
               &cfstr____0,
               self->networkName,
               self->ipAddress);
}
// 1000263A8: using guessed type char *selRef_stringWithFormat_;
// 1000273C0: using guessed type void *classRef_NSString;
// 1000299C8: using guessed type __CFString cfstr____0;

//----- (0000000100015110) ----------------------------------------------------
// NSWindow_ClickWin - (void)mouseDown:(id) 
void __cdecl -[NSWindow_ClickWin mouseDown:](struct NSWindow_ClickWin *self, SEL a2, id a3)
{
  __int64 v3; // rax@0

  if ( !self->mEatMouseClicks )
  {
    objc_msgSend_ptr(self, selRef_close, a3, v3);
    objc_msgSend_ptr((void *)self->mBigTextWindow, selRef_close);
  }
}
// 100027228: using guessed type char *selRef_close;

//----- (000000010001515E) ----------------------------------------------------
// NSWindow_ClickWin - (void)setEatMouseClicks:(char) 
void __cdecl -[NSWindow_ClickWin setEatMouseClicks:](struct NSWindow_ClickWin *self, SEL a2, char a3)
{
  self->mEatMouseClicks = a3;
}

//----- (000000010001516E) ----------------------------------------------------
// NSWindow_ClickWin - (void)setBigTextWindow:(id) 
void __cdecl -[NSWindow_ClickWin setBigTextWindow:](struct NSWindow_ClickWin *self, SEL a2, id a3)
{
  self->mBigTextWindow = (struct NSWindow *)a3;
}

//----- (000000010001517F) ----------------------------------------------------
// BigTextView - (id)initWithFrame:(struct CGRect) 
id __cdecl -[BigTextView initWithFrame:](struct BigTextView *self, SEL a2, struct CGRect a3)
{
  void *v3; // rbx@1
  void (*v4)(void *, const char *, ...); // r14@2
  void *v5; // rax@2
  void *v6; // rax@2
  struct BigTextView *v8; // [sp+20h] [bp-20h]@1
  void *v9; // [sp+28h] [bp-18h]@1

  v8 = self;
  v9 = classRef_BigTextView_0;
  v3 = objc_msgSendSuper2(
         &v8,
         selRef_initWithFrame_,
         *(_QWORD *)&a3.var0.var0,
         *(_QWORD *)&a3.var0.var1,
         *(_QWORD *)&a3.var1.var0,
         *(_QWORD *)&a3.var1.var1,
         self,
         classRef_BigTextView_0);
  if ( v3 )
  {
    v4 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    v5 = objc_msgSend_ptr(classRef_NSColor, selRef_whiteColor);
    v4(v3, selRef_setForegroundColor_, v5);
    v6 = ((void *(*)(void *, const char *, ...))v4)(classRef_NSColor, selRef_blackColor);
    v4(v3, selRef_setBackgroundColor_, v6);
    v4(v3, selRef_setAlpha_, COERCE_DOUBLE(1059313418LL));
  }
  return (id)v3;
}
// 100026AA8: using guessed type char *selRef_blackColor;
// 100026CA8: using guessed type char *selRef_setBackgroundColor_;
// 100026CC0: using guessed type char *selRef_whiteColor;
// 100026CD0: using guessed type char *selRef_initWithFrame_;
// 100026CE8: using guessed type char *selRef_setForegroundColor_;
// 100026CF8: using guessed type char *selRef_setAlpha_;
// 100027450: using guessed type void *classRef_NSColor;
// 100027590: using guessed type void *classRef_BigTextView_0;

//----- (000000010001523E) ----------------------------------------------------
// BigTextView - (void)drawRect:(struct CGRect) 
void __cdecl -[BigTextView drawRect:](struct BigTextView *self, SEL a2, struct CGRect a3)
{
  void *v3; // r14@1
  void (*v4)(void *, const char *, ...); // r12@4
  double v5; // xmm0_8@4
  void *v6; // rbx@4
  void *v7; // rax@4
  float v8; // xmm0_4@5
  void *(*v9)(void *, const char *, ...); // r13@7
  void *v10; // r14@7
  void *v11; // rax@7
  void *v12; // rax@7
  void *v13; // rax@7
  void *v14; // rbx@7
  void *v15; // rax@7
  void *v16; // rax@7
  void *v17; // r14@7
  double v18; // xmm0_8@8
  double v19; // xmm0_8@12
  double v20; // xmm1_8@14
  void (*v21)(void *, const char *, ...); // rbx@14
  float v22; // xmm0_4@14
  double v23; // xmm0_8@14
  void *v24; // rax@14
  double v25; // xmm0_8@16
  double v26; // xmm0_8@20
  double v27; // xmm1_8@22
  void (*v28)(void *, const char *, ...); // rbx@22
  float v29; // xmm0_4@22
  double v30; // xmm0_8@22
  void *v31; // rax@22
  double v32; // ST28_8@24
  double v33; // xmm0_8@24
  double v34; // xmm1_8@24
  float v35; // xmm0_4@26
  float v36; // xmm1_4@26
  double v37; // [sp+20h] [bp-230h]@7
  float v38; // [sp+28h] [bp-228h]@7
  double v39; // [sp+30h] [bp-220h]@7
  double v40; // [sp+38h] [bp-218h]@7
  __int128 v41; // [sp+40h] [bp-210h]@24
  __int128 v42; // [sp+50h] [bp-200h]@25
  double v43; // [sp+58h] [bp-1F8h]@24
  __int128 v44; // [sp+60h] [bp-1F0h]@24
  __int128 v45; // [sp+70h] [bp-1E0h]@24
  __int128 v46; // [sp+80h] [bp-1D0h]@20
  __int128 v47; // [sp+90h] [bp-1C0h]@21
  double v48; // [sp+98h] [bp-1B8h]@20
  __int128 v49; // [sp+A0h] [bp-1B0h]@16
  __int128 v50; // [sp+B0h] [bp-1A0h]@17
  double v51; // [sp+B8h] [bp-198h]@16
  __int128 v52; // [sp+C0h] [bp-190h]@12
  __int128 v53; // [sp+D0h] [bp-180h]@12
  __int128 v54; // [sp+E0h] [bp-170h]@8
  __int128 v55; // [sp+F0h] [bp-160h]@8
  __int128 v56; // [sp+100h] [bp-150h]@5
  __int128 v57; // [sp+110h] [bp-140h]@6
  double v58; // [sp+118h] [bp-138h]@5
  double v59; // [sp+120h] [bp-130h]@4
  __int64 v60; // [sp+128h] [bp-128h]@4
  __int64 v61; // [sp+130h] [bp-120h]@4
  double v62; // [sp+138h] [bp-118h]@4
  __int64 v63; // [sp+140h] [bp-110h]@4
  __int64 v64; // [sp+148h] [bp-108h]@4
  __int64 v65; // [sp+150h] [bp-100h]@4
  double v66; // [sp+158h] [bp-F8h]@4
  __int64 v67; // [sp+160h] [bp-F0h]@4
  __int64 v68; // [sp+168h] [bp-E8h]@4
  double v69; // [sp+170h] [bp-E0h]@4
  __int64 v70; // [sp+178h] [bp-D8h]@4
  double v71; // [sp+180h] [bp-D0h]@4
  __int64 v72; // [sp+188h] [bp-C8h]@4
  __int64 v73; // [sp+190h] [bp-C0h]@4
  __int64 v74; // [sp+198h] [bp-B8h]@4
  double v75; // [sp+1A0h] [bp-B0h]@4
  double v76; // [sp+1A8h] [bp-A8h]@4
  __int64 v77; // [sp+1B0h] [bp-A0h]@4
  __int64 v78; // [sp+1B8h] [bp-98h]@4
  __int64 v79; // [sp+1C0h] [bp-90h]@4
  double v80; // [sp+1C8h] [bp-88h]@4
  __int64 v81; // [sp+1D0h] [bp-80h]@4
  __int64 v82; // [sp+1D8h] [bp-78h]@4
  __int128 v83; // [sp+1E0h] [bp-70h]@4
  __int64 v84; // [sp+1F0h] [bp-60h]@4
  __int64 v85; // [sp+1F8h] [bp-58h]@4
  __int128 v86; // [sp+200h] [bp-50h]@2
  __int128 v87; // [sp+210h] [bp-40h]@3

  v3 = objc_msgSend_ptr(classRef_NSBezierPath, selRef_bezierPath);
  if ( self )
  {
    objc_msgSend_stret(&v86, (const char *)self, selRef_bounds);
  }
  else
  {
    v87 = 0LL;
    v86 = 0LL;
  }
  v4 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
  objc_msgSend_ptr(v3, selRef_moveToPoint_, *(double *)NSZeroPoint_ptr, *((double *)NSZeroPoint_ptr + 1));
  v83 = 0LL;
  v84 = 4629137466983448576LL;
  v85 = 4629137466983448576LL;
  v4(v3, selRef_appendBezierPathWithOvalInRect_, 0LL, 0LL, 4629137466983448576LL, 4629137466983448576LL);
  v79 = 0LL;
  v80 = *((double *)&v87 + 1) + -30.0;
  v81 = 4629137466983448576LL;
  v82 = 4629137466983448576LL;
  v4(
    v3,
    selRef_appendBezierPathWithOvalInRect_,
    0LL,
    *((double *)&v87 + 1) + -30.0,
    4629137466983448576LL,
    4629137466983448576LL);
  v75 = *(double *)&v87 + -30.0;
  v76 = *((double *)&v87 + 1) + -30.0;
  v77 = 4629137466983448576LL;
  v78 = 4629137466983448576LL;
  v4(
    v3,
    selRef_appendBezierPathWithOvalInRect_,
    *(double *)&v87 + -30.0,
    *((double *)&v87 + 1) + -30.0,
    4629137466983448576LL,
    4629137466983448576LL);
  v71 = *(double *)&v87 + -30.0;
  v72 = 0LL;
  v73 = 4629137466983448576LL;
  v74 = 4629137466983448576LL;
  v4(
    v3,
    selRef_appendBezierPathWithOvalInRect_,
    *(double *)&v87 + -30.0,
    0LL,
    4629137466983448576LL,
    4629137466983448576LL);
  v67 = 4624633867356078080LL;
  v68 = 0LL;
  v69 = *(double *)&v87 + -30.0;
  v70 = *((_QWORD *)&v87 + 1);
  v4(v3, selRef_appendBezierPathWithRect_, 4624633867356078080LL, 0LL, *(double *)&v87 + -30.0, *((_QWORD *)&v87 + 1));
  v63 = 0LL;
  v64 = 4624633867356078080LL;
  v65 = 4627730092099895296LL;
  v66 = *((double *)&v87 + 1) + -30.0;
  v4(
    v3,
    selRef_appendBezierPathWithRect_,
    0LL,
    4624633867356078080LL,
    4627730092099895296LL,
    *((double *)&v87 + 1) + -30.0);
  v5 = *(double *)&v87 + -15.0 + -20.0;
  v59 = *(double *)&v87 + -15.0 + -20.0;
  v60 = 4624633867356078080LL;
  v61 = 4630122629401935872LL;
  v62 = *((double *)&v87 + 1) + -30.0;
  v4(
    v3,
    selRef_appendBezierPathWithRect_,
    *(_QWORD *)&v5,
    4624633867356078080LL,
    4630122629401935872LL,
    *((double *)&v87 + 1) + -30.0);
  v6 = ((void *(*)(void *, const char *, ...))v4)(self, selRef_backgroundColor);
  v4(self, selRef_alpha);
  v7 = ((void *(*)(void *, const char *, ...))v4)(v6, selRef_colorWithAlphaComponent_, *(float *)&v5);
  v4(v7, selRef_set);
  v4(v3, selRef_fill);
  if ( self )
  {
    objc_msgSend_stret(&v56, (const char *)self, selRef_bounds);
    v8 = v58 * 0.8;
  }
  else
  {
    v57 = 0LL;
    v56 = 0LL;
    v8 = 0.0;
  }
  v38 = v8;
  v37 = v8;
  v9 = *(void *(**)(void *, const char *, ...))objc_msgSend_ptr;
  v10 = objc_msgSend_ptr(classRef_NSFont, selRef_boldSystemFontOfSize_);
  LODWORD(v11) = msgRef_alloc__objc_msgSend_fixup(classRef_NSShadow, &msgRef_alloc__objc_msgSend_fixup);
  v12 = v9(v11, selRef_init);
  LODWORD(v13) = msgRef_autorelease__objc_msgSend_fixup(v12, &msgRef_autorelease__objc_msgSend_fixup);
  v14 = v13;
  v9(v13, selRef_setShadowBlurRadius_, COERCE_DOUBLE(4621819117588971520LL));
  v15 = v9(self, selRef_shadowColor);
  v9(v14, selRef_setShadowColor_, v15);
  v9(v14, selRef_setShadowOffset_, COERCE_DOUBLE(4617315517961601024LL), COERCE_DOUBLE(-4606056518893174784LL));
  v16 = v9(self, selRef_foregroundColor);
  v17 = v9(
          classRef_NSMutableDictionary,
          selRef_dictionaryWithObjectsAndKeys_,
          v16,
          *(_QWORD *)NSForegroundColorAttributeName_ptr,
          v10,
          *(_QWORD *)NSFontAttributeName_ptr,
          v14,
          *(_QWORD *)NSShadowAttributeName_ptr,
          0LL,
          0LL);
  v9(self->string, selRef_sizeWithAttributes_, v17);
  v40 = 5.0;
  v39 = -5.0;
  if ( self )
  {
    objc_msgSend_stret(&v54, (const char *)self, selRef_bounds);
    v18 = *(double *)&v55;
  }
  else
  {
    v55 = 0LL;
    v54 = 0LL;
    v18 = 0.0;
  }
  if ( v18 < 5.0 )
  {
    if ( self )
    {
      objc_msgSend_stret(&v52, (const char *)self, selRef_bounds);
      v19 = *(double *)&v53;
    }
    else
    {
      v53 = 0LL;
      v52 = 0LL;
      v19 = 0.0;
    }
    v20 = 5.0 / v19;
    v21 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    v22 = v37 / (5.0 / v19);
    v38 = v22;
    v23 = v22;
    v24 = objc_msgSend_ptr(classRef_NSFont, selRef_boldSystemFontOfSize_, v23);
    v21(v17, selRef_setObject_forKey_, v24, *(_QWORD *)NSFontAttributeName_ptr);
    v21(self->string, selRef_sizeWithAttributes_, v17);
    v40 = v23;
    v39 = v20;
  }
  if ( self )
  {
    objc_msgSend_stret(&v49, (const char *)self, selRef_bounds);
    v25 = v51;
  }
  else
  {
    v50 = 0LL;
    v49 = 0LL;
    v25 = 0.0;
  }
  if ( v39 > v25 )
  {
    if ( self )
    {
      objc_msgSend_stret(&v46, (const char *)self, selRef_bounds);
      v26 = v48;
    }
    else
    {
      v47 = 0LL;
      v46 = 0LL;
      v26 = 0.0;
    }
    v27 = v39 / v26;
    v28 = *(void (**)(void *, const char *, ...))objc_msgSend_ptr;
    v29 = v38 / (v39 / v26);
    v30 = v29;
    v31 = objc_msgSend_ptr(classRef_NSFont, selRef_boldSystemFontOfSize_, v30);
    v28(v17, selRef_setObject_forKey_, v31, *(_QWORD *)NSFontAttributeName_ptr);
    v28(self->string, selRef_sizeWithAttributes_, v17);
    v40 = v30;
    v39 = v27;
  }
  if ( self )
  {
    objc_msgSend_stret(&v44, (const char *)self, selRef_bounds);
    v32 = *(double *)&v45;
    objc_msgSend_stret(&v41, (const char *)self, selRef_bounds);
    v33 = v32;
    v34 = v43;
  }
  else
  {
    v45 = 0LL;
    v44 = 0LL;
    v42 = 0LL;
    v41 = 0LL;
    v34 = 0.0;
    v33 = 0.0;
  }
  v35 = (v33 - v40) * 0.5;
  v36 = (v34 - v39) * 0.5;
  objc_msgSend_ptr(self->string, selRef_drawAtPoint_withAttributes_, v17, v35, v36);
}
// 100021040: using guessed type void *NSFontAttributeName_ptr;
// 100021048: using guessed type void *NSForegroundColorAttributeName_ptr;
// 100021058: using guessed type void *NSShadowAttributeName_ptr;
// 100021060: using guessed type void *NSZeroPoint_ptr;
// 100026290: using guessed type char *selRef_bounds;
// 1000262B8: using guessed type char *selRef_init;
// 100026530: using guessed type char *selRef_dictionaryWithObjectsAndKeys_;
// 100026598: using guessed type char *selRef_setObject_forKey_;
// 100026CF0: using guessed type char *selRef_setShadowColor_;
// 100026E38: using guessed type char *selRef_bezierPath;
// 100026E58: using guessed type char *selRef_set;
// 100027088: using guessed type char *selRef_backgroundColor;
// 100027230: using guessed type char *selRef_moveToPoint_;
// 100027238: using guessed type char *selRef_appendBezierPathWithOvalInRect_;
// 100027240: using guessed type char *selRef_appendBezierPathWithRect_;
// 100027248: using guessed type char *selRef_alpha;
// 100027250: using guessed type char *selRef_colorWithAlphaComponent_;
// 100027258: using guessed type char *selRef_fill;
// 100027260: using guessed type char *selRef_boldSystemFontOfSize_;
// 100027268: using guessed type char *selRef_setShadowBlurRadius_;
// 100027270: using guessed type char *selRef_shadowColor;
// 100027278: using guessed type char *selRef_setShadowOffset_;
// 100027280: using guessed type char *selRef_foregroundColor;
// 100027288: using guessed type char *selRef_sizeWithAttributes_;
// 100027290: using guessed type char *selRef_drawAtPoint_withAttributes_;
// 1000272A0: using guessed type int (__fastcall *msgRef_alloc__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272C0: using guessed type int (__fastcall *msgRef_autorelease__objc_msgSend_fixup)(_QWORD, _QWORD);
// 100027408: using guessed type void *classRef_NSMutableDictionary;
// 100027468: using guessed type void *classRef_NSFont;
// 1000274C0: using guessed type void *classRef_NSBezierPath;

//----- (0000000100015A54) ----------------------------------------------------
// BigTextView - (void)mouseDown:(id) 
void __cdecl -[BigTextView mouseDown:](struct BigTextView *self, SEL a2, id a3)
{
  __int64 v3; // rax@0
  void *v4; // rax@1

  v4 = objc_msgSend_ptr(self, selRef_window, a3, v3);
  objc_msgSend_ptr(v4, selRef_close);
  objc_msgSend_ptr(self->mClickWindow, selRef_close);
}
// 100027228: using guessed type char *selRef_close;
// 100027298: using guessed type char *selRef_window;

//----- (0000000100015A9E) ----------------------------------------------------
// BigTextView - (void)setClicktWindow:(id) 
void __cdecl -[BigTextView setClicktWindow:](struct BigTextView *self, SEL a2, id a3)
{
  self->mClickWindow = (struct NSWindow_ClickWin *)a3;
}

//----- (0000000100015AAF) ----------------------------------------------------
// BigTextView - (void)dealloc
void __cdecl -[BigTextView dealloc](struct BigTextView *self, SEL a2)
{
  struct BigTextView *v2; // [sp+8h] [bp-18h]@1
  void *v3; // [sp+10h] [bp-10h]@1

  objc_msgSend_ptr(self, selRef_setString_, 0LL);
  v2 = self;
  v3 = classRef_BigTextView_0;
  objc_msgSendSuper2(&v2, selRef_dealloc);
}
// 1000262D8: using guessed type char *selRef_dealloc;
// 100026D08: using guessed type char *selRef_setString_;
// 100027590: using guessed type void *classRef_BigTextView_0;

//----- (0000000100015AF3) ----------------------------------------------------
// BigTextView - (char)isOpaque
char __cdecl -[BigTextView isOpaque](struct BigTextView *self, SEL a2)
{
  return 0;
}

//----- (0000000100015AFB) ----------------------------------------------------
// BigTextView - (id)string
id __cdecl -[BigTextView string](struct BigTextView *self, SEL a2)
{
  __int64 v2; // rax@1
  id result; // rax@1

  LODWORD(v2) = msgRef_retain__objc_msgSend_fixup(self->string, &msgRef_retain__objc_msgSend_fixup);
  LODWORD(result) = msgRef_autorelease__objc_msgSend_fixup(v2, &msgRef_autorelease__objc_msgSend_fixup);
  return result;
}
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272C0: using guessed type int (__fastcall *msgRef_autorelease__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100015B2B) ----------------------------------------------------
// BigTextView - (void)setString:(id) 
void __cdecl -[BigTextView setString:](struct BigTextView *self, SEL a2, id a3)
{
  id v3; // rbx@1
  struct BigTextView *v4; // r14@1
  struct NSString *v5; // rdi@1

  v3 = a3;
  v4 = self;
  v5 = self->string;
  if ( (id)v5 != a3 )
  {
    msgRef_release__objc_msgSend_fixup(v5, &msgRef_release__objc_msgSend_fixup);
    v4->string = (struct NSString *)objc_msgSend_ptr(v3, selRef_copy);
  }
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100015B75) ----------------------------------------------------
// BigTextView - (id)foregroundColor
id __cdecl -[BigTextView foregroundColor](struct BigTextView *self, SEL a2)
{
  __int64 v2; // rax@1
  id result; // rax@1

  LODWORD(v2) = msgRef_retain__objc_msgSend_fixup(self->foregroundColor, &msgRef_retain__objc_msgSend_fixup);
  LODWORD(result) = msgRef_autorelease__objc_msgSend_fixup(v2, &msgRef_autorelease__objc_msgSend_fixup);
  return result;
}
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272C0: using guessed type int (__fastcall *msgRef_autorelease__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100015BA5) ----------------------------------------------------
// BigTextView - (void)setForegroundColor:(id) 
void __cdecl -[BigTextView setForegroundColor:](struct BigTextView *self, SEL a2, id a3)
{
  id v3; // rbx@1
  struct BigTextView *v4; // r14@1
  struct objc_object *v5; // rdi@1

  v3 = a3;
  v4 = self;
  v5 = (struct objc_object *)self->foregroundColor;
  if ( v5 != a3 )
  {
    msgRef_release__objc_msgSend_fixup(v5, &msgRef_release__objc_msgSend_fixup);
    v4->foregroundColor = (struct NSColor *)objc_msgSend_ptr(v3, selRef_copy);
  }
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100015BEF) ----------------------------------------------------
// BigTextView - (id)backgroundColor
id __cdecl -[BigTextView backgroundColor](struct BigTextView *self, SEL a2)
{
  __int64 v2; // rax@1
  id result; // rax@1

  LODWORD(v2) = msgRef_retain__objc_msgSend_fixup(self->backgroundColor, &msgRef_retain__objc_msgSend_fixup);
  LODWORD(result) = msgRef_autorelease__objc_msgSend_fixup(v2, &msgRef_autorelease__objc_msgSend_fixup);
  return result;
}
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272C0: using guessed type int (__fastcall *msgRef_autorelease__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100015C1F) ----------------------------------------------------
// BigTextView - (void)setBackgroundColor:(id) 
void __cdecl -[BigTextView setBackgroundColor:](struct BigTextView *self, SEL a2, id a3)
{
  id v3; // rbx@1
  struct BigTextView *v4; // r14@1
  struct objc_object *v5; // rdi@1

  v3 = a3;
  v4 = self;
  v5 = (struct objc_object *)self->backgroundColor;
  if ( v5 != a3 )
  {
    msgRef_release__objc_msgSend_fixup(v5, &msgRef_release__objc_msgSend_fixup);
    v4->backgroundColor = (struct NSColor *)objc_msgSend_ptr(v3, selRef_copy);
  }
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100015C69) ----------------------------------------------------
// BigTextView - (id)shadowColor
id __cdecl -[BigTextView shadowColor](struct BigTextView *self, SEL a2)
{
  __int64 v2; // rax@1
  id result; // rax@1

  LODWORD(v2) = msgRef_retain__objc_msgSend_fixup(self->shadowColor, &msgRef_retain__objc_msgSend_fixup);
  LODWORD(result) = msgRef_autorelease__objc_msgSend_fixup(v2, &msgRef_autorelease__objc_msgSend_fixup);
  return result;
}
// 1000272B0: using guessed type int (__fastcall *msgRef_retain__objc_msgSend_fixup)(_QWORD, _QWORD);
// 1000272C0: using guessed type int (__fastcall *msgRef_autorelease__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100015C99) ----------------------------------------------------
// BigTextView - (void)setShadowColor:(id) 
void __cdecl -[BigTextView setShadowColor:](struct BigTextView *self, SEL a2, id a3)
{
  id v3; // rbx@1
  struct BigTextView *v4; // r14@1
  struct objc_object *v5; // rdi@1

  v3 = a3;
  v4 = self;
  v5 = (struct objc_object *)self->shadowColor;
  if ( v5 != a3 )
  {
    msgRef_release__objc_msgSend_fixup(v5, &msgRef_release__objc_msgSend_fixup);
    v4->shadowColor = (struct NSColor *)objc_msgSend_ptr(v3, selRef_copy);
  }
}
// 1000263F0: using guessed type char *selRef_copy;
// 1000272D0: using guessed type int (__fastcall *msgRef_release__objc_msgSend_fixup)(_QWORD, _QWORD);

//----- (0000000100015CE3) ----------------------------------------------------
// BigTextView - (float)alpha
float __cdecl -[BigTextView alpha](struct BigTextView *self, SEL a2)
{
  return self->alpha;
}

//----- (0000000100015CF5) ----------------------------------------------------
// BigTextView - (void)setAlpha:(float) 
void __cdecl -[BigTextView setAlpha:](struct BigTextView *self, SEL a2, float a3)
{
  if ( a3 != self->alpha )
    self->alpha = a3;
}

// ALL OK, 403 function(s) have been successfully decompiled
